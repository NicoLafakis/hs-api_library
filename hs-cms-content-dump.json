[
  {
    "url": "https://developers.hubspot.com/docs/reference/cms",
    "content": "CMS Reference Overview\n\nUse the CMS reference docs to quickly find information you might need when building themes, modules, templates, and more.\n\nWhile the CMS guides are intended to walk you through various features and functionalities, this section is geared towards providing definition lists and boilerplate code that you can use as needed.\n\nThe information you’ll find in this section assumes that you’re familiar with developing on the CMS. If you’re just getting started, it’s recommended to check out the CMS quickstart in the CMS development guides section.\n\nIn this section, find reference information for modules, the HubL templating language, fields and serverless functions.\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/ui-components",
    "content": "UI components overview (BETA)\n\nWhen building a UI extension, you can include any number of HubSpot-provided reusable components. These components range from simple text fields to out-of-the-box CRM object reports, and each component offers customization options through properties.\n\nPlease note: to access the latest components, ensure that you've installed the latest npm package by running npm i @hubspot/ui-extensions in the extensions directory.\n\nComponents are imported at the top of your tsx or jsx extension file. Depending on the type of component, you'll need to import them from one of two SDK directories.\n\nFor a visual library of these UI components, check out HubSpot's Figma Design Kit.\n\nStandard components\n\nStandard components are components that can be used for both internal and external data. These components do not fetch data on their own, but are more flexible in their implementation.\n\nThese components are imported from '@hubspot/ui-extensions'.\n\nCRM data components\n\nCRM data components can pull data directly from the currently displaying CRM record, including information about associated records and single object reports. These components can only be placed in the middle column of CRM records. Learn more about CRM data components.\n\nThese components are imported from @hubspot/ui-extensions/crm.\n\nCRM action components\n\nCRM action components provide a built-in set of CRM-related actions, including adding notes to records, opening a one-to-one email composition window, creating new records, and more. Each component can perform the same set of actions, so which component to choose will depend on your needs and preferences. Learn more about CRM action components.\n\nCRM action components are imported from @hubspot/ui-extensions/crm.\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/cms/overview#cms-reference-overview",
    "content": "\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/guides/cms/quickstart",
    "content": "HubSpot CMS quickstart guide\n\nHubSpot's CMS is a powerful, flexible platform for creating HubSpot websites, including website pages, blogs, and lightweight apps. It features built-in security and reliability features, along with a globally distributed Content Delivery Network (CDN) that ensures fast page load times.\n\nWhen developing on the HubSpot CMS, you can use your preferred tools, technologies, and workflows, such as GitHub, while developing websites. Content creators can then create pages and publish content using drag and drop editors. And because the CMS is integrated with the CRM, you can create dynamic website experiences for your visitors based on the data you already have.\n\nBefore you begin\n\nBefore you start, ensure you've done the following:\n\nCreate a free test account to build without impacting a production environment. You can use either of the following types of accounts:\n\nInstall Node.js, which enables HubSpot's local development tools. Versions 18 or higher are supported.\n\n1. Install the HubSpot CLI\n\nOnce you're ready to begin, open a terminal window and create or navigate to the directory where you want your local HubSpot files to live. This working directory is where the theme and its associated files will be placed.\n\nNext, run npm install -g @hubspot/cli@latest to install the HubSpot CLI, which introduces an hs command that allows you to easily interact with your HubSpot account.\n\n2. Configure the local development tools\n\nRun hs init to connect the tools to your HubSpot account. This command will walk you through the following steps:\n\nOnce you've completed this simple init flow, you'll see a success message confirming that a configuration file, hubspot.config.yml, has been created in your current directory.\n\n3. Create a theme\n\nRun hs create website-theme my-website-theme to create a my-website-theme directory populated with files from the CMS theme boilerplate.\n\n4. Upload your theme to HubSpot\n\nRun hs upload my-website-theme my-website-theme to upload your new theme to a my-website-theme folder in your HubSpot account.\n\nOnce this task has completed, you can view these files in the design manager of your HubSpot account. The design manager is an in-app code editor that displays the developer file system, and can be found by navigating to Content > Design Manger in the left sidebar of your account.\n\n5. Create a website page\n\nTo experience how content creators will use your templates and modules, create a website page using the theme you just uploaded.\n\n6. Edit a CSS file\n\nRun hs watch my-website-theme my-website-theme. While watch is running, every time you save a file, it’ll be automatically uploaded. Open your theme's /css/components/_footer.css file in your editor, make a change (such as updating the .footer__copyright selector to have color: red;), and save your changes. Your terminal will show that the saved file has been uploaded.\n\nReload your published page to see the CSS change reflected on your website.\n\nWhat's next?\n\nYou're encouraged to continue to explore and experiment with the boilerplate theme and the page-building experience. The sandbox account you created is yours to play around in and experiment with.\n\nYou can checkout HubSpot's Inspire gallery to see websites, landing pages, and web apps built on HubSpot.\n\nYou might also want to check out the following documentation:\n\nJoin the HubSpot CMS developer community\n\nLearning is easier when you can learn from those who came before you.\n\nHubSpot is driven by its Culture Code, embodied by the attributes in HEART: Humble, Empathetic, Adaptable, Remarkable, and Transparent. This culture extends to our ever-growing developer community, with thousands of brilliant and helpful developers around the world.\n\nDeveloper Slack community\n\nJoin the Developer Slack to collaborate with 9,000+ developers and members of the HubSpot product team.\n\nDeveloper forums\n\nAsk questions, learn from fellow developers, and submit ideas in the CMS developer forums.\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/cms/modules/configuration",
    "content": "Configuring a module\n\nWhen creating a module, there are a number of options available that impact where a module is visible, how it's identified, and how it can be edited.\n\nWhen developing locally, modules are stored as folders with a .module suffix. These folders contain the files that make up the module's settings and the code used to render it. A module's configuration is kept in the meta.json file, while fields are configured separately in a fields.json file.\n\nMost configuration can also be modified using the module editor in the Design Manager.\n\nAt a high level, you configure module options locally within the meta.json file, which can include the following properties:\n\nBelow, learn more about individual module configuration options.\n\nAdding an Icon\n\nModules can include an icon that appears in the Design Manager and the page and email editors to provide visual context for content creators. It's recommended to have different icons for the different types of modules in your theme. Icons are required for marketplace providers.\n\nThere are two ways to add an icon, through the design manager or the CMS CLI.\n\nModule icons must be an .svg file and no larger in size than 10kb. For best results your icon should be simple and use only one color. Icons that use more than one color will be automatically converted for you. The default module icon that displays is a wrench and paint brush icon.\n\nTo add an icon using the design manager:\n\nTo add an icon when developing locally, open the module's meta.json file and add or edit the icon parameter's value to be an SVG from the file manager.\n\nChanging the label\n\nThe label used when modules are displayed in the editor can be adjusted separately from the name for the module. This is useful when developing locally as you can have a name that makes sense to you while having a different one content creators see.\n\nLocally you change the label parameter to set the label. In the design manager there's a field in the module editor below the module name.\n\nMaking a module global\n\nFor normal modules, the content of each instance of a module in a page, email or template is independent. For some use cases, it is useful to be able to have all instances of a module share the same content. When developing locally, you can make a module global by setting global to true.\n\nYou can also convert modules in a drag-and-drop template to global using the design manager.\n\nControlling where a module is available for use\n\nWhen developing locally, you can control which types of content a module can be used in through the hostTemplateTypes property. Learn more about the available template types. Modules also can be hidden so that they can't be added directly to pages through setting is_available_for_new_content to false. For example, this can be helpful for modules built for navigation menus and search.\n\nYou can update this in the design manager by clicking the Template type option in the right sidebar.\n\nAdding CSS and JavaScript dependencies\n\nIn addition to using module.css and module.js to add CSS and JavaScript that will be added to all pages that include a module instance, dependencies that are shared between modules can be attached using css_assets and js_assets. Paths can be absolute or relative to the meta.json file.\n\nWarning: When using relative paths to reference dependencies, running hs fetch --overwrite to update the module for local development will overwrite the relative paths with absolute paths.\n\nUsing the design manager, you can link CSS and JavaScript files to a module using the Linked files section in the right sidebar of the module editor.\n\nAdding categories and tags\n\nYou can assign categories and tags to modules to organize them within HubSpot tools:\n\nIn the design manager, you can assign categories and tags using the Filter tags section of the right sidebar in the module editor. Learn more about the available categories and tags below.\n\nLocally, you can add categories and tags to a module's meta.json file as follows:\n\nCategories\n\nA module's categories array can contain up to three of the following categories (case-insensitive):\n\nTags\n\nA module's content_tags array can contain any of the following module tag objects (case sensitive):\n\nContent types:\n\nFunctions:\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/cms/hubl/overview",
    "content": "HubL syntax overview\n\nHubSpot’s CMS uses the HubSpot Markup Language, referred to as HubL (pronounced “Hubble”). HubL is HubSpot’s extension of Jinjava, a templating engine based on Jinja. HubL uses a fair amount of markup that is unique to HubSpot and does not support all features of Jinja.\n\nThis article will take you through the basics of HubL's features and syntax.\n\nTypes of delimiters\n\nSimilar to other commonly used templating languages such as PHP, HubL can be mixed into your HTML in coded templates files or HubL template modules. In order to differentiate, where your HubL starts and ends, you will need to learn a few key symbols that act as delimiters.\n\nBe mindful of nesting comments in your code, as it can result in the trailing comment tag to render as text.\n\nStatements\n\nHubL statements are used to create editable modules, define conditional template logic, set up for loops, define variables, and more. Statements are delimited by {%. They do not print anything to the page.\n\nExpressions\n\nExpressions print values stored in the context of the template. Expressions are delimited by {{. For example, a variable must be defined as a statement, but then a HubL expression would be used to print the variable.\n\nDo tag\n\nThe 'do' tag works exactly like the regular statements {% ... %}; This can be used to modify lists and dictionaries.\n\nNote: When adding to arrays, you want to use .append() and when adding to objects, you want to use .update()\n\nComments\n\nThe final type of delimiter that you may encounter or decide to employ while developing with HubL, is a HubL comment. Comments are defined by a {#.\n\nModules\n\nModules are dynamic areas of a template that can be customized by the end user in the content editor. For example, if you were coding a template file from scratch, you would add modules to templates with HubL tags, to give your content creators the ability to edit areas of the page.\n\nModule tags are made up of the following components:\n\nThe example above is a text module with the label and value parameters defined. The label defines the help text in the editor and value sets the default text for that module. See the sample gif below for how this looks inside of the editor.\n\nYou can learn more about using modules in templates, here.\n\nVariables and macros\n\nHubL includes many predefined HubSpot variables that print their helpful values from the app. In addition, you can define your own variables in a template. In the following example, a variable named primaryColor is defined in a statement and then printed with a HubL expression. This example mixes the HubL variable with CSS.\n\nHubL macros allow you to print multiple statements with a dynamic value. This technique proves useful when you find yourself writing the same basic code blocks over and over, but only need to change certain values. In the following example, a macro is used to print a CSS3 transition property that includes all the vendor prefixes. You can learn more about macros, here.\n\nFilters and functions\n\nFilters can be added to your HubL to transform or alter the value of a template variable. A simple example displayed below is formatting a date variable. Filters use a | (pipeline symbol) and are applied without spaces to a variable.\n\nIn the example below, assume a blog post was published on the 29th of April. The publish date of the post is formatted with a datetimeformat filter. You can view a full list of filters here.\n\nWhile filters affect how variables render, functions process value and account information and render that info. For example, a function can be used to get the total number of posts for a particular blog or to lighten/darken a color variable by a particular amount.\n\nThe example would print the total number of blog posts from the designers.hubspot.com/blog. It uses a Blog ID (available in the URL of the blog dashboard) parameter to specify which blog to target. You can view a full list of functions here.\n\nIf statements\n\nIf statements allow you to use conditional logic to dictate how your template will render conditional logic in HubL statements for if, elif, else, and endif. An if statement must begin with an if and end with an endif.\n\nThe example below defines a choice module that lets the end user select a department from a dropdown. Depending on what the user selects in the editor, the template will generate a dynamic heading for a careers page. This example requires the use of the export_to_template_context parameter.\n\nFor loops\n\nFor loops allow you to iterate over items stored in a sequence. They will most commonly be used with rendering blog content in a listing format. For loops begin with a for statement and end with an endfor statement.\n\nIn the example below, an array of types of bears is stored as a variable called bears. A for loop is then used to iterate through the different types of bears printing a list item for each type.\n\nOther HubL features\n\nBelow are a few other miscellaneous templating features that may be useful, as you develop with HubL.\n\nEscaping HubL delimiters\n\nMany other languages share the same delimiters as HubL, which can create issues when working in coded files on the CMS. If you want to use a HubL delimiter for a different language, you need to wrap that code in:\n\nIncluding files in files\n\nYou can include multiple .html files in one HubL template using the include tag. In order to create an HTML file that does not require the standard template variables, you must uncheck the option \"Make template available for new content.\" The syntax is displayed below:\n\nYou can also compile multiple CSS files into a single CSS file with the same include tag. When you publish the parent file, the child file will be compiled into a single minified CSS file with the parent's code.\n\nBlocks and extends\n\nWhen creating complex templates, you can use create compartmentalized blocks that extend a parent template.\n\nFirst, you'll create a main template that includes the required standard_header_includes and standard_footer_includes variables. Within that template, you need to define a unique block using the following syntax where my_sidebar is a unique name:\n\nNext, you can create a child HTML file that will populate that block. First, you must declare an extends statement that references the path to the parent. This block of code would be rendered in the parent template but maintained in another smaller and more manageable file. This technique is not for everyone but can be useful to stay organized when coding complex email or page templates. When using this technique, you should choose the child template, when creating content.\n\nCopy section HubL\n\nIn the page editor, you can copy the HubL markup for a drag and drop section to reuse the code as needed. This can be helpful when wanting to recreate a drag and drop section in a coded file.\n\nLearn more about copying section HubL.\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/cms/fields/module-theme-fields",
    "content": "Module and theme fields\n\nAdd fields to modules and themes to allow content creators to control various aspects of a page within the page editor. Below, learn about all of the fields available for modules and themes, along with their available properties.\n\nFor more information about implementing module and theme fields, including field groups and repeating fields, view the module and theme fields overview.\n\nProperties used by all fields\n\nAll fields share a set of common properties. These are general fields, such as the field's name or the help text that displays for content creators using the field in the module or theme.\n\nAlignment\n\nEnables content creators to position an element within a container. To enable text alignment, use the text alignment field instead.\n\nAlignment fields are supported in modules and can only be used as style fields.\n\nBackground image\n\nThis field provides a background image field which has subfields for background position and background size. Background image fields have a .css property that returns CSS based on the field's value. Learn more about the generated CSS property.\n\nBackground Image fields are supported in modules and can only be used as style fields.\n\nBlog\n\nThis field provides a way for content editors to select a blog, providing you, the developer the blog's id. This is useful for situations like pulling teaser information for featured blogs in modules. You can use the blog id in blog-related HubL functions to get information like blog authors, recent blog posts, recent blog posts with a specific tag, and more.\n\nBlog fields are supported in modules.\n\nBoolean\n\nThis field provides a way for content editors to enable/disable functionality. Booleans can only be true or false. Often it makes sense to make groups or fields conditional based on boolean fields. If you think you might need to provide more than two states down the road, a Choice field may be a better option as you can grow into that with less effort should needs change later.\n\nBoolean fields are supported in both themes and modules. Boolean fields can be used as style fields.\n\nA toggle switch can make sense when the value of the field enables/disables other fields conditionally being shown. Another time a toggle may be useful is when the field represents a major design change for the module.\n\nCheckboxes make sense for smaller changes that may not have as drastic of an effect on the module's display, such as hiding or showing individual small elements.\n\nBorder\n\nThis field provides content creators a user interface for creating a border around an element. Border fields have a .css property that returns CSS based on the field's value. Learn more about the generated CSS property.\n\nBorder fields are supported in modules. Border fields can only be used as style fields.\n\nChoice\n\nChoice fields allow a content creator to select one or more items from a list of options. Using the display property, you can set display the options in a dropdown menu, radio select, or checkboxes, or a range of buttons. Learn more about choice field display options below.\n\nChoice fields are supported in both themes and modules. Choice fields can be used as style fields.\n\nChoice button presets\n\nTo configure a choice field to display buttons instead of a dropdown menu, checkboxes, or radio selects, you can use any of the presets below. Each preset allows for a specific set of option labels, which you'll need to include in the choices array. These labels cannot be customized.\n\nColor\n\nColor fields provide a color picker interface for content creators. They support solid colors as well as transparency. They are a perfect choice for when you want to give content creators full control over colors within a module.\n\nBy default, the opacity input of a color field is hidden for email modules, as some email clients don't respect opacity rules. You can reveal the opacity field for email modules by setting show_opacity to true.\n\nColor fields are supported in both themes and modules. Color fields can be used as style fields\n\nCTA\n\nCall-To-Action (CTA) fields provide a way for users to pick a CTA to display. CTA's are essentially trackable buttons or links. Content creators create CTAs that can be used throughout a site.\n\nCTA fields are supported in modules. CTA fields are available in CMS Hub Professional and Enterprise.\n\nCRM object\n\nCRM object fields provide a way for users to pick an individual instance of a CRM object to display.\n\nmodule.fieldname.properties returns the properties fetched from this object instance. This makes it so you don't need to use the crm_object() function to get the data for the selected object instance.\n\nmodule.fieldname.id returns the object instance id.\n\nCRM object fields are supported in modules. CRM object fields are available in CMS Hub Professional and Enterprise.\n\nCRM object property\n\nUse the CRM object property field to access property metadata, such as the label and property name, from a specified object type. This enables content creators to select from object properties when needing to display property details on a page.\n\nFor example, you could add this field to a custom table module to populate table headings based on the selected properties.\n\nCRM object fields are supported in modules.\n\nIn addition, you can use the following snippets to return other property details:\n\nDate\n\nDate fields provide a date picker interface to make it easy for content creators to select a date. Returns a timestamp you can use in your code.\n\nDate fields are supported in modules.\n\nDate and time\n\nDate and time fields provide a date picker interface just like the date field, as well as a time picker to make it easy for content creators to select a date and time of day. Returns a timestamp you can use in your code.\n\nDate and time fields are supported in modules.\n\nEmail Address\n\nEmail address fields allow a user to select multiple email addresses. This could be used for displaying contact information. The email field returns an array of selected email addresses you can loop through.\n\nEmail fields are supported in modules.\n\nEmbed\n\nEmbed fields allow the user to add a URL from an oEmbed-enabled site or paste in an embed code from another site. To learn more about oEmbed usage on HubSpot, and see use cases, visit our oEmbed document.\n\nFile\n\nFile fields allow the user to upload a file to the file manager, or document manager, and make it easy to attach items that are in those locations. This can be useful for linking out to PDF files or files of other formats. For displaying images on a page you should use the image field.\n\nFile fields are supported in modules.\n\nFollowup email\n\nFollowup email fields allow a content creator to designate an email that will be sent in response to a form submission. This works in tandem with the HubL form tag, through the simple_email_campaign_id parameter.\n\nFollowup email fields are supported in modules.\n\nFont\n\nFont fields provide content creators basic font styling controls. Content creators can choose the size, color, font family, and the format (bold, italic, and underlined). The listed fonts are all standard web-safe fonts. These fonts are sourced from Google Fonts but served by HubSpot directly on the domain that the page loads on.\n\nFont fields are supported in both themes and modules. Font fields can be used as style fields.\n\nPlease note:\n\nForm\n\nForm fields allow a content creator to designate a form in their account. You can then use this to render a form to a page using the HubL form tag.\n\nForm fields are supported in modules.\n\nGradient\n\nThis field provides a way for content creators to create and configure gradients. At this time linear gradients support up to 5 color stops. Gradient fields have a .css property that returns CSS based on the field's value. Learn more about the generated CSS property.\n\nGradient fields are supported in modules. Gradient fields can only be used as style fields.\n\nHubDB Row\n\nHubDB Row fields allow a content creator to select an individual row (or rows if using repeater fields) from a defined table. You can then use this field to create user-defined lists, tables, resources, and more.\n\nHubDB Row fields are supported in modules. HubDB Row fields are available in CMS Hub Professional and Enterprise.\n\nHubDB Table\n\nHubDB Table fields allow a content creator to designate a HubDB in their account. You can then use this to render a form to a page using the HubL form tag. Returns the table id, which you can use with the HubDB HubL functions.\n\nHubDB Table fields are supported in modules. HubDB Table fields are available in **CMS Hub**Professional and Enterprise.\n\nIcon\n\nIcon fields provide an icon picker UI to make it easier for content creators to add icons to your modules. The Icon field is preloaded with FontAwesome Icons.\n\nIcon fields are supported in modules. Icon fields can be used as style fields.\n\nImage\n\nImage fields provide an easy interface for content creators to add images to a module or theme. Image fields provide a file picker interface that lists images from the File Manager. Since images can be used and displayed in different ways, developers can limit the sizing options available to the content creator in the UI as well as allow for lazy-loading of images.\n\nImage fields are supported in modules. Images can be used as style fields. You should only use Image fields as style fields, if the image will be purely presentational, not convey meaning and not a background image. This is to follow best practices for accessibility.\n\nLink\n\nLink fields provide an easy interface for content creators to provide links to URLs and email addresses. For external links, content creators choose \"external\". For email links \"email address\". Finally for content hosted on the HubSpot CMS they can use \"content\" which shows a list of all pages and blog posts in the account, file showing file assets, and blog, showing all of the blog listings in the account. Link fields are very similar to URL fields except for the key difference that they provide a UI for \"open in new window\" and \"tell search engines not to follow\". If you do not want content creators to have that control use the URL field.\n\nLink fields are supported in modules.\n\nLogo\n\nLogo fields provide a way for content creators to specify logo images to use in a page, defaulting to the domain's logo. This is useful for site headers and footers that may contain the company logo. Logo fields also allow for lazy loading.\n\nLogo fields are supported in modules.\n\nMenu\n\nMenu fields provide an easy interface for content creators to create, edit and select a navigation menu that is re-usable on other pages. This field is great for use in menus that are used across multiple pages like main navigation and footer navigation and other global content. Use this field in tandem with the menu tag or menu() function, to render a menu inside of your module.\n\nFor menus that don't make sense to re-use on other pages, like a table of contents menu, use the simple menu field.\n\nMenu fields are supported in modules.\n\nNumber\n\nNumber fields provide an easy interface for content creators to enter in or adjust numerical values and options. This can be used for creating percentage based items or anything where numbers are needed for input.\n\nNumber fields are supported in modules. Number fields can be used as style fields.\n\nSuffix and prefix parameters are for display purposes in the content editor and have no effect on the numerical value of the field.\n\nPage\n\nPage fields provide an interface for content creators to select site pages and landing pages.\n\nThe value returned by a page field is the page id of the selected page. When used in tandem with the content_by_id or content_by_ids functions, you can use data from the selected pages in the current page.\n\nPage fields are supported in modules.\n\nRich text\n\nRich Text fields provide content creators with a WYSIWYG text editor experience. When a rich text field's value is printed it is printed as HTML. When you do not want content creators to have formatting capabilities use text fields.\n\nRich text fields are supported in modules.\n\nSimple menu\n\nSimple menu fields provide an easy interface for content creators to create a navigation menu that is not re-usable on other pages. For menus that should be reusable, use the menu field. A time you may want this is for a table of contents menu that links to headings on very long pages, or a list of links to content that only makes sense to have on the current page.\n\nSimple menu fields are supported in modules.\n\nSpacing\n\nThis field provides a user interface (UI) for content creators to set padding and margin. Spacing fields have a .css property that returns CSS based on the field's value. Learn more about the generated CSS property.\n\nSpacing fields are supported in modules. Spacing fields can only be used as style fields.\n\nWhen using the spacing field, please note the following:\n\nTag\n\nTag fields provide a blog tag picker for content creators. This tag picker returns a blog tag id which can then be used in blog tag related functions such as Blog Tag URL and Blog Recent Tag Posts.\n\nTag fields are supported in modules.\n\nText\n\nText fields provide content creators a simple text editing experience with no rich text functionality. Text fields initially show as a single line, but can actually expand to be textareas, supporting multiple lines. Use these when you do not want content creators to have control over formatting. If you do want to provide formatting controls use rich text fields.\n\nText fields are supported in modules.\n\nText Alignment\n\nThis field provides content creators a way to align text content within a container. This should not be used for aligning other assets as there is a field type specifically for that.\n\nText alignment fields are supported in modules. Text alignment fields can only be used as style fields.\n\nURL\n\nURL fields provide a similar experience to link fields. Providing a UI for content creators to add links. URL fields, however, do not show a UI for open in a new window, nor tell search engines not to follow. Use this field when you as a developer want to dictate the values for that. If you want the user to have control, use link fields instead.\n\nURL fields are supported in modules.\n\nVideo\n\nVideo fields provide content editors with a place to add HubSpot Video to their module content without the need of using rich text fields.\n\nconversion_asset object parameters\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/cms/serverless-functions",
    "content": "Serverless functions reference\n\nPlease note: if you're building a serverless function as a part of a developer project, visit the developer projects serverless function documentation instead. The documentation below is for building serverless functions outside of the developer project platform.\n\nSupported products\n\nIn this article, learn about the files found inside of a serverless .functions folder and the CLI commands you can use with serverless functions.\n\nFor a high-level overview of serverless functions, see the serverless functions overview.\n\nFor more information about building serverless functions with projects for JavaScript rendered modules and partials, see the developer projects documentation.\n\nServerless.json\n\nIn the .functions folder, the serverless.json file stores the serverless function configuration. This is a required file, and maps your functions to their endpoints.\n\nPlease note: do not assign the same name to your secrets and environment variables. Doing so will result in conflicts when returning their values in the function.\n\nEndpoints\n\nEach endpoint can have its own environment variables and secrets. Variables specified outside of endpoints should be used for configuration settings that apply to all functions and endpoints.\n\nEndpoints have a couple unique keys.\n\nServerless functions are exposed through a path at your HubSpot CMS account’s domain. This includes default .hs-sites.com sub-domains.\n\nYou can access these functions at the following URL:\n\nhttps://{domainName}/_hcms/api/{endpoint-name/path}?portalid={hubId}.\n\nBelow, learn about each URL component:\n\nFunction file\n\nIn addition to the serverless.json configuration file, the .functions folder will also contain a Node.js JavaScript file that defines the function. You can also leverage the request library to make HTTP request to HubSpot APIs and other APIs.\n\nFor example:\n\nContext object\n\nThe context object contains contextual information about the function's execution, stored in the following parameters.\n\nHeaders\n\nIf you need to know the headers of the client that's hitting your endpoint, you can access them through context.headers, similar to how you would access information through context.body.\n\nBelow, review some of the common headers that HubSpot provides. For a full list, see MDN's HTTP headers documentation.\n\nRedirect by sending a header\n\nYou can perform a redirect from your serverless function by sending a response with a location header and 301 statusCode.\n\nSet cookies from your endpoint\n\nFrom your serverless function you can tell the client (web browser) to set a cookie.\n\nSet multiple values for a single header\n\nFor headers that support multiple values, you can use multiValueHeaders, to pass the values. For example: you can tell the browser to set multiple cookies.\n\nSecrets\n\nWhen you need to authenticate a serverless function request, you'll use secrets to store values such as API keys or private app access tokens. Using the CLI, you can add secrets to your HubSpot account to store those values, which you can later access through environment variables (process.env.secretName). Secrets are managed through the HubSpot CLI using the following commands:\n\nOnce added through the CLI, secrets can be made available to functions by including a secrets array containing the name of the secret. This enables you to store your function code in version control and use secrets without exposing them. However, you should never return your secret's value through console logging or as a response, as this will expose the secret in logs or in front-end pages that call your serverless function.\n\nPlease note: due to caching, it can take about one minute to see updated secret values. If you've just updated a secret but are still seeing the old value, check again after about a minute.\n\nUsing serverless functions with the form element\n\nWhen submitting serverless functions use javascript to handle the form submission, and use the \"contentType\" : \"application/json\" header in your request. Do not use the <form> elements action attribute.\n\nCORS\n\nCross Origin Resource Sharing (CORS) is a browser security feature. By default browsers restrict cross-origin requests initiated by javascript. This prevents malicious code running on a different domain, from affecting your site. This is called the same-origin policy. Because sending and retrieving data from other servers is sometimes a necessity, the external server, can supply HTTP headers that communicate which origins are permitted to read the information from a browser.\n\nYou should not run into CORS issues calling your serverless function within your HubSpot hosted pages. If you do, verify you are using the correct protocol.\n\nGetting this CORS error? \"Access to fetch at [your function url] from origin [page making request] has been blocked by CORS policy: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.\"\n\nIs your request to a different origin than the site calling it?\n\nIf using a different protocol, simply change the protocol to match and that will fix it.\n\nYou can't modify HubSpot's Access-Control-Allow-Origin header at this time.\n\nSee MDN for further detailed CORS error troubleshooting.\n\nGet requests\n\nGet requests may be able to make CORS requests depending on the client. Do not make GET requests write anything, just return data.\n\nPreloaded packages\n\nHubSpot serverless functions currently come preloaded with the following packages:\n\nTo use the latest supported version of a preloaded package, or to use a newly added package:\n\nIf you want to include packages outside of the preloaded package set, you can use webpack to combine your node modules and have your bundled files be your function files.\n\nLimits\n\nServerless functions are intended to be fast and have a narrow focus. To enable quick calls and responses, HubSpot serverless functions have the following limits:\n\nExecution limits\n\nThis means either of these scenarios can happen:\n\nFunctions that exceed those limits will throw an error. Execution count and time limits will return a 429 response. The execution time of each function is included in the serverless function logs.\n\nTo assist in avoiding these limits, limit data is provided automatically to the function context during execution. You can use that to influence your application to stay within those limits. For example, if your application requires polling your endpoint, then you can return with your data a variable to influence the frequency of the polling. That way when traffic is high you can slow the rate of polling avoiding hitting limits, then ramp it back up when traffic is low.\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/cms/modules/default-email-modules",
    "content": "Default email modules\n\nBelow, learn about the modules that you can use when building email templates.\n\nThese modules are separate from default web modules, which can be used to build website pages, blog posts, and blog listing pages. Many of the modules below were released to replace usage of default web modules in emails, such as the email_logo module replacing the logo module. If your email templates are still using the web versions of these modules, learn how to update your email templates to use email-specific modules instead.\n\nTo view a default module's code, you can view and clone the module within the @hubspot folder of the design manager, or fetch it by its path locally using the HubSpot CLI.\n\nEmail blog post filter\n\nA version of the blog post filter module for emails.\n\nEmail blog post listing\n\nA version of the blog post listing module for emails.\n\nEmail Call-to-Action\n\nA version of the Call-to-Action module for emails.\n\nEmail header\n\nA version of the header module for emails.\n\nEmail HTML\n\nRaw HTML module for emails.\n\nEmail image\n\nImage module for emails.\n\nEmail linked image\n\nA version of the image module for emails.\n\nEmail logo\n\nA version of the logo module for emails.\n\nMain email body\n\nThe main body module for emails.\n\nOffice location information\n\nOffice location information footer for emails (CAN-SPAM compliant).\n\nEmail one line of text\n\nA version of the text module for emails.\n\nEmail section header\n\nA version of the section header module for emails.\n\nEmail social sharing\n\nA version of the social sharing module for emails.\n\nNote: The variable social_link_url in the default column below is the same value as the link parameter.\n\nEmail subscription preferences\n\nModule for displaying email subscription preferences.\n\nEmail subscriptions confirmation message\n\nConfirmation of email subscription changes.\n\nEmail unsubscribe (backup)\n\nSupported in pages, blog posts, and blog listings.\n\nEmail video\n\nA video module for emails.\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/cms/modules/default-module-versioning",
    "content": "Default module versioning\n\nReleasing a new version of a module, rather than update the existing version, enables HubSpot to make significant updates without impacting existing content. For example, HubSpot may release a new version of a particular module to better organize fields and provide more styling options, or to improve functionality by adding JavaScript.\n\nNew versions of modules are first released to new HubSpot accounts created after a certain date. This means that different accounts may be using different versions of the same default module. If multiple accounts are using a theme that you built, you'll need to take module versioning into consideration so that the theme works as expected across all accounts. Below, learn more about how to develop your theme with versioning in mind, and which modules have multiple versions.\n\nHow versioning works\n\nHubSpot's existing default modules are treated as v0 modules, while new versions are released started at v1. For compatibility, HubSpot automatically maps v0 fields to v1 fields, which means that references to module fields are forward compatible. However, field references are not backwards compatible, meaning that v1 field references won't map to v0 fields.\n\nTo account for changes in an module's HTML, CSS, and JavaScript, you can use conditional statements to configure it depending on the account's available versions.\n\nTo add add a conditional statement, use get_asset_version(\"@hubspot/module-name\") within an HTML, CSS, or JavaScript file. The module's version will be returned as a string, enabling you to configure module options based on the returned version.\n\nSpecifying versions in themes\n\nWhen developing a theme, you can specify which module versions that you want to support within the theme.json file. When a version is specified, content editors will only allow access to that version in the editor, and the template will render that version accordingly. On upload via the CLI, or when making changes in the design manager, specified module versions will be validated to ensure validity of the modules and their version definitions.\n\nPlease note: this feature is not available for child themes. Instead, child themes will inherit module versions based on the parent theme when provided.\n\nYou can specify supported module versions in theme.json by including a pinned_module_versions object. For each module, you can specify a version or a range of versions.\n\nFor example, the code below would result in the theme allowing access to either v0 or v1 of the divider module, but only v1 of the search input module.\n\nAny default modules not included in the pinned_module_versions object will not be restricted to a particular version. In addition, you shouldn't specify versions of default modules that don't currently support versioning, and you can only specify versions that are available (e.g. you can't specify 2 for a module that doesn't have a v2).\n\nLearn more about submitting to HubSpot's Template Marketplace.\n\nManage an account's module versions\n\nIn an account's Themes & Modules settings (Settings >** Content** > Themes & Modules) users can opt into new module versions, revert  modules updated within the past 30 days, and view the version information for all default modules.\n\nUpdate a module's version\n\nTo opt into a new version of a module:\n\nAfter updating the module, you'll be taken to the Modules tab of the Themes & Modules settings page. On this page, you can see recently updated modules, modules with available updates, and version information for all your account's default modules.\n\nRevert an updated module\n\nWithin 30 days of updating a module, you can revert it to a previous version if needed:\n\nAfter reverting the update, it may take some time for your templates and pages to reflect the reverted module. At any point, you can update the module again by following the update steps above.\n\nModules with version support\n\nBelow, learn more about the modules that currently support versioning.\n\nDivider\n\nA new version of the default divider module has been released to accounts created after August 25th, 2022 (changelog announcement). This version update impacts the following module files:\n\nBelow, learn more about the new v1 version updates in each file, along with the original v0 version for comparison.\n\nv1 notes\n\nv1\n\nv0\n\nLanguage switcher\n\nA new version of the language switcher module has been released.\n\nThis version update impacts the following module files:\n\nBelow, learn more about the new v1 version updates in each file, along with the original v0 version for comparison.\n\nv1 notes\n\nA placeholder field has been added with the following options:\n\nv1\n\nv0\n\nPost listing\n\nA new version of the default post_listing module was released at the end of March 2024. The new version of this module is built with JavaScript and React as opposed to HubL, and module code is now rendered server-side to improve performance.\n\nIt preserves all of the previous module fields while bringing in some modern styling options for the user with new fields for text and layout.\n\nBelow, learn more about the new v1 version updates in each file, along with the original v0 version for comparison.\n\nv1 notes\n\nThe fields.json is file replaced by fields.tsx.\n\nExisting fields\n\nThe new version of the module includes all existing module fields.\n\nNew fields\n\nStyle fields\n\nThe following styling fields have been added:\n\nv1\n\nv0\n\nSearch input\n\nA new version of the default search input module has been released. This version update impacts the following module files:\n\nBelow, learn more about the new v1 version updates in each file, along with the original v0 version for comparison.\n\nv1 notes\n\nExisting fields\n\nNew fields\n\nStyle fields\n\nThe following style field groups have been added:\n\nv1\n\nv0\n\nSearch results\n\nA new version of the default search results module module has been released. This version update impacts the following module files:\n\nBelow, learn more about the new v1 version updates in each file, along with the original v0 version for comparison.\n\nv1 notes\n\nExisting fields\n\nNew fields\n\nStyle fields\n\nThe following style field groups have been added:\n\nv1\n\nv0\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/cms/modules/default-modules",
    "content": "Default web modules\n\nBelow, learn about the default modules that HubSpot provides for building templates for website pages, blog posts, and blog listing pages. You'll also find default modules that can be used to build quote templates.\n\nWhen developing locally, you can fetch a specific default module using the module path (e.g. hs fetch @hubspot/linked_image.module).\n\nTo view a default module's code, you can view and clone the module within the @hubspot folder of the design manager.\n\nPlease note: default web modules are separate from default email modules, which are for email templates. If your email templates include any of the following default web modules, you should replace them with the corresponding email-specific module:\n\nBlog comments\n\nSupported in blog posts and blog listings.\n\nBlog email subscription\n\nSupported in pages, blog posts, and blog listings.\n\nBlog posts\n\nAdd this module to blog listing pages to display blog post previews containing each post's title, featured image, author, publish date, and more with a clickable button that navigates to the post.\n\nThis default module has built using React, and you can view its source code on GitHub.\n\nPlease note:\n\nBlog post filter\n\nSupported in pages, blog listings, and blog posts.\n\nBlog post listing\n\nSupported in pages, blog listings, and blog posts.\n\nPlease note: a new version of this module was release at the end of March 2024. Learn more about the new default post listing module.\n\nButton\n\nSupported in pages, blog posts, and blog listings.\n\nCall-to-Action\n\nSupported in pages, blog listings, and blog posts.\n\nDelete data\n\nYou can add this module to your subscription preferences page to allow contacts to request that their data be deleted. This function is required under certain data privacy laws. Once a contact requests that their data be deleted, they have 30 minutes to confirm in an email that will automatically be sent.\n\nUsers with super admin permissions will receive a notification email about these requests. Learn how to allow contacts to request a download of their data.\n\nDivider\n\nSupported in pages. There's a new version of this module available in accounts created after August 25th, 2022. Learn more about this change.\n\nDownload data\n\nYou can add this module to your subscription preferences page to allow contacts to request a copy of their data. This function is required under certain data privacy laws. Users with super admin permissions will receive a notification email about these requests. Learn how to allow contacts to request that their data be deleted.\n\nForm\n\nSupported in pages, blog posts, and blog listings.\n\nHeader\n\nSupported in pages, blog listings, and blog posts.\n\nHorizontal spacer\n\nSupported in pages, blog listings, blog posts, and emails.\n\nIcon\n\nSupported in pages, blog listings, and blog posts. Icons can be pulled from the Font Awesome 5.0.10 and 5.14.0 icon sets.\n\nImage\n\nSupported in pages, blog listings, and blog posts.\n\nImage grid\n\nSupported in pages, blog listings, and blog posts.\n\nImage gallery\n\nSupported in pages, blog posts, and blog listings.\n\nImage slider gallery\n\nSupported in pages, blog posts, and blog listings.\n\nLanguage switcher\n\nSupported in pages.\n\nLogo\n\nSupported in pages, blog listings, and blog posts.\n\nLogo grid\n\nA customizable grid of containers to display logos uniformly. Supported in pages, blog listings, and blog posts.\n\nMeetings\n\nSupported in pages, blog posts, and blog listings.\n\nMembership social logins\n\nThis module provides Google and Facebook login capability to memberships sites. The user must sign-in with an account linked to the email for the contact in the CRM. You can choose which social logins to enable.\n\nSupported in membership login pages.\n\nFacebook requires having a Facebook developer account, and a facebook app created, with basic settings. Once you've done that your app id is what you pass to the module.\n\nGoogle requires a Google account, and authorization credentials created, once you have that your app's client id is what you pass to the module.\n\nMenu\n\nSupported in pages, blog posts, and blog listings.\n\nLooking to build your own custom menu? Try our menu() function.\n\nPage footer\n\nSupported in pages, blog listings, and blog posts.\n\nPassword prompt\n\nSupported in pages, blog posts, and blog listings.\n\nPayments\n\nSupported in pages, blog posts, and blog listings.\n\nProduct\n\nDisplays a product from the account's product library. Supported in pages, blog posts, and blog listings.\n\nQuote download\n\nSupported in quote templates.\n\nQuote payment\n\nSupported in quote templates.\n\nQuote signature\n\nSupported in quote templates.\n\nWhen a quote requires an e-signature, the following fields are available within an esignature object:\n\nWhen a quote requires a printed signature, the following fields are available within a print_signature object:\n\nLine items\n\nSupported in quote templates. This module also includes the default text used on custom quotes.\n\nRich text\n\nSupported in all template types.\n\nRSS listing\n\nSupported in pages, blog listings, and blog posts.\n\nSite search input\n\nSupported in pages, blog posts, and blog listings.\n\nSearch results\n\nSupported in pages, blog posts, and blog listings.\n\nSection header\n\nSupported in pages, blog listings, and blog posts.\n\nSimple menu\n\nSupported in pages, blog listings, and blog posts.\n\nSocial follow\n\nAdd links to your social media profiles, with drag and drop reordering in the content editor. Automatically inserts icons based on the social URL, but icons can be overridden.\n\nSupported in pages, blog listings, and blog posts.\n\nSocial sharing\n\nSupported in pages, blog listings, and blog posts.\n\nNote: The variable social_link_url in the default column below is the same value as the link parameter.\n\nTabbed card\n\nSupported in pages, blog listings, and blog posts.\n\nOne line of text\n\nSupported in pages, blog listings, and blog posts.\n\nVideo\n\nSupported in pages, blog listings, and blog posts.\n\nVideo embed (landing page)\n\nSupported in pages.\n\nWhatsApp link\n\nSupported in pages, blog posts, and blog listing pages. Requires a connected WhatsApp channel.\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/cms/modules/deprecated",
    "content": "Deprecated default modules\n\nBelow, learn more about the HubSpot default web modules that have been deprecated. These modules can still be cloned in the design manager, and existing instances of these modules will continue to function on live pages, but they no longer appear in the page editor for content creators to use.\n\nBlog listing\n\nAs of February 2024, the Blog Listing module was deprecated in favor of the Blog Posts module.\n\nFollow Me\n\nOn August 7th, 2024, the Follow Me module was deprecated in favor of the Social Follow module.\n\nFollow Me - LP\n\nOn August 7th, 2024, the Follow Me - LP module was deprecated in favor of the Social Follow module.\n\nGallery\n\nThis module was deprecated as of March 2023 in favor of the Image Grid, Image Slider, and Tabbed Card modules.\n\nPlease note: this also applies to the Growth theme's gallery module (@hubspot/growth/modules/image-gallery.module). The same replacement modules listed above are recommended.\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/cms/modules/export-to-template-context",
    "content": "export_to_template_context\n\nexport_to_template_context is a parameter that makes a HubL tag's parameters available to the template environment without actually rendering the HubL tag. This parameter can be used with all HubL tags. The widget_data dict is used to retrieve these parameters, store them in variables, and/or incorporate them into your template's logic.\n\nBy making a HubL tag's parameters available in the template context, without actually rendering the HubL tag, you can allow users to make decisions in the content editor that affect how the template renders. For example, let's say that you want to only render a certain code block when the user gives a value to a field. This becomes possible with this parameter.\n\nFirst you must add export_to_template_context=True to the HubL tag. Then you must use a widget_data.module.parameter_you_want_to_retreive.\n\nBelow are a few applications of this concept.\n\nUsage within custom modules\n\nexport_to_template_context=True is not supported in custom modules, as it serves no real purpose for them. You do not need to use export_to_template_context to get the value of a module within a template, you can already access it. If you need to visually hide the module's output you could build the module to not output anything, or include a boolean field that enables or disables whether the module renders anything.\n\nUser selectable background images\n\nIn this example, an image HubL tag is created but then exported to the context of the template rather than rendered. The src parameter is retrieved with the widget_data tag and rendered as the source of a background image in a style tag.\n\nWhile this is possible to do in coded templates, generally it is better to build a custom module to give users in the page editor the best experience. HubL tags like this show up as individual fields, whereas you may have multiple related fields. Using a custom module all of its fields display grouped in the page editor.\n\nChoice field to render pre-defined markup\n\nThe following example uses the export_to_template_context parameter in conjunction with a choice module to change a banner message on a careers page. The user selects a department via the UI and the heading changes without the user having to actually edit content.\n\nThis same functionality can actually be reproduced using a choice field inside of a custom module. The custom module UI actually makes choice options with both a value and a label pretty easy.\n\nRetrieving parameters from modules already rendered on the template\n\nIf you want to retrieve a parameter from a module or tag that is already rendering on a page, the module can be accessed within a dict named widgets. The export_to_template_context parameter is not required. The syntax is as follows:\n\nPlease note: the above method does not support retrieving values from fields in global modules, as content.widgets won't access global modules.\n\nBecause different fields store data in different formats it is often handy to make use of developer Info to see how you access the specific data you want to display.\n\nPrinting HubL module info on blog listing\n\nWhile blog templates are generally used for blogs, they can also be repurposed to create various other types of listings. You can use the techniques described above to achieve this.\n\nFor example, you may want to create a listing layout of press that your company has received, but rather than linking to posts, you want the listing to link to another page.\n\nYou can see this concept in action at academy.hubspot.com/projects. The projects listing page is a blog listing template, but each post links to a regular HubSpot page. The content creator specifies the destination link in the editor.\n\nWithin the head of the individual blog post's code, you would define a text field. If you don't want the text to render on the post, you would use export_to_template_context.\n\nThis text field is editable in each blog post. Next, we would need to define a link in our listing. But because the widget_data only exists in the context of the post, we need to use different syntax to fetch the widget data to populate the link. In this case, we would use content.widgets.custom_blog_link.body.value. While the widget_data is not available to the blog listing, the value of that field is still stored within the context of the individual content's widgets.\n\nA basic blog listing loop that renders this custom link with each post is shown below. If using this technique, you would want to ensure that you add the subdirectory automatically created for each blog post to your robots.txt file to prevent those empty posts from being crawled by Google and other crawlers.\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/cms/modules/files",
    "content": "Module files\n\nWhen building a module for pages, blogs, and quotes, the module will contain three front-end related files that control the content, styling, and functionality of the module:\n\nEmail modules don't support module.css and module.js. This is because email clients don't support JavaScript and support for linked CSS files is limited.\n\nThese files will always be rendered to the page when an instance of the module is on the page.\n\nWhen a page includes multiple instances of the same module, HubSpot will only load module.css and module.js from that module once. By default, module.css and module.js do not load asynchronously, but you can change this by including css_render_options and js_render_options in the module’s meta.json.\n\nModules can be built within the design manager or locally using the HubSpot CLI. In the design manager, module files are displayed in a multi-pane editor.\n\nWhen viewing a module locally, the files are contained within module-name.module folders.\n\nWhether you use the design manager or CLI to create and manage modules is based on your team’s preferences. See creating an efficient developer workflow for recommendations.\n\nHTML + HubL (module.html)\n\nThe module.html file is intended for HTML and HubL. In general, wherever a module is placed in the page editor or template file determines where the contents of the module.html file are rendered.\n\nThis file acts like a HubL include in the page wherever the module is placed. The module.html file can access the module's field values through HubL.\n\nCSS (module.css)\n\nUse the module.css file to add CSS to a module.\n\nIn general, module.css supports a very limited subset of HubL. However, you can use module_asset_url(\"my-image.png\") for images added as module linked assets. This enables linking assets such as images, packaged with the module itself. For example:\n\nBelow, learn how to set up a module's CSS to change dynamically based on the module's fields.\n\nStyling based on module field values\n\nThere are a few ways you can influence the styling of your module based on the module’s fields. Choose the way that works best for your specific use case.\n\nCSS Classes\n\nTo set up predefined styling for the module with the option for editors to select from those options, you can add a module field to set classes in your module.html file which correspond to CSS classes in your module.css file.\n\nFor example, you may have an image and text module. You want content creators to be able to position the image to the right or left of the text based on a choice field. To do this, you could set your module.html and module.css files as follows:\n\nrequire_css block\n\nWhen you need to give content creators direct control over specific properties and when classes are not ideal, style tags with require_css blocks are the best option.\n\nTo give content creators direct control over specific properties without using classes, you can instead add styling to the module.html file within require_css tags. For example:\n\nBecause module.html can render HubL, you can use module field values as CSS variables. When a content creator updates the field in the page editor, the CSS will update to match. These block move the <style> tags into the <head> of your page within the standard_header_includes statement.\n\nYou can also set the CSS to be scoped to only the module instance by wrapping the CSS with scope_css tags. For example, you could update the above module code as follows:\n\nAdd inline styles\n\nWhen you need to give content creators granular control over only a few properties and when classes are not ideal, you can directly add the values to a style attribute in the HTML.\n\nIf you have many properties and the code becomes hard to read, consider switching to the require_css block method.\n\nImport specific CSS files\n\nrequire_css is a HubL function that you can add to module.html which tells HubSpot that a particular module or template requires a particular CSS file to display. A link tag pointing to the css file is added to the page's <head> inside of the standard_header_includes.\n\nThe require_css function will only load that CSS file once, regardless of how many times that same file is required by modules and templates on a particular page. This makes it great for situations where styles may be shared across multiple modules, but where adding the CSS directly to the main stylesheets used on every page for your site may not make sense.\n\nrequire_css and linked CSS files fill the same purpose, but require_css can be used conditionally based on field values. This prevents loading unnecessary code.\n\nJavaScript (module.js)\n\nUse the module.js file to add JavaScript to a module.\n\nLike the module.css file, the module.js file does not support HubL.\n\nScripting based on field values\n\nThere are a few ways you can build modules, where the JavaScript acts differently based on field values. Understanding which method to use and when can mean performance benefits on every page the module is used.\n\nFor example, you have a custom image module, you want to give content creators the ability to make it so the image can open in a lightbox. Content creators only want that for specific images, and not all instances of the module.\n\nData attributes\n\nData attributes are HTML 5 standard custom attributes that developers add to elements. Just as all elements support class=\"yourClassName\", all elements support data-your-attribute=\"yourValue\".\n\nYou can use data attributes to pass the field values of your module instances to be handled by your module.js file.\n\nTo use the values in your module.js file, you will need to loop through all of the instances of your module. Adding a module-specific class name to the outermost wrapper element of your module will give you a target to use, so that you can loop through each of your module instances.\n\nThe data attributes will allow you to retrieve the field values for each module instance in your module.js.\n\nrequire_js block\n\nIn advanced situations, perhaps when using a JavaScript templating library or a reactive framework like Vue.js or React.js, you may prefer outputting just the data, while the framework handles rendering.\n\nIn this case, use a script tag surrounded by a require_js block to provide variables you can access from your templating script.\n\nThis technique can be useful for supplying advanced applications with an initial set of data from which to render. This eliminates an initial JavaScript call to retrieve data.\n\nrequire_js\n\nrequire_js is a HubL function that tells HubSpot that a particular module or template requires a particular JavaScript file to load properly. The function takes two parameters: the path to the file and the location the file is to be added to (\"head\" or \"footer\").\n\nIn a module require_js can only be added to the module.html. The JavaScript file referred to in the require_js statement will only be loaded once per page, regardless of how many times it is required by modules and templates within the page. This reduces the number of HTTP requests and prevents duplicate code.\n\nSome situations where this becomes handy:\n\nrequire_js and linked javascript files serve the same purpose, but require_js can be done conditionally based on field values. This prevents unnecessary code from being loaded. You also have the additional option of loading JavaScript in the head, should you need that.\n\nSince JavaScript is render-blocking , the default location require_js places JavaScript is the \"footer\". Learn more about optimizing for performance.\n\nRelated Information\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/cms/modules/using-modules-in-templates",
    "content": "Using Modules in Templates\n\nModules can either be added directly to a template or added to individual pages with drag and drop areas and flexible columns. When a module is added to a template, the module will appear in that location by default. Modules in drag and drop areas and flexible columns can be moved and removed, and other modules can be added around them. These are module instances.\n\nAfter a module has been defined, you can get its field values at the template level through the content.widgets dict.\n\nBasic module syntax\n\nHubL module tags are delimited by {% %} , and must specify module, a unique name, and the module's design manager path. A module can also include parameters for additional settings.\n\nThe path for HubSpot default modules always start with @hubspot/ followed by the type of module.\n\nPassing dicts to module parameters\n\nFor modules with fields that expect dicts, you can pass them like you would other parameters. If it's cleaner to you or you plan to re-use the values, you can set the dict to a variable, and pass the variable to the parameter instead.\n\nPassing fields that have dnd associated parameters\n\nDrag and drop tags, such as dnd_area, come with a set of default parameters, such as width. While the design manager will prevent you from creating new fields that use one of these reserved parameters, modules created before drag and drop tags were introduced may already use a reserved parameter.\n\nTo fix this, you can use the fields parameter. Just like you would pass field data to a group, you can pass the field name as a key on the fields object. Its value must be consistent with the format the field type expects.\n\nSetting template-level default values for fields\n\nYou can set default values for module fields at the template level by including parameters in the dnd_module tags. Below, learn how to set default field values in nested field groups, repeating fields, repeating field groups, and style fields.\n\nSetting default values for nested field groups\n\nBelow is an example of a custom drag and drop module with a custom style field group containing other nested field groups. Compare its template-level configuration with how this same grouping would appear in the design manager.\n\nSetting default values for repeating fields\n\nYou can set template level default values for repeating fields by passing an array to the field's parameter. The array's items must be in the format expected based on the field type. For example:\n\nSetting default values for repeating field groups\n\nModules that contain repeating groups of fields - like you might see in a slideshow module or FAQ module - can have a template level default set for those groups. To do this you pass an array of objects to your field group's parameter. The key and value pairs of the object are the field names and their values.\n\nSetting default values for style fields\n\nyou can explicitly set default values for style fields using the styles parameter.\n\nThis works just like other groups do, where the parameter is the name of the group. You pass an object to that parameter with all of the fields you wish to set.\n\nBlock Syntax\n\nWhile most modules have parameters that control default content, there may be situations where you need to add large code blocks to the default content of a module. For example, you may want to include a large block of HTML as the default content for a rich text or HTML module. Rather than trying to write that code into a value parameter, you can use HubL block syntax.\n\nPrior to the module_block syntax, widget_block was used. It follows the same pattern but the opening tags were widget_block, and widget_attribute. Closing tags were end_widget_attribute, end_widget_block.\n\nThe widget_block syntax is deprecated but you don't need to update old code.\n\nThe parameter that immediately follows module_block or widget_block(deprecated) is the type_of_module parameter.\n\nIn nearly all of our documentation you will find we use module. V2 HubSpot Modules are normal modules, like what you can create. Therefore there's no longer a need to use a different type_of_module.\n\nWhile widget_block is deprecated, and you should use module_block. If inheriting a website from another developer it may contain old code using widget_block and type_of_module.\n\nThe type_of_module supports V1 HubSpot module names for example: rich_text or raw_html. Additional parameters can be added to the first line of HubL. The second line defines which parameter the contents of the block will be applied to. For example, for a rich_text module this should be the html parameter. For a raw_html module, this would be the value parameter (see both examples below).\n\ncontent_attribute\n\nIn addition to regular and block syntax, there are certain instances where you may want to specify a large block default content for a predefined content variable. The most common example of this proves to be the content.email_body variable. This variable prints a standard email body that can be altered in the content editor. Since this isn't a standard HubL module, we use a content_attribute tag to specify a block of default content. The example below shows the email body variable populated with a default content code block.\n\nParameters available for all modules\n\nWhile some modules have certain special parameters, below is a list of parameters supported by all modules.\n\nTo see a complete list of all module types and their parameters, click here.\n\nField-based parameters\n\nBelow, learn about the field-based module parameters you can use.\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/cms/hubl/operators-and-expression-tests",
    "content": "Operators & Expression Tests\n\nIn order to expand the logic and functionality of your templates, HubL supports several key operators and expression tests. The operators allow you to execute math functions, make comparisons, complicate template logic, and alter what markup renders. In addition, this article contains a comprehensive list of expression tests that can be used in HubL.\n\nOperators\n\nOperators are symbols that tell the HubL compiler to execute various operations that result in the final markup ouput. The following section includes a list of all of the supported HubL operators.\n\nMath\n\nStandard math operators can be used to calculate values in the context of a template.\n\nComparison\n\nComparison operators can be used to evaluate values for template logic. You can see some examples of comparison operators being used on if statements here.\n\nThe shorthand version of the comparison operators are usable in filters that involve testing an expression such as |selectattr().\n\nLogical\n\nLogical operators allow you to combine multiple expressions into single statements.\n\nOther HubL operators\n\nBelow are other important HubL operators that can be used to perform various tasks.\n\nExpression tests\n\nExpression tests are various boolean conditions that can be evaluated by using logical operators.\n\nboolean\n\nThe boolean expression test checks to see whether the object is boolean (in a strict sense, not in its ability to evaluate to a truthy expression).\n\ncontaining\n\nThe containing expression test checks to see whether a list variable has a value in it.\n\ncontainingall\n\nThe containingall expression test checks if a list variable contains all of the values of another list.\n\ndefined\n\nThe defined expression test checks to see whether a variable is defined within the context of the template. While you can use this expression test, writing an if statement without any operators will default to checking whether or not the variable is defined.\n\nIn the example below, a color module's color parameter is tested. If the color parameter had no value, the template would render a default black background color. If it is defined, it renders the background color set by the user.\n\ndivisibleby\n\nThe expression test divisibleby can be used to test whether an object is divisible by another number.\n\nFor example, below a for loop is created that iterates through a list of types of animals. Each type of animal gets printed in a div, and every 5th div has different inline styling applied (width:100%). This concept could be applied to a blog where different markup is rendered for a certain pattern of posts. To learn more about for loops and loop.index, check out this article.\n\nequalto\n\nThe equalto expression test checks to see if a variable's value is equal to a constant or another variable. You can also use the operator == to do the same test.\n\nIn the example below, the width of the blog posts is adjusted based on the total number of posts in the loop. The example output assumes there were 4 posts in the blog.\n\neven\n\nThe even expression test checks to see whether a numeric variable is an even number.\n\nThe example below shows a simplified blog listing loop, where if the current iteration of the loop is even, a class of even-post is assigned to the post item div. Otherwise, a class of odd-post is assigned.\n\nfloat\n\nThe float expression test checks to see whether a numeric variable is a a floating-point number.\n\ninteger\n\nChecks to see whether a variable is an integer.\n\niterable\n\nChecks to see whether a variable is iterable and can be looped through.\n\nThis example checks a variable called \"jobs\" to see if it can be iterated through. Since the variable contains a list of jobs, the if statement would evaluate to true, and the loop would run. If the variable had contained a single value, the if statement would print that value with different markup instead. Learn more about for loops.\n\nlower\n\nThe lower expression test evaluates to true when a string is lowercase.\n\nThe example below uses an unless statement and a lower filter to ensure that a string of text entered into a text module is always lowercase.\n\nmapping\n\nThe mapping expression test checks to see whether or not an object is a dict (dictionary).\n\nThe example below is checking to see if the contact object is a dictionary, in which case it is.\n\nnone\n\nThe none expression test checks to see whether a variable has a null value.\n\nnumber\n\nThe number expression test checks to see whether or not the value of a variable is a number.\n\nThe example below checks a variable to see whether or not it is a variable, and if so it converts it into millions.\n\nodd\n\nThe odd expression test checks to see whether a numeric variable is an odd number.\n\nBelow is the same example as the inverse even expression test previously described.\n\nsameas\n\nThe sameas expression test checks to see whether or not two variables have the same value.\n\nThe example below sets two variables and then checks to see whether or not they are the same.\n\nsequence\n\nThe sequence expression test is similar to the iterable test, in that it checks to see whether or not a variable is a sequence.\n\nThe example below checks whether a variable is a sequence and then iterates through that sequence of musical genres.\n\nstring\n\nThe string expression test checks to see whether the value stored in a variable is text.\n\nThe example below checks whether or not a variable is a string, and if so it applies a title filter to change the capitalization.\n\nstring_containing\n\nThis test checks to see if a string is contained within another string. This expression test is used in conjunction with the \"is\" operator.\n\nstring_startingwith\n\nThis expression test checks to see if a string starts with a particular string. It is used in conjunction with the \"is\" operator.\n\ntruthy\n\nThe truthy expression test checks to see whether an expression evaluates to True.\n\nThe example below uses a boolean checkbox module to display an alert message.\n\nundefined\n\nThe undefined expression test checks to see whether a variable is undefined in the context of the template. This test is different from none, in that undefined will be true when the variable is present but has no value; whereas, none will be true when the variable has a null value.\n\nThe example below checks a template for the existence of the variable \"my_var\".\n\nupper\n\nThe upper expression test evaluates to true when a string is all uppercase. Below is an inverse example of the lower expression test above.\n\nwithin\n\nThe within expression tests checks if a variable is within a list.\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/cms/hubl/filters",
    "content": "HubL filters\n\nFilters affect the ultimate output of your HubL. They can be applied to various HubL statements and expressions to alter the template markup outputted by the server.\n\nThe basic syntax of a filter is |filtername. The filter is added directly following the statement or the expression, within its delimiters. Some filters have additional parameters that can be added in parentheses. The basic syntax of a filter with a string, a number, and a boolean parameters is: |filtername(\"stringParameter\", 10, true). Notice that string parameters should be written in quotes. Also note that HubL filters have an alias that can be used to serve the same purpose as the primary filter.\n\nThe following article contains all of the supported HubL filters.\n\nPlease note: you can apply HubL filters to personalization tokens, such as contact and company tokens, on HubSpot CMS and blog pages, but not in emails.\n\nabs\n\nGets the absolute value of a number. You can use this filter to ensure that a number is positive.\n\nadd\n\nAdds a numeric value to another numeric value. This filter functions the same as the + operator. The parameter in parentheses is the addend that you are combining with your initial numeric value.\n\nattr\n\nRenders the attribute of a dictionary. This filter is the equivalent of printing a variable that exists within a dictionary, such as content.absolute_url.\n\nbatch\n\nGroups items within a sequence.\n\nIn the example below, there is a variable containing a sequence of types of fruits. The batch filter is applied to a loop that iterates through the sequence. The nested loop runs three times to print 3 types of fruit per row, before the outer loop runs again. Notice in the final output that since there are only 5 types of fruit, the final item is replaced by a &nbsp; (the second parameter).\n\nbetween_times\n\nCalculates the time between two datetime objects in a specified time unit.\n\nPlease note: you should use this filter only with variables that return a date. Starting September 30, 2024, this filter will no longer return the current date when a null value is passed. After that date, a null value in the filter will return September 30, 2024.\n\nbool\n\nConverts a text string value to a boolean.\n\ncapitalize\n\nCapitalizes the first letter of a variable value. The first character will be uppercase, all others letters will be lowercased. Subsequent words separated by spaces or hyphens will not have their first letter uppercased.\n\ncenter\n\nCenters text within a given field length using whitespace. This filter is not recommended or particularly useful since HubSpot's HTML compiler will automatically strip out the white space; however, it is included here for the sake of comprehensiveness.\n\nThe example below shows this filter being applied to a variable in a pre tag, so the whitespace isn't stripped out.\n\nconvert_rgb\n\nConverts a HEX value to an RGB string. This is useful if you need to convert color variables to RGB to be used with a RGBA CSS declaration. In the example below, the value set by a color module is converted to an RGB value and used in an RGBA CSS declaration.\n\ncut\n\nRemoves a string from a value. This filter can be used to match and cut out a specific part of a string. The parameter specifies the part of the string that should be removed. The example below removes the space and the word world from the original variable value.\n\ndatetimeformat (deprecated)\n\nPlease note: this filter has been deprecated. Instead, use the format_datetime filter, which has a more standardized syntax.\n\ndefault\n\nIf the value is undefined it will return the first parameter, otherwise the value of the variable will be printed. If you want to use default with variables that evaluate to false, you have to set the second parameter to true.\n\nThe first example below would print the message if the variable is not defined. The second example applies the filter to an empty string, which is not undefined, but it prints a message due to the second parameter.\n\ndictsort\n\nSort a dict and yield (key, value) pairs. Dictionaries are unsorted by default, but you can print a dictionary, sorted by key or value. The first parameter is a boolean to determine, whether or not the sorting is case sensitive. The second parameter determines whether to sort the dict by key or value. The example below prints a sorted contact dictionary, with all the known details about the contact.\n\ndifference\n\nReturns the difference of two sets or lists. The list returned from the filter contains all unique elements that are in the first list but not the second.\n\ndivide\n\nDivides the current value by a divisor. The parameter passed is the divisor. This filter is an alternative to the / operator.\n\ndivisible\n\nAn alternative to the divisibleby expression test, this filter will evaluate to true if the value is divisible by the given number.\n\nescape_html\n\nEscapes the content of an HTML input. Accepts a string and converts the characters &, <, >, ‘, ”, and escape_jinjava into HTML-safe sequences. Use this filter for HubL variables that are used in HTML but should not allow any HTML.\n\nescape_attr\n\nEscapes the content of an HTML attribute input. Accepts a string and converts the characters &, <, ‘, ”, and escape_jinjava into HTML-safe sequences. Use this filter for HubL variables that are being added to HTML attributes.\n\nNote that when escaping values of attributes that accept URLs, such as href, you should use the escape_url filter instead.\n\nescape_jinjava\n\nConverts the characters { and } in strings to Jinjava-safe sequences. Use this filter if you need to display text that might contain such characters in Jinjava.\n\nescape_js\n\nEscapes strings, including escape_jinjava, so that they can be safely inserted into a JavaScript variable declaration. Use this filter for HubL variables that are used inside HTML script elements.\n\nescape_url\n\nEscapes the content of a URL input, enforcing specified protocols, stripping invalid and dangerous characters, and encoding HTML entities. Returns empty if a URL is valid. Use this filter for HubL variables that are used within HTML attributes that should be valid URLs.\n\nescapejson\n\nEscapes strings so that they can be used as JSON values.\n\nfilesizeformat\n\nFormats a number value into a human-readable file size (i.e. 13 kB, 4.1 MB, 102 Bytes, etc). By default, decimal prefixes are used (e.g., MB and GB), but you can set the binary parameter to true to use binary prefixes such as Mebi (MiB) and Gibi (GiB).\n\nfirst\n\nReturns the first item in a sequence.\n\nfloat\n\nConverts a value into a floating point number. If the conversion doesn’t work it will return 0.0. You can override this default using the first parameter.\n\nforceescape\n\nStrictly enforces HTML escaping. In HubSpot's environment there isn't really a use case for double escaping, so this is generally behaves the same as the escape filter.\n\nformat\n\nApplies Python string formatting to an object. %s can be replaced with another variable.\n\nformat_currency (deprecated)\n\nPlease note: this filter has been deprecated. Instead, use the format_currency_value filter.\n\nformat_currency_value\n\nFormats a given number as a currency based on portal's default currency and locale passed in as a parameter. Replaces the deprecated format_currency filter.\n\nformat_date\n\nFormats the date component of a date object.\n\nPlease note: you should use this filter only with variables that return a date. Starting September 30, 2024, this filter will no longer return the current date when a null value is passed. After that date, a null value in the filter will return September 30, 2024.\n\nformat_datetime\n\nFormats both the date and time components of a date object. This filter replaces the deprecated datetimeformat filter. By default, returns a datetime in the UTC-00:00 time zone.\n\nPlease note: you should use this filter only with variables that return a date. Starting September 30, 2024, this filter will no longer return the current date when a null value is passed. After that date, a null value in the filter will return September 30, 2024.\n\nformat_time\n\nFormats the time component of a date object.\n\nPlease note: you should use this filter only with variables that return a date. Starting September 30, 2024, this filter will no longer return the current date when a null value is passed. After that date, a null value in the filter will return September 30, 2024.\n\nfromjson\n\nConverts a JSON string to an object.\n\ngeo_distance\n\nCalculates the ellipsoidal 2D distance between two points on Earth.\n\ngroupby\n\nGroups a sequence of objects by a common attribute. The parameter sets the common attribute to group by.\n\nindent\n\nIndents text within a given field length using whitespace. This filter is not recommended or particularly useful because HubSpot's HTML compiler will automatically strip out the white space. However, it is included here for the sake of comprehensiveness. The example below shows an indent filter being applied to a variable in a <pre> tag, so the whitespace isn't stripped out. The first parameter controls the amount of whitespace and the second boolean toggles whether to indent the first line.\n\nint\n\nConverts the value into an integer. If the conversion doesn’t work it will return 0. You can override this default using the first parameter.\n\nintersect\n\nReturns the intersection of two sets or lists. The list returned from the filter contains all unique elements that are contained in both lists.\n\nipaddr\n\nEvaluates to true if the value is a valid IPv4 or IPv6 address.\n\njoin\n\nReturns a string which is the concatenation of the strings in the sequence. The separator between elements is an empty string per default, you can define it with the optional parameter. The second parameter can be used to specify an attribute to join.\n\nlast\n\nReturns the last item of a sequence.\n\nlength\n\nReturns the number of items of a sequence or mapping.\n\nlist\n\nConverts values into a list. Strings will be returned as separate characters unless contained in square bracket sequence delimiters [ ].\n\nlog\n\nCalculates the natural logarithm of a number.\n\nlower\n\nConverts all letters in a value to lowercase.\n\nmap\n\nApplies a filter on a sequence of objects or looks up an attribute. This is useful when dealing with a list of objects where you're only interested in a certain value of it.\n\nThe basic usage is mapping on an attribute. For example, if you want to use conditional logic to check if a value is present in a particular attribute of a dict. Alternatively, you can let it invoke a filter by passing the name of the filter and the arguments afterwards.\n\nmd5\n\nCalculates the md5 hash of the given object.\n\nminus_time\n\nSubtracts an amount of time from a datetime object.\n\nmultiply\n\nMultiplies a value with a number. Functions the same as the * operator.\n\nplus_time\n\nAdds an amount of time to a datetime object.\n\npprint\n\nPretty print a variable. This prints the type of variable and other info that is useful for debugging.\n\nrandom\n\nReturn a random item from the sequence.\n\nPlease note: when using this filter, the page will be prerendered periodically rather than every time the page content is updated. This means that the filtered content will not be updated on every page reload.\n\nThis may not be an issue for certain types of content, such as displaying a random list of blog posts. However, if you need content to change randomly on every page load, you should instead use JavaScript to randomize the content client-side.\n\nregex_replace\n\nSearches for a regex pattern and replaces with a sequence of characters. The first argument is a RE2-style regex pattern, the second is the replacement string.\n\nLearn more about RE2 regex syntax.\n\nreject\n\nFilters a sequence of objects by applying an expression test to the object and rejecting the ones with the test succeeding.\n\nrejectattr\n\nFilters a sequence of objects by applying a test to an attribute of an object and rejecting the ones with the test succeeding.\n\nrender\n\nRenders strings containing HubL early so that the output can be passed into other filters.\n\nreplace\n\nReplaces all instances of a substring with a new one.\n\nreverse\n\nReverses the object or return an iterator the iterates over it the other way round. To reverse a list use .reverse()\n\nroot\n\nCalculates the square root of a value.\n\nround\n\nRounds a number to a given precision.\n\nsafe\n\nMark a value as safe which means that in an environment with automatic escaping enabled this variable will not be escaped.\n\nsanitize_html\n\nSanitizes the content of an HTML input for the output of rich text content. Accepts a string, then strips HTML tags that are not allowed. Use this filter for HubL variables that are used in HTML that should allow safe HTML.\n\nYou can include the following parameters to allow specific types of HTML tags: FORMATTING, BLOCKS, STYLES, LINKS, TABLES, IMAGES. For example, sanitize_html(IMAGES).\n\nUsing sanitize_html will include all parameters in the filter.\n\nYou can also include a STRIP parameter to strip all HTML. All content is run through escape_jinjava as well to prevent nested interpretation.\n\nselect\n\nFilters a sequence of objects by applying a test to the objects and only selecting the ones with the test succeeding.\n\nselectattr\n\nFilters a sequence of objects by applying a test to an attribute of the objects and only selecting the ones with the test succeeding.\n\n| Parameter | Description |\n| --- | --- | --- |\n| attribute_nameRequired | The attribute to test for. You can access nested attributes using dot notation. |\n| exp_test | The name of the expression test to apply to the object. |  |\n| val | Value to test against. |\n\nshuffle\n\nRandomizes the order of iteration through a sequence. The example below shuffles a standard blog loop.\n\nPlease note: when using this filter, the page will be prerendered periodically rather than every time the page content is updated. This means that the filtered content will not be updated on every page reload.\n\nThis may not be an issue for certain types of content, such as displaying a random list of blog posts. However, if you need content to change randomly on every page load, you should instead use JavaScript to randomize the content client-side.\n\nslice\n\nSlices an iterator and returns a list of lists containing those items. The first parameter specifies how many items will be sliced, and the second parameter specifies characters to fill in empty slices.\n\nsort\n\nSorts an iterable. This filter requires all parameters to sort by an attribute in HubSpot. The first parameter is a boolean to reverse the sort order. The second parameter determines whether or not the sorting is case sensitive. And the final parameter specifies an attribute to sort by. In the example below, posts from a blog are rendered and alphabetized by name.\n\nsplit\n\nSplits the input string into a list on the given separator. The first parameter specifies the separator to split the variable by. The second parameter determines how many times the variable should be split. Any remaining items would remained group. In the example below, a string of names is split at the ; for the first 4 names.\n\nstring\n\nConverts a different variable type to a string. In the example below, a integer is converted into a string (pprint is used to confirm the change in variable type).\n\nstriptags\n\nStrips SGML/XML tags and replace adjacent whitespace by one space. This filter can be used to remove any HTML tags from a variable.\n\nstrtodate\n\nConverts a date string and date format to a date object.\n\nstrtotime\n\nConverts a datetime string and a datetime format into a datetime object.\n\nsum\n\nAdds numeric values in a sequence. The first parameter can specify an optional attribute and the second parameter sets a value to return if there is nothing in the variable to sum.\n\nsymmetric_difference\n\nReturns the symmetric difference of two sets or lists. The list returned from the filter contains all unique elements that are in the first list but not the second, or are in the second list but not the first.\n\ntitle\n\nReturns a title case version of the value (i.e., words will start with uppercase letters but all remaining characters are lowercase).\n\ntojson\n\nWrites an object as a JSON string.\n\ntrim\n\nStrips leading and trailing whitespace. HubSpot already trims whitespace from markup, but this filter is documented for the sake of comprehensiveness.\n\ntruncate\n\nCuts off text after a certain number of characters. The default is 255.\n\nNote that HTML characters are included in this count. The length is specified with the first parameter which defaults to 255. If the second parameter is true, the filter will cut the text at length. Otherwise it will discard the last word. If the text was in fact truncated it will append an ellipsis sign (\"...\"). If you want a different ellipsis sign than \"...\" you can specify it using the third parameter.\n\ntruncatehtml\n\nTruncates a given string, respecting HTML markup (i.e. will properly close all nested tags). This will prevent a tag from remaining open after truncation. HTML characters do not count towards the character total.\n\nThis filter has a length parameter and a truncation symbol parameter. There is a third boolean parameter that specifies whether words will be broken at length. This parameter is false by default in order to preserve the length of words. If using only one of the optional parameters, use keyword arguments, such as truncatehtml(70, breakwords = false).\n\nunescape_html\n\nConverts text with HTML-encoded entities to their Unicode equivalents.\n\nunion\n\nReturns the union of two sets or lists. The list returned from the filter contains all unique elements that are in either list.\n\nunique\n\nExtracts a unique set from a sequence or dict of objects. When filtering a dict, such as a list of posts returned by a function, you can specify which attribute is used to deduplicate items in the dict.\n\nunixtimestamp\n\nConverts a datetime object into a Unix timestamp.\n\nPlease note: you should use this filter only with variables that return a date. Starting September 30, 2024, this filter will no longer return the current date when a null value is passed. After that date, a null value in the filter will return September 30, 2024.\n\nupper\n\nConverts all letters in a value to uppercase.\n\nurlencode\n\nEscapes and URL encodes a string using UTF-8 formatting. Accepts both dictionaries and regular strings as well as pairwise iterables.\n\nurldecode\n\nDecodes encoded URL strings back to the original URL. Accepts both dictionaries and regular strings as well as pairwise iterables.\n\nurlize\n\nConverts URLs in plain text into clickable links. If you pass the filter an additional integer it will shorten the urls to that number. The second parameter is a boolean that dictates whether the link is rel=\"no follow\". The final parameter lets you specify whether the link will open in a new tab.\n\nwordcount\n\nCounts the number of words in a string.\n\nIf the string contains HTML, use the striptags filter to get an accurate count.\n\nwordwrap\n\nCauses words to wrap at a given character count. This works best in a <pre> because HubSpot strips whitespace by default.\n\nxmlattr\n\nCreates an HTML/XML attribute string, based on the items in a dict. All values that are neither none nor undefined are automatically escaped. It automatically prepends a space in front of the item if the filter returned something unless the first parameter is false.\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/cms/hubl/functions",
    "content": "HubL functions\n\nFunctions in HubL are similar to filters in that they accept parameters and generate a value. However, not all functions need to be applied to an initial template value, and instead they interact with other areas of your HubSpot environment.\n\nIf you maintain an older website, you may also want to check out the list of deprecated HubL functions.\n\nBelow, learn more about each HubL function and its syntax.\n\nappend\n\nAdds a single item to the end of a list.\n\nblog_all_posts_url\n\nThe blog_all_posts_url function returns a full URL to the listing page for all blog posts for the specified blog.\n\nThe example below shows how this function can be used as an anchor's href.\n\nblog_author_url\n\nThe blog_author_url function returns a full URL to the specified blog author's listing page.\n\nThe example below shows how this function can be used as an anchor's href. This can be combined with blog_authors as shown in that function's examples.\n\nblog_authors\n\nThe blog_authors function returns a sequence of blog author objects for the specified blog, sorted by slug ascending. This sequence can be stored in a variable and iterated through to create custom author post filters.\n\nThe number of live posts by each author can be accessed with author.live_posts.\n\nPlease note: this function has a limit of 250 authors. This function also has a limit of 10 calls per page.\n\nThe first line of the example below shows how the function returns a sequence of author objects. The rest of the example shows a use case of saving a sequence into a variable and then iterating though the author objects, printing a set of author listing links. The example assumes that the blog has 4 authors.\n\nblog_by_id\n\nThe blog_by_id function returns a blog by ID. The below example code shows this function in use to generate a hyperlinked list item.\n\nPlease note: this function has a limit of 10 calls per page.\n\nblog_page_link\n\nThe blog_page_link function generates the URL of a paginated view of your blog listing. The function takes a numeric parameter, which allows you to generate links for current, next, previous, or a specific page. This function is generally used in the href attribute of pagination anchor tags and must be used on your blog listing template.\n\nThe examples below show this function in use as an anchor href. The first example outputs the current page. The second example takes the number 7 parameter to specify the seventh page. The third example uses the next_page_num variable to generate a link that is relative to the current page number (you can also use the last_page_num variable for the previous page). The final example uses the current_page_num variable and a + operator to create a link that is 4 greater than the current page.\n\nblog_popular_posts\n\nThis function renders a set number of popular posts into a sequence. The sequence can then be saved into a variable and iterated through with a for loop, creating a custom post listing of your most popular posts.\n\nResults from this function are cached for six hours. To retrieve blog posts using HubL in a way that avoids caching, you may want to use blog_recent_tag_posts instead.\n\nIn the example code below, the first line shows how the function returns a sequence. The sequence is saved as a variable which is then used in a for loop. Any blog post variables should use the name of the individual loop item rather than content.. In the example, pop_post.name is used. This technique can be used on blog templates and website pages.\n\nPlease note: this function has a limit of 200 posts. This function also has a limit of 10 calls per page.\n\nblog_post_archive_url\n\nThe blog_post_archive_url function returns a full URL to the archive listing page for the given date values on the specified blog. This function has two required parameters and two optional parameters. The first parameter is a blog ID or simply the keyword \"default\". The second is the year of archived posts you'd like to display.\n\nThe optional parameters include the month and day of archived posts you'd like to display, respectively.\n\nThe example below shows how this function can be used as an anchor's href.\n\nblog_recent_author_posts\n\nThe blog_recent_author_posts function returns a sequence of blog post objects for the specified author, sorted by most recent. This sequence of posts can be saved into a variable and iterated through with a for loop, creating a custom post listing of posts by a particular author.\n\nThe function takes three parameters. The first parameter specifies which blog to collect posts by an author from. The value should be \"default\" or the blog ID of a particular blog (available in the URL of the Blog dashboard). The second parameter specifies which author to use. This parameter can use the content.blog_post_author.slug to use the author of the current post or accepts a lowercase hyphenated name such as \"brian-halligan\". The third parameter specifies how many posts are retrieved.\n\nThe first line of the example below demonstrates how the function returns a sequence of posts by an author. In this example, rather than specifying an exact author name, the current post author is used. The sequence is saved in a variable and looped through. Any blog post variables should use the name of the individual loop item rather than content.. In the example, author_post.name is used. This technique can be used on blog and page templates.\n\nPlease note: this function has a limit of 200 posts and 10 calls per page.\n\nblog_recent_posts\n\nThe blog_recent_posts function returns a sequence of blog post objects for the specified blog, sorted by most recent first. This sequence of posts can be saved into a variable and iterated through with a for loop, creating a custom post listing of your most popular posts.\n\nThe function takes two parameters. The first parameter specifies which blog to collect popular posts from. The value should be \"default\" or the blog ID of a particular blog (available in the URL of the Blog dashboard). The second parameter specifies how many posts are retrieved.\n\nThe first line of the example below demonstrates how the function returns a sequence. The sequence is saved in a variable and looped through. Any blog post variables should use the name of the individual loop item rather than content.. In the example, rec_post.name is used. This technique can be used, not only on blog templates, but also regular pages.\n\nPlease note: this function has a limit of 200 posts and 10 calls per page.\n\nblog_recent_tag_posts\n\nThe blog_recent_tag_posts function returns a sequence of blog post objects for a specified tag or tags, sorted by most recent first. This sequence of posts can be saved into a variable and iterated through with a for loop, creating a custom post listing of posts by a particular tag or tags.\n\nIn the example code below:\n\nLearn more about creating a related blog post listing.\n\nPlease note: this function has a limit of 100 posts and 10 calls per page.\n\nblog_tag_url\n\nThe blog_tag_url function returns a full URL to the specified blog tag's listing page.\n\nThis function accepts two parameters. The first parameter specifies which blog the tag's listing page exists in. The second parameter specifies which tag to link. This parameter can use the topic.slug for a particular tag from content.topic_list or accepts a lowercase hyphenated name such as \"marketing-tips\".\n\nThe example below shows how this function can be used as an anchor's href.\n\nblog_tags\n\nThe blog_tags function returns a sequence of the 250 most blogged-about tags (based on number of associated blog posts) for the specified blog, sorted by blog post count.This sequence can be stored in a variable and iterated through to create custom tag post filters. The number of posts for each tag can be accessed with tag.live_posts.\n\nThis function accepts two parameters. The first parameter specifies which blog to fetch tags from. The second parameter sets a limit on the number of tags fetched.\n\nThe first line of the example below demonstrates how the function returns a sequence of tag objects. The rest of the example demonstrates a use case of saving a sequence into a variable and then iterating though the tag objects, printing a set of tag links. The example assumes that the blog has 4 tags.\n\nPlease note: this function has a limit of 250 tags.\n\nblog_total_post_count\n\nThis function returns the total number of published posts in the specified blog. If no parameter is specified, it will count your default blog posts. Alternatively, you can specify \"default\" or a blog ID of a different blog to count. The blog ID is available in the URL of your blog dashboard for a particular blog.\n\nPlease note: this function has a limit of 10 calls per page.\n\nclear\n\nRemoves all items from a list. Unlike pop(), it does not return anything.\n\ncolor_contrast\n\nThis function validates color contrast based on WCAG standards. You'll need to include two colors as arguments, and you can include an optional argument to specify the rating (AA or AAA). Returns true or false based on whether the colors meet/exceed the standard.\n\ncolor_variant\n\nThis function lightens or darkens a hex value or color variable by a set amount. The first parameter is the hex color (for example (\"#FFDDFF\") or a variable storing a hex value. The second parameter is the amount to adjust it by, from 0 to 255. This function can be used in CSS files to create a color variation. Another good use case is to use it with a color parameter of a color module, to allow users to specify a primary color that automatically generates a color variation.\n\nIn the example below, the hex color #3A539B is stored in a variable called base_color. The color is modified by -80 resulting in a darker blue (#00034B).\n\ncontent_by_id\n\nThe content_by_id function returns a landing page, website page or blog post by ID. The only parameter accepted by this function is a numeric content ID.\n\nThe below example code shows this function in use to generate a hyperlinked list item.\n\nPlease note: this function has a limit of 10 calls per page.\n\ncontent_by_ids\n\nGiven a list of content IDs, returns a dict of landing page, website page or blog posts matching those IDs.\n\nThis function takes one parameter, a list of page or blog post IDs to look up, placed within an array. Up to 100 content objects can be passed. The below example code shows this function in use to generate a list of hyperlinked list items.\n\nPlease note: this function has a limit of 10 calls per page.\n\ncopy\n\nReturn a shallow copy of the list. Equivalent to a[:].\n\nA shallow copy constructs a new compound object and then (to the extent possible) inserts references into it to the objects found in the original.\n\ncount\n\nReturns the number of times a variable exists in a list.\n\ncrm_associations\n\nGets a list of CRM records associated with another record by its record ID, association category, and association definition ID.\n\nThis function returns an object with the following attributes: has_more, total, offset and results.\n\nPlease note: for security purposes, of the HubSpot standard object types only the product, and marketing_event objects can be retrieved on a publicly accessible page. Any other standard object type must be hosted on a page which is either password protected or requires a CMS Membership login. Custom objects do not have this same restriction.\n\nPlease note: this function can be called a maximum of 10 times per page. Each crm_associations call can return at most 100 objects. The default limit is 10 objects.\n\ncrm_object\n\nGets a single CRM record by query or by its ID. Records are returned as a dict of properties and values.\n\nThis function can also be used with custom and integrator objects.\n\nPlease note: for security purposes, of the HubSpot standard object types only the product, and marketing_event objects can be retrieved on a publicly accessible page. Any other standard object type must be hosted on a page which is either password protected or requires a CMS Membership login. Custom objects do not have this same restriction.\n\nWhat is the difference between in and contains?\n\nin returns if the property value matches with any of the given values. Whereas contains returns if the property values for multi-select has all of the given values.\n\nPlease note: this function can only be called a maximum of 10 times on a single page.\n\nPlease note: when building a query, the values of range, distinct, ndistinct, and startswith are reserved keywords. To query a property that uses one of those names, you'll need to use the following format: range__eq= (rather than range=).\n\ncrm_objects\n\nGets a list of records for a specific object type from the HubSpot CRM.\n\nThis function returns an object with the following attributes: has_more, total, offset and results.\n\nResults can be sorted using at least one order parameter in the query. For example, crm_objects(\"contact\", \"firstname=Bob&order=lastname&order=createdate\") will order contacts with the first name \"Bob\" by last name and then by createdate. To reverse a sort, prepend - to the property name like order=-createdate. The CRM objects function can also be used with custom and integrator objects.\n\nPlease note: for security purposes, of the HubSpot standard object types only the product, and marketing_event objects can be retrieved on a publicly accessible page. Any other standard object type must be hosted on a page which is either password protected or requires a CMS Membership login. Custom objects do not have this same restriction.\n\nPlease note: this function can be called a maximum of 10 times per page. Each crm_objects call can return at most 100 objects. The default limit is 10 objects.\n\nPlease note: when building a query, the values of range, distinct, ndistinct, and startswith are reserved keywords. To query a property that uses one of those names, you'll need to use the following format: range__eq= (rather than range=).\n\ncrm_property_definition\n\nGet the property definition for a given object type and property name.\n\nSupported object types are HubSpot standard objects (e.g., contacts), portal specific objects, and integrator objects.\n\ncrm_property_definitions\n\nGet the property definitions for a given object type and set of property names.\n\nSupported object types are HubSpot standard objects (e.g. contacts), portal specific objects, and integrator objects.\n\ncta\n\nBecause CTA modules have so many parameters that contain variations of their code, you can use the CTA function to easily generate a particular CTA in a template, page, or email. This function is what the rich text editor uses when you add a CTA via the editor.\n\nPlease note: This function has a limit of 10 calls per page.\n\nextend\n\nExtend a list by appending all items from an iterable. In other words, insert all list items from one list into another list.\n\nfile_by_id\n\nThis function returns the metadata of a file by ID. It accepts a single parameter, the numeric ID of the file to look up. To retrieve multiple files at once, use the files_by_ids function instead.\n\nPlease note: this function is limited to 10 calls per page.\n\nfiles_by_ids\n\nReturns the metadata of multiple files by ID. It accepts an array of file IDs.\n\nPlease note: this function limited to 10 calls per page, and can accept up to 100 file IDs.\n\nFor example, you can use this function, to loop through a contact's uploaded files. To loop through results, you'll need to use the split HubL filter, as the CRM property will be returned as a semicolon-separated string.\n\nflag_content_for_access_check\n\nWhen a blog post is configured for self-registration access, visitors will need to register or log in to view the full post content. HubSpot's default blog listing assets automatically include this functionality, and will also include a lock icon indicator for posts that require self-registration to access. Learn more about building custom solutions using this function and its corresponding API.\n\nThis function checks whether a blog post can be accessed by the current visitor. When called, the function is replaced with the following attribute:\n\nhs-member-content-access=<true/false>\n\nA value of true indicates that the blog post requires the visitor to log in to view the full content.\n\nfollow_me_links\n\nReturns the social media account links set in account settings. Used in the default follow_me module.\n\nformat_address\n\nFormats an address based on the context's locale.\n\nformat_company_name\n\nFormats a company's name by adding Japanese honorifics where appropriate.\n\nformat_name\n\nFormats a person's name by putting the surname before the first name and adds Japanese honorifics where appropriate\n\nformat_datetime\n\nFormats both the date and time components of a date object, similar to the format_datetime HubL filter. This function replaces the deprecated datetimeformat function.\n\ngeo_distance\n\nThis function contains 4 parameters and calculates the ellipsoidal 2D distance between two points on Earth. Use this function as a filter query for getting HubDB data.\n\nget_asset_url\n\nThis function returns the public URL of a specified template or code file. The parameter of this function is the asset's path in the design manager. Coded file URLs update each time you publish them; therefore, by using this function your ensure you are always using the latest version of the file.\n\nYou can automatically generate this function in the app, by either right-clicking a file and selecting Copy public URL, or by clicking Actions, then selecting Copy public URL.\n\nThe example below gets the URL of a Javascript file authored in Design Manager that can be included as the src of a <script> tag.\n\nget_public_template_url_by_id\n\nThis function works just like get_public_template_url, returning public URL of a specified template or code file. The only difference is the parameter of this function is the template ID (available in the URL of the template or coded file), instead of the design manager path.\n\nhubdb_table\n\nHubDB is a feature available in Content Hub Professional and Enterprise.\n\nThe hubdb_table function can be used to get information on a table including its name, columns, last updated, etc.\n\nThe following pieces of information can be pulled by calling the appropriate attributes:\n\nPlease note: this function has a limit of 10 calls per page.\n\nhubdb_table_column\n\nHubDB is a feature available in Content Hub Professional and Enterprise.\n\nThe hubdb_table_column function can be used to get information on a column in table such as its label, type and options. This function accepts two parameters.\n\nThese pieces of information about the column can be pulled by calling the appropriate attributes:\n\nIn addition to the above attributes, there is also a method which can be called: getOptionByName(\"&lt;option name&gt;\") whereby for columns of type \"select\", this will get option information by the option's name.\n\nColumn names are not case sensitive. For example, HS_ID and hs_id are both valid.\n\nhubdb_table_row\n\nHubDB is a feature available in Content Hub Professional and Enterprise.\n\nThe hubdb_table_row function can be used to pull a single row from a HubDB table. From this row, you can pull information from each table cell by calling on the corresponding attribute:\n\nColumn names are not case sensitive. For example, HS_ID and hs_id are both valid.\n\nPlease note: this function has a limit of 10 calls per page.\n\nhubdb_table_rows\n\nHubDB is a feature available in Content Hub Professional and Enterprise.\n\nThe hubdb_table_rows function can be used to list rows of a HubDB table, to be iterated through. A single call of hubdb_table_rows() is limited to 10 table scans per page.\n\nBy default, this function will return a maximum of 1,000 rows. To retrieve more rows, specify a limit in the query, as shown in the code below.\n\nPlease note: if you use a random filter on this function, the page will be prerendered periodically. This means that the filtered content will not be updated on every page reload.\n\nPlease note: when building a query, the values of range, distinct, ndistinct, and startswith are reserved keywords. To query a property that uses one of those names, you'll need to use the following format: range__eq= (rather than range=).\n\ninclude_default_custom_css\n\nThis function generates a link tag that references the Primary CSS file (default_custom_style.min.css). This file is designed to be a global CSS file that can be added to all templates. To render, the function requires a boolean parameter value of True.\n\nindex\n\nReturns the location of the first matching item in a 0-based array.\n\nThis function accepts 3 parameters, The first parameter is required. The first parameter is the item you are trying to find in the array. The second (start) and third (end) enable you to find that item in a slice of the array.\n\ninsert\n\nPlaces an element into a list at the specific index provided.\n\nThis function accepts two parameters:\n\nlocale_name\n\nReturns a human-readable string representation of a language code, optionally translated to a target language.\n\nload_translations\n\nLoads translations from a given _locales folder path and returns a map of the values.\n\nLearn more about including field translations in custom modules and themes.\n\nmenu\n\nReturns the nested link structure of an advanced menu. Menu nodes have a variety of properties that can be used on objects that are returned. If you pass null to the menu function it will return an empty pylist. You can also specify a menu by name. In most cases it's safer to use the menu id, as a menu being renamed won't affect the id. If building for the marketplace it makes sense to default to \"default\" if menu is null.\n\nPlease note: this function has a limit of 10 calls per page.\n\nWhen using the menu() function to generate a menu, you are fully responsible for making sure your menu is accessible.\n\nmodule_asset_url\n\nGets the URL for an asset attached to a custom module via Linked Files > Other Files.\n\nnamespace\n\nCreates a namespace object that can hold arbitrary attributes. It can be initialized from a dictionary or with keyword arguments.\n\noembed\n\nReturns OEmbed data dictionary for given request. Only works in emails.\n\npersonalization_token\n\nReturns the value of a contact or contact related property, or a default.\n\npop\n\nRemoves the item at the index from the list. Also returns the removed item if printed.\n\npostal_location\n\nThe postal_location function returns the latitude/longitude location pair for a given postal code and country code (limited to US, CA, and GB).\n\nPlease note: this function has a limit of 10 calls per page.\n\nput\n\nSimilar to the update function, which updates a dict with the elements from another dict object or from an iterable of key-value pairs, except that put supports variable names in dicts.\n\nrange\n\nReturns a list containing an arithmetic progression of integers. With one parameter, range will return a list from 0 up to (but not including) the value. With two parameters, the range will start at the first value and increment by 1 up to (but not including) the second value. The third parameter specifies the step increment. All values can be negative. Impossible ranges will return an empty list. Ranges can generate a maximum of 1000 values.\n\nRange can be used within a for loop to specify the number of iterations that should run.\n\nrequire_css\n\nThis function enqueues a CSS file to be rendered in the head element. All CSS link tags are grouped together and render before any JavaScript tags. The HubL is replaced with an empty line and then a link tag is added to {{ standard_header_includes }}. This method requires an absolute URL; CMS content with a known relative URL can be required by using the get_asset_url() function.\n\nTo enqueue an inline style to be rendered in the head via a style tag element, use the {% require_css %} and {% end_require_css %} tag instead with your style tags and CSS inside of that.\n\nThe second parameter is a dictionary of options to modify generated tag. Supports async (true/false) a technique described on web.dev and any other key-value pair will be added as HTML attributes to the style tag.\n\nrequire_js\n\nSpecifies whether a script should be enqueued to render in the head or footer (default). Specify the render location by including the head or footer parameter. The HubL will be replaced by an empty line, and included in either the header or footer includes.\n\nTo enqueue an inline script to be rendered in the footer via a script element, wrap your <script> tags with {% require_js %} and {% end_require_js %}.\n\nYou can also include additional render options in this function. These will be added as HTML attributes in the script tag. Render options include:\n\nresize_image_url\n\nRewrites the URL of image stored in File Manager to a URL that will resize the image on request. The function accepts one required parameter, and five optional parameters. At least one optional parameter must be passed.\n\nRequired\n\nOptional\n\nPlease note: images that are larger than 4096 pixels in height or width will not be automatically resized. Instead, you'll need to manually resize the image.\n\nreverse\n\nReverses the order of items in a list. Doesn't take any parameters. To reverse an object or return an iterator to iterate over the list in reverse, use |reverse\n\nset_response_code\n\nSet the response code as the specified code. 404 is the only supported code for now. When using this, your page will return a 404 error.\n\nsuper\n\nThis function prints content from the parent template into a child template using the extends tag.\n\nFor example, in the code below, a basic HTML template has been created with a HubL block named sidebar and saved as parent.html. A second template file is created that will extend that parent file. Normally, the <h3> would be printed in the parent HTML's sidebar block. But by using super, content from the parent template sidebar block is combined with the content from the child template.\n\ntoday\n\nReturns the start of today (12:00am). Optionally you can add a parameter to change the timezone from the default UTC.\n\nto_local_time\n\nConverts a UNIX timestamp to the local time, based on your HubSpot Report Settings. You can then apply a datetimeformat filter to format the date.\n\ntopic_cluster_by_content_id\n\nReturns a HubL dict representing the topic cluster associated with a piece of content (determined by the passed content id), including metadata about the associated pillar page, core topic, and subtopics. Can be used to \"auto-link\" a piece of content with its associated pillar page [if it exists].\n\nAvailable metadata can be found in: attachableContent (the current content's metadata), topic (the current content's associated topic metadata), coreTopic (the associated cluster's core topic metadata), and pillarPage (the associated pillar page's metadata).\n\nUse {{ topicCluster|pprint }} to see a full a display of available properties/attributes.\n\nPlease note: this function has a limit of 10 calls per page.\n\ntruncate\n\nThe truncate function works just like the truncate filter, but uses function syntax instead of filter syntax. The first parameter specifies the string. The second parameter specifies the length at which to truncate. The final parameter specifies the characters to add when the truncation occurs.\n\nPlease note: because this function relies on the spaces between words to shorten strings, it may not work as expected for languages without spaces between characters, such as Japanese.\n\ntype\n\nThis function accepts one argument and returns the type of an object. The return value is one of: \"bool\", \"datetime\", \"dict\", \"float\", \"int\", \"list\", \"long\", \"null\", \"str\" or \"tuple\".\n\nunixtimestamp\n\nThis function returns a unix timestamp when you supply a datetime object.\n\nupdate\n\nUpdates the dict with the elements from another dict object or from an iterable of key-value pairs. Use this function to combine or merge objects.\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/cms/hubl/loops",
    "content": "For loops\n\nFor loops can be used in HubL to iterate through sequences of objects. They will most commonly be used with rendering blog content in a listing format, but they can also be used to sort through other sequence variables.\n\nFor loops begin with a {% for %} statement and end with an {% endfor %} statement. Within the {% for %} statement a single sequence item is named followed by in and then the name of the sequence. The code between the opening and closing for statements is printed with each iteration, and generally includes the printed variable of the individual sequence item. Below is the basic syntax of a for loop:\n\nBelow is a basic example that shows how to print a sequence of variable values into a list.\n\nLoop properties\n\nAs a loop iterates, you can use conditional logic to define the loop's behavior. The variable property loop.index keeps a count of the current number of the iterations of the loop. There are several other loop variable properties that count the iterations in different ways. These properties are described below:\n\nBelow are some examples that use different loop variables. The following basic example uses loop.index to keep a count that is printed with each iteration.\n\nThe next example uses conditional logic to check whether the length of the loop is divisibleby certain numbers. It then renders the width of the post-item div accordingly. The example uses the standard blog post loop and assumes that there are 6 posts in the loop.\n\nNested loops\n\nLoops can also be nested with loops. The child for loop will run with each iteration of the parent for loop. In the example below, a list of child items is printed in a nested <ul> within a <ul> of parent items.\n\ncycle\n\nThe cycle tag can be used within a for loop to cycle through a series of string values and print them with each iteration. One of the most practical applications to this technique is applying alternating classes to your blog posts in a listing. This tag can be used on more than two values and will repeat the cycle if there are more loop iterations than cycle values. In the example below, a class of odd and even are applied to posts in a listing (the example assumes that there are 5 posts in the loop).\n\nPlease note that there are no spaces between the comma-separated cycle string values.\n\nVariables within loops\n\nAny variables defined within loops are limited to the scope of that loop and cannot be called from outside of the loop.\n\nYou can call variables that are defined outside of a loop, from within a loop, but not the other way around.\n\nKey, value pairs in loops\n\nIf the dict of information you are looping through has key and value pairs, a simple for loop would only have access to the values. If you wish to have access to both the keys and values within the for loop, the HubL would be formatted as such:\n\nIterate a set number of times\n\nSometimes you want to iterate a set number of times, this can be useful in generating HTML or CSS. You can do this using the range function.\n\nUsing HubL tags in loops\n\nWhen you add a tag to page HubSpot automatically assigns an id to the wrapping HTML. That tag is unique per tag \"name\". In situations where you need to use a tag in a for loop setting unique names is not practical. Add the unique_in_loop parameter to your tag to generate unique ids. This parameter appends the module name with the current loop iteration number, ensuring that it is unique. Unique id's are not only needed for valid HTML but are important for accessibility.\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/cms/hubl/tags/standard-tags",
    "content": "HubL standard tags\n\nThis page is a comprehensive reference guide of the syntax and the available parameters for all standard HubL tags, including tags for system pages, such as the email subscription page. Each tag below contains a sample of the basic syntax, as well as an example with parameters and code output.\n\nIf you're building drag and drop areas, learn more about drag and drop area tags. If you maintain an older website, you may also want to check out the list of deprecated HubL tags.\n\nMost of the tags in this page have default module equivalents. Modules can be used within dnd_areas and flexible columns, making them more powerful and user friendly than the tags you see here.\n\nBlog comments\n\nA blog comments tag renders the comments embed code on a blog template. This Javascript embed code loads the comments form and comments, based upon your configuration in your website settings.\n\nBlog content\n\nWhile drag and drop layouts include a blog content module, these modules are not created with a single tag. They instead use conditional logic to define how a blog post and a blog listing should render. You can learn more about coding blog templates here.\n\nBlog post filter\n\nCreates a linked listing of posts by topic, posts by month, or posts by author.\n\nPlease note: this module can only be used in blog post templates.\n\nBlog post Listing\n\nAdds a listing of most popular or top posts.\n\nPlease note: this tag can only be used in blog post templates. The tag's content is loaded asynchronously on the client-side. As a result, if you want to manipulate the feed after it's loaded, you'll need to define a global JS function to handle that manipulation. Use the function hsPostListingComplete(feeds), where feeds is the jQuery selector on all feeds that have been completed. You will want to directly manipulate the DOM object in that function.\n\nBlog related posts\n\nAdds a listing of blog posts based off of a set of parameters shared by posts across blogs. Posts are selected based off of their relevance to the set parameters.\n\nThis tag does not generate a page/post-level editable module, it is entirely configured with HubL.\n\nWe strongly recommend using the callback parameter instead of post_formatter to improve page loading speed.\n\nExamples\n\nThe following example generates a listing of posts written by one of the three specified blog_authors across two different blogs:\n\nThe following example generates a listing of 10 posts related to a specific blog post, with the blog tag \"sales enablement,\" and restricted to a specific publish date time frame. This example specifies the blog_post_ids parameter, so it would be used on a page:\n\nThe following example generates a listing of five posts using the callback parameter to control the HTML output of the post listing:\n\nBlog social sharing\n\nBlog social sharing renders share counters on your blog posts (if enabled in Content Settings).\n\nBlog subscription\n\nA blog subscription tag renders the blog subscriber form for a particular blog. This form is automatically created whenever a blog is created in Content Settings, and there is always one subscription form per blog. Please note that the subscribe form's fields are configured within the Forms editor UI.\n\nBoolean\n\nA boolean tag creates a checkbox in the UI that prints \"true\" or \"false.\" In addition to printing the value, this module is useful for defining conditional template logic, when combined with the parameter export_to_template_context.\n\nChoice\n\nA choice tag creates a dropdown in the content editor UI that prints the value selected by the user. Choice tags are great for giving your users a preset set of options, such as printing the type of page as a page header.\n\nIn addition to printing the choice value, this tag is useful for defining conditional template logic, when combined with the parameter export_to_template_context.\n\nColor\n\nThe color tag generates a color picker in the page editor UI that prints a HEX color value to a template. Please note that this module can only be used in templates, not CSS files. If using this tag in a <style> or inline CSS, you will want to use the no_wrapper=True parameter to remove the wrapper <span> wrapper.\n\nCTA\n\nA Call to Action or CTA tag allows users to add a HubSpot Call to Action button to a predefined area of a page.\n\n*While these parameters are included here for the sake of being comprehensive, the code generated by HubSpot to populate them is very specific. If you need a default CTA selected, rather than trying to develop the CTA parameters from scratch, it is recommended that set up the CTA on a template layout, and then clone to file. You can then copy the HubL CTA module of the CTA with all parameters set correctly for you.\n\nThere is also a CTA function that generates a CTA from the ID.\n\nCustom HTML\n\nA custom HTML module allows users to enter raw HTML into the content editor. If you need to add extensive default HTML to the tag, you may want to use block syntax.\n\nCustom modules\n\nCustom Modules allow HubSpot designers to create a custom group of editable content objects to be used across templates and pages on HubSpot’s CMS, while still allowing marketers to control the specific content appearing within those modules on a page-by-page basis. You can learn more about custom modules and their simplified HubL syntax, here.\n\nCustom modules must be built in the Custom Module editor, but they can be included into coded templates and HubL modules. You will see a 'Usage Snippet' in the right sidebar of the Custom Module editor under 'Template Usage'.\n\nCustom modules require the ID of the module as a string as well as a path parameter in order to specify which module to load. The usage snippet will also include a label parameter. See the syntax below:\n\nEditor placeholders\n\nTo render placeholder content for a module in the editor, you can either add default content to module fields or use the editor_placeholder HubL tag. This can be useful when the module doesn't have or need default content, or to streamline module building.\n\nTo add an editor placeholder to a custom module, first add an if statement to the module's HTML to render the placeholder when there's no content selected in the editor. For example, the following code could be used to add an editor placeholder to a CTA module:\n\nThe first if statement identifies whether the module is present. Then, the\nelif statement identifies if the module is being rendered in the context of\nthe editor using the is_in_editor variable. This variable returns true if\nthe content is being rendered in any content editor, but you can be more\nspecific with other in-app editor and preview\nvariables.\n\nThen, define the placeholder content in the module's meta.json file.\n\nFlexible column\n\nFlexible columns are vertical columns in a template that enable content creators to insert and remove modules to the page using the content editor. When coding a flexible column with HubL, you can choose to wrap other HubL modules to make them appear in the flexible column by default. The sample code below shows the basic syntax and a sample flexible column with a rich text and form module contained as default content.\n\nPlease note that flexible columns can only be added to page templates, not blog or email templates. Modules cannot contain flexible columns, but they can instead contain repeatable fields and groups, which provide a similar functionality.\n\nPlease note: when using this tag, the label must follow the name value for the flexible column to function in the content editor. For example, the following syntax is invalid:\n\n[% widget_container label=\"My label\" \"my_flexible_column\" %}\n\nForm\n\nAllows users to select a HubSpot form to add to their page.\n\nFooter\n\nRenders copyright information with the year and company name specified in the account's marketing email settings.\n\nGallery\n\nGenerates a HubSpot gallery tag. This gallery tag is based on Slick. While you can create a gallery module with standard module HubL syntax, If you want to predefine default slides using HubL, you must use block syntax. Both methods are shown below. Gallery images are lazy loaded using JavaScript.\n\nHeader\n\nGenerates a header module that will render text as an h1-h6 tag.\n\nIcon\n\nAdds an icon tag that allows users to select and icon for use. Supported icons sets are FontAwesome 5.0.10, 5.14.0, and 6.4.2.\n\nThis tag cannot be used in modules enabled for email.\n\nImage\n\nCreates a image tag that allows users to select an image from the content editor. If you want the image to be linked to a destination URL, you should use linked_image below.\n\nImage src\n\nAn image src module creates a image selector in the content editor, but rather than printing a img tag, it renders the URL of the image. This tag is generally used with no_wrapper=True parameter, so that the image src can be added to inline CSS or other markup. An alternative to using this tag is to use the export_to_template_context parameter.\n\nLanguage switcher\n\nAdds a Globe Icon with links to the translated versions of a given CMS page. Learn more about multi-language content here.\n\nLinked image\n\nCreates a user-selectable image that is wrapped in a link. This tag has all of the parameters of an image module with two additional parameters that specify the link destination URL and whether the link opens in a new window.\n\nLogo\n\nA logo tag renders your company's logo from the account's brand kit settings.\n\nMenu\n\nGenerates an advanced menu based on a menu tree in Content Settings > Advanced Menus. See menus and navigation for more information on using menus in templates and modules. If id is set to null the menu tag will render the default menu for the HubSpot account.\n\nRequire_css\n\nA HubL tag that enqueues a style element to be rendered in the <head>.\n\nThis tag is similar to the require_css function, except that this tag inserts styling inline rather than from a stylesheet. This tag also does not deduplicate against other instances of the CSS on the same page. If you're building a module and want to insert a stylesheet, but you might use that module multiple times on a single page, you may want to use the require_css function instead.\n\nRequire_head\n\nA HubL tag that enqueues anything placed inside of it into the standard_header_includes which is in the template's <head>. For most Javascript and CSS see require_js and require_css. Some use-cases for require_head include supplying meta tags, and special link tags (like prefetch and preconnect) from modules.\n\nRequire_js\n\nA HubL tag that enqueues a script element to be rendered. To enqueue a script to render in the <head />from a different file via a <script /> element (as opposed to inline as shown here), use the HubL function require_js(absolute_url) instead.\n\nRich text\n\nCreates a WYSIWYG content editor.\n\nRSS listing\n\nLoads a list of content from an internal or external RSS feed.\n\nPlease note: this module loads asynchronously on the client-side. As a result, if you want to manipulate the feed after it's loaded, you'll need to define a global JS function to handle that manipulation. Use the function hsRssFeedComplete(feeds), where feeds is the jQuery selector on all feeds that have been completed. You can directly manipulate the DOM object in that function.\n\nSection header\n\nGenerates an html heading and <p> subheader.\n\nSimple menu\n\nSimple menus allow you to create basic navigation menus that can be modified at the page level. Unlike regular menu modules, simple menus are not managed from the Navigation screen in Website Settings, but rather from the template and page editors. You can use block syntax to set up a default menu tree.\n\nSocial sharing\n\nSocial sharing tags generate social media icons that can be used to share a particular page. This module can be used with block syntax to customize the icon images and more.\n\nSpacer\n\nA spacer tag generates an empty span tag. This tag can be styled to act as a spacer. In drag and drop layouts, the spacer module is wrapped in a container with a class of span1-span12 to determine how much space the module should take up in the twelve column responsive grid.\n\nSystem page tags\n\nThe following tags can be used on system pages, such as the password reset or email subscription pages.\n\nEmail backup unsubscribe\n\nThe backup unsubscribe tag renders for email recipients, if HubSpot is unable to determine their email address, when that recipient tries to unsubscribe. This tag renders a form for the contact to enter his or her email address to unsubscribe from email communications. It should be used on an Unsubscribe Backup system template.\n\nEmail subscriptions\n\nThis module renders when an email recipient goes to edit his or her subscription preferences. It should be used on a Subscription Preference system template.\n\nEmail subscriptions confirmation\n\nThe email subscriptions update confirmation is a module that can be added to the thank you template for when a recipient updates his or her subscription preferences or unsubscribes. It should be used on a Subscription Preference system template.\n\nMembership login\n\nCreates a login form to provide access to private content.\n\nMembership registration\n\nCreates a form to register for access to private content.\n\nPassword reset request\n\nCreates a form to send a password reset email for accessing password-protected pages.\n\nPassword reset\n\nRenders a password reset form for accessing password-protected pages.\n\nPassword prompt\n\nAdds a password prompt to password-protected pages.\n\nText\n\nCreates a single line of text. This tag can be useful to be mixed into your markup, when used in conjunction with the no_wrapper=True parameter. For example, if you wanted your end users to be able to define a destination of a predefined anchor, you could populate the href with a text module with no_wrapper=True.\n\nTextarea\n\nA textarea is similar to a text module in that it allows users to enter plain text, but it gives them a larger area to work in the content editor. This module does not support HTML. If you want to use directly within a predefined wrapping tag, add the no_wrapper=true parameter.\n\nVideo Player\n\nRender a video player for a video file from the file manager that has the Allow embedding, sharing, and tracking setting turned on.\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/cms/hubl/tags/dnd-areas",
    "content": "Drag and Drop Area HubL tags\n\nDrag and drop areas allow developers to create sections of pages and global partials that support layout, stylistic and content changes directly within the content editors. See the creating a drag and drop area tutorial for an introduction to setting up drag and drop areas.\n\nDrag and drop areas are based on a 12 column responsive grid. Drag and drop tags render markup with class names designating columns and rows. You'll need to add a stylesheet to target those class names. An example of layout styles you could implement can be found in the HubSpot CMS Boilerplate. Your stylesheet can be added to the template using {{ require_css() }}.\n\nPlease note: drag and drop areas can't be used in blog post and email templates at this time.\n\ndnd_area\n\nA drag and drop area is a container that makes a portion of the web page editable in terms of its structure, design, and content. The body of a {% dnd_area %} tag supplies the default content for the drag and drop area.\n\nModules themselves cannot contain drag and drop areas. To provide content creators an interface for adding uniform content within a module, use repeatable fields and groups instead.\n\nA dnd_area tag can contain the following parameters:\n\ndnd_area tags can also contain dnd_section tags.\n\nPlease note: a content creator can swap a page's template for another template of the same type, depending on whether it has dnd_area tags.\n\ndnd_section\n\nA {% dnd_section %} is a top-level row, and must be nested within a {% dnd_area %} tag. Sections can also be defined as a template, and then included into a dnd_area, making them ideal for quickly scaffolding out a template.\n\nA dnd_section tag can contain the following parameters:\n\nPlease note: you can only use one background parameter per dnd_section tag.\n\ndnd_section tags can also contain the following tags:\n\ndnd_column\n\nA {% dnd_column %} is a vertical structural building block that occupies one or more layout columns defined by its parent row.\n\nThis HubL tag must be nested within a {% dnd_area %} tag.\n\nA dnd_column tag can contain the following parameters:\n\nPlease note: you can only use one background parameter per dnd_column tag.\n\nA dnd_column tag can also contain dnd_row.\n\ndnd_row\n\nA {% dnd_row %} is a horizontal structural building block that creates a nested 12-column layout grid in which columns and modules can be placed.\n\nThis HubL tag must be nested within a {% dnd_area %} tag.\n\nA dnd_row tag can include the following parameters:\n\nPlease note: you can only use one background parameter per dnd_row tag.\n\nA dnd_row can also contain the following tags:\n\ndnd_module\n\nA {% dnd_module %} is a module wrapped within a div where layout, styles and content can be added. The module is specified by referencing its path, which can either be a HubSpot default module (using the @hubspot/ namespace), or modules you have built, specifying their path within the design manager file tree.\n\nThis HubL tag must be nested within a {% dnd_area %} tag.\n\nA dnd_module tag can contain the following parameters:\n\nHave an old module which has a field name that matches one of the dnd_module parameters above? You can pass default values through a fields parameter, much like you would a field group.\n\nBackground\n\nThere are a few ways to set backgrounds on column, section and row dnd elements, background_image, background_linear_gradient, and background_color.\n\nbackground_color\n\nThe column, section, and row dnd tags support background colors. You can set the default background color for a drag and drop element using background_color. This parameter is a string based parameter and can include the following formats outlined in the example below.\n\nbackground_linear_gradient\n\nThe column, section and row dnd elements support background linear gradients. You can set a default gradient using the background_linear_gradient parameter. The parameter expects a dict. Currently only supports two color stops.\n\nbackground_image\n\nThe column, section and row dnd elements support background images. You can provide a default background image by using the background_image parameter which expects a dict.\n\nHow dnd style parameters translate to the page\n\nWhen you are using style based parameters such as backgrounds, margins, or padding, the class names are automatically computed for your sections, columns, rows, and modules. The property values you have assigned are then added to those automatically created class names and the resulting CSS code is then placed before the closing </body> tag on the page in a <style> tag.\n\nDrag and drop styles can also be different at different breakpoints to offer a responsive look.\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/cms/hubl/tags/deprecated",
    "content": "Deprecated HubL tags\n\nThe following is a list of HubL supported tags that are deprecated. While these tags still operate as intended, newer tags have been created to replace them that are more streamlined and optimized. These new tags are indicated below. This page is for historical reference.\n\nCustom Widgets\n\nThis tag has been replaced by custom module tag.\n\nFollow Me\n\nFollow me modules render icons that link to your various social media profiles. The icons that display are based upon your Social Settings.\n\nThis tag is replaced by the newer Follow Me default module.\n\nGlobal Widget\n\nA global widget is one which can be shared across template\n\nThe tag has been replaced with the custom module tag.\n\nGoogle search\n\nThe Google Search Tag and modules are no longer available. This has been replaced by HubSpot's own native search.\n\nImage slider\n\nGenerates a HubSpot image slider module. This slider module is based on FlexSlider. While you can create a slider module with standard module HubL syntax, If you want to predefine default slides using HubL, you must use block syntax. Both methods are shown below.\n\nThis tag has been deprecated in favor of the Gallery tag.\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/cms/hubl/tags/related-blog-posts",
    "content": "Creating a related blog post listing with the blog related posts HubL tag\n\nThe related_blog_posts HubL tag can be used to create dynamic and related blog post listing based on a variety of parameters. It allows for generating listings of posts across blogs, with the ability to filter by tags, authors, post paths and publish dates. Developers can also specify the HTML output of the module using a macro. This HubL tag can be used on both blog posts and pages. This tutorial will walk through the parameters and usage options for the blog related posts HubL tag.\n\nPlease note that the related_blog_posts HubL tag does not generate an editable module on the post/page level, it is configured in its entirety with HubL.\n\nParameters\n\nThe list of posts is generated from a relevancy score based on a comparison of the set parameter values against posts matching these parameters, or relating to the post the HubL tag appears on. None of the parameters are required, however, specifying parameters will allow you to further control which posts are returned. For comma-separated parameters, the more values you set, the more diverse the returned listing will be. The post_formatter parameter allows you to specify a macro to generate the HTML output of the module. For a full list of parameters and example default HTML output, please see the related_blog_posts spec.\n\nWe strongly recommend using the callback parameter instead of the post_formatter parameter to ensure faster page load times.\n\nPlease note that if the related_blog_posts HubL tag is being used on a post, the blog_post_ids parameter should not be specified, as on blog posts, it will default to the post the widget is appearing on.\n\nExample usages of the related_blog_posts HubL tag\n\nBelow are some example ways to use this tag to enhance your website.\n\nDisplay posts from a specific author across multiple blogs\n\nIn this example, we generate a listing of posts written by one of the three specified blog_authors across two different blogs.\n\nDisplay posts with the tag \"sales enablement\", restricted to a specific publish date time frame\n\nIn this example, we generate a listing of 10 posts related to a specific blog post, with the tag \"sales enablement\", and restricted to a specific publish date time frame. This example specifies the blog_post_ids parameter, so it would be used on a page.\n\nDisplay posts using a JS callback to control HTML output\n\nIn this example, we generate a listing of 5 posts using the callback parameter to control the HTML output of the post listing. (Instead of the post_formatter parameter using a macro.)\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/cms/hubl/variables",
    "content": "HubL variables\n\nHubSpot templates can use a host of predefined variables that can be used to render useful website and email elements. This page is a reference listing of those variables. Learn more about creating your own variables in a HubL template or module.\n\nWhile most of the variables listed on this page are optional, there are a few variables that are required for creating emails and pages from your templates.\n\nThe variables listed below can be used individually by wrapping them in the }} delimiter as noted on our Variables and Macros page. You can optionally use these variables with other parts of the HubL Templating Language such as loops, filters, functions, tags, and more.\n\nVariables available in all templates\n\nThe HubL variables below can be used in email, page, or blog templates.\n\nTo see additional information about what these variables output, you can use the pprint filter, as shown below.\n\nEmail variables\n\nBelow are the HubL variables that can be used in email templates. Some variables, such as the color and font settings variables, can be used in other content types if you want to reference your email color and font settings elsewhere.\n\nRequired email template variables\n\nTo be CAN-SPAM compliant, all emails sent through HubSpot require certain company and opt-out information. This information is set by the following variables, which must be included.\n\nThere are additional email variables that are optional which are listed further down this page.\n\nColor and font settings\n\nThere are several basic color and font controls in your marketing email settings that can be printed to emails. Where noted, you can use some of these variables on page and blog templates by adding site_settings. before the variable.\n\nEmail content\n\nPrivate content email variables\n\nThe following list of variables are only available inside of email templates that are used for private content email templates.\n\nWebsite page variables\n\nThe following variables are available for site pages, landing pages, system pages, and blogs.\n\nRequired page template variables\n\nTo publish a coded file as an editable page or blog template, the following variables must be included. To publish an HTML file without these variables, to use within another template, include isAvailableForNewContent: false in the template annotations.\n\nContent and contact variables\n\nHTTP request variables\n\nThe following variables print information about the HTTP page request.\n\nBlog variables\n\nThe following variables are available for blog templates. Some variables are only available for post listings, while others may only be available for blog posts.\n\nCRM object dynamic pages\n\nThe following variables are used to build dynamic pages with CRM objects. These variables are only available for CRM object dynamic pages.\n\nHubDB variables\n\nThe following variables are used to build dynamic pages with HubDB. These variables are only available for HubDB dynamic pages.\n\nMenu node variables\n\nThe following variables are available to use on the object returned by the HubL menu function.\n\nIn-app editor and preview variables\n\nYou can use the following variables to check if the content is being rendered in the content editor or previewer. For example, you may want to use these to prevent running code in the editor while still running the code on live pages.\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/cms/hubl/quote-variables",
    "content": "Quote template variables\n\nCustom quote templates can access quote data and some associated objects directly from the templates. The data available depends on data you have in your CRM, as well as data added to the quote itself.\n\nWhile developing a quote template, you can use HubSpot-provided mock data to populate the template, which may help for previewing the template. In the @hubspot folder, navigate to the cms-quotes-theme folder. Within the templates folder, view the basic.html, modern.html, or original.html templates. These templates contain the following code block at the top:\n\nThe mock data is first imported from the mock_data.html file, then is set to the QUOTE variable to use the data found in template_data if available. The QUOTE variable is also used to populate the other variables in this list, such as ASSOCIATED_OBJECTS, to make accessing that data less verbose. However, you can structure your data differently, depending on your preferences.\n\nIn the above code, you'll notice that template_data is also used to set the main QUOTE variable. template_data is an object containing all of the actual data for the quote and deal in the page. If that object is not found in the template, HubSpot loads the data from mock_data.html instead.\n\nTemplate_data object\n\nThe vast majority of the data can be directly accessed through the template_data object. You can use {{ template_data|pprint }} in your template to see the full object provided.\n\nQuote variables\n\nThe information specific to this individual quote.\n\nCan't find a variable you're looking for? There are more variables you can access within template_data. Use |pprint to view them. Additionally some variables in quote associations may only be available based on the quote/deal.\n\nWe will be iterating on this documentation to showcase and explain more of the data you have access to. Aside from pretty printing, you can view the mock data file within the cms-quote-theme, to see what is available and the structure it comes in.\n\nAssociated objects\n\nIn a quote template, you can access data from a quote's associated records, such as deals or companies, by using associated_objects.\n\nFor example, you can add the logo from the quote recipient's associated company record to a quote by using the following code:\n\nPlease note: only manually set logos will appear. Automatically detected logos will not appear to prevent unintentional logos from appearing on the quote template.\n\nThe above code first sets a variable that searches for the quote's associated company's logo. Then, using an if statement, the template displays that logo, if available. If no logo has been manually set for the company, no logo is displayed.\n\nCustom Objects\n\nCustom object data can be displayed or used within a quote in a couple different ways. Because each custom object's structure may vary, you'll need to get specific properties based on how you've structured your custom object.\n\nThe quote template_data by default has custom associated objects in it. For example, custom objects associated with deals are included.\n\nTo access them, you can use the following code:\n\nPlease note: because custom objects are unique to each account, the mock data doesn't include an example custom object. This means that in the template preview in the design manager you may see an error or the custom object data simply won't display. You'll instead need to preview the template with your real CRM data, which you can do by creating a quote from the template.\n\nYou can then access each custom object type by appending its custom object type ID formatted with underscores. For example:\n\ntemplate_data.quote.associated_objects.deal.associated_objects.custom_objects._2_2193031\n\nYou can also look up a custom object by using the crm_associations() function and crm_objects() functions.\n\nFor example, if you wanted to look up a custom object associated with a deal, you could pass in data from template_data:\n\nRelated Resources\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/cms/hubl/variables-macros-syntax",
    "content": "HubL variables & macros syntax\n\nHubL uses variables to store and output values to the template. Variables can be used in template logic or iterated through with for loops. In addition to variables, macros are another useful tool for printing repetitive yet dynamic sections of code throughout your templates.\n\nVariables are expressions delimited by }}. The basic syntax of variables is as follows:\n\nVariables\n\nVariables are either a single word in an expression or an attribute of a dictionary. HubL uses Python-based data structures called dictionaries or dicts to store various sets of variables. For example, HubSpot uses a dictionary \"content\" to house many attributes that pertain to the content created with that template. For example the content.absolute_url prints the URL of the specific piece of content.\n\nHubSpot has many predefined variables that can be used throughout your page, blog, and email templates. We have a reference list of variables, you can also view the developer info when browsing any page from your account to see the variables available within that page..\n\nIn addition to printing the values of variables and dictionary attributes in a template, you can also define your own variables. You can store strings, booleans, integers, sequences, or create dictionaries within a single variable. Variables are defined within statement delimiters using the word \"set\". Once stored, variables can then be printed by stating the variable name as an expression. Below you can see various types of information stored in variables and then printed.\n\nVariables should either be single words or use underscores for spaces (ie my_variable). HubL does not support hyphenated variable names.\n\nEach example above stores a different type of variable, with the final example storing two different variables in a sequence.\n\nIn addition to printing values, variables can be used in if statements, as filter parameters, as function parameters, as well as iterated through with for loops (sequence variables only).\n\nOne common usage is to use variables to define common CSS values in your stylesheet. For example, if you have a color that you use over and over again throughout your CSS file. That way, if you need to change that color, you can change the variable value, and all references to that variable will be updated, the next time that you publish the file.\n\nMacros\n\nHubL macros allow you to print multiple statements with a dynamic value. For example, if there is a block of code that you find yourself writing over and over again, a macro may be a good solution, because it will print the code block while swapping out certain arguments that you pass it.\n\nThe macro is defined, named, and given arguments within a HubL statement. The macro is then called in a statement that passes its dynamic values, which prints the final code block with the dynamic arguments. The basic syntax of a macro is as follows:\n\nIf your macro is returning whitespace in the form of new lines, you can strip whitespace in templates by hand. If you add a minus sign (-) to the start or end of a block, a comment, or a variable expression, the whitespaces before or after that block will be removed.\n\nBelow shows a practical application of a macro to print a CSS3 properties with the various vendor prefixes, with a dynamic value. This allows you to print 5 lines of code with a single macro tag.\n\nMacros introduce the ability to have recursive code. To prevent reliability and performance issues you can only nest macros 20 levels deep. If you go over this limit you will get the error: max recursion limit of 20 reached for macro <your macro name>\n\nCall\n\nIn some instances, you may want to pass additional dynamic information back into the macro block. For example, you may have a large piece of code that you want to feed back into the macro, in addition to the arguments. You can do this using call block and caller(). A call block works essentially like a macro but does not get its own name. The expression caller() specifies where the contents of the call block will render.\n\nIn the example below, a <p> is added into a macro in addition to the two arguments.\n\nImport\n\nAnother useful feature of macros is that they can be used across templates by importing one template file into another. To do this you will need to use the import tag. The import tag will let you specify a Design Manager file path to the template that contains your macros and give the macros a name in the template that you are including them in. You can then pass values into these macros without needing to redefine them.\n\nFor example, let's say that you have a .html template file that contains the following 2 macros. One macro is defined to set up a header tag and one is defined to generate a footer tag. This file is saved in Design Manager with the name my_macros.html.\n\nIn the template that will use these macros, an import tag is used that specifies the file path to the my_macros.html file. It also names the group of macros (in this example header_footer). Macros can then be executed by appending the macro name to the name given to the imported template. See the example below.\n\nFrom\n\nIf you want to only import specific macros, instead of all macros contained in a separate .html file, you can use the from tag. With the from tag, specify only the macros that you want to import. Generally, using import will provide more flexibility, but this alternative is also supported.\n\nThe example below accesses the same my_macros.html file from the previous section of this article. But this time instead of importing all macros, it accesses only the footer macro.\n\nVariables within loops\n\nAny variables defined within loops are limited to the scope of that loop and cannot be called from outside of the loop.\n\nYou can call variables that are defined outside of a loop, from within a loop, but not the other way around.\n\nYou can also use functions in order to mutate objects for settings values on dict's or performing list operations. The following example is using the .update list operation:\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/cms/hubl/if-statements",
    "content": "If Statements\n\nYou can include conditional logic in your modules and templates by using HubL if statements and unless statements. If statements often contain HubL supported operators and can be used to execute expression tests.\n\nPlease note: if you're using personalization tokens within a conditional statement of your email module, you must enable programmable email for the module.\n\nInformation passed via the v3 or v4 single send APIs will not function within if statements, as the templates compile before the information populates.\n\nBasic if statement syntax\n\nHubL uses if statements to help define the logic of a template. The syntax of HubL if statements is very similar to conditional logic in Python. if statements are wrapped in statement delimiters, starting with an opening if statement and ending with an endif.\n\nThe example below provides the basic syntax of an if statement, where \"condition\" would be replaced with the boolean rule that you were going to evaluate as being true of false.\n\nNow that you have seen the basic syntax, let's look at a few actual examples of basic if statements. The next examples below show if statements that check to see whether or not a HubL module with the name my_module and whether a variable named my_module are present on a template. Notice that without any operators, the if statement will evaluate whether or not the module is defined in the context of the template.\n\nNotice that when evaluating the HubL module, the module name is left in quotes within the if statement and while testing the variable no quotes are used around the variable name. In both examples above, the module and the variable exist in the template, so the statements evaluate to print the markup. Please note that these examples are only testing whether the module and variable are defined, not whether or not they have a value.\n\nNow let's look at an if statement that evaluates whether a module has a value, instead of evaluating whether it exists on the template. To do this, we need to use the export_to_template_context parameter. In the example below, if the text module is valued in the content editor, the markup would print. If the module's text field were cleared, no markup would render. If you are working within custom modules, there is a simplified widget.widget_name syntax outlined in the example here.\n\nUsing elif and else\n\nif statements can be made more sophisticated with additional conditional statements or with a rule that executes when the condition or conditions are false. elif statements allow you to add additional conditions to your logic that will be evaluated after the previous condition. else statements define a rule that executes when all other conditions are false. You can have an unlimited number of elif statements within a single if statement, but only one else statement.\n\nBelow is the basic syntax example of if statement that uses the <= operator to check the value of a variable. In this example, the template would print: \"Variable named number is less than or equal to 6.\"\n\nBelow is one more example that uses a choice module to render different headings for a careers page, based on the department chosen by the user. The example uses the == operator, to check for certain predefined values in the choice module.\n\nUnless statements\n\nunless statements are conditionals just like if statements, but they work on the inverse logic. They will render and compile the code between the opening and closing tags, unless the single boolean condition evaluates to true. Unless statements begin with an unless and end with an endunless. unless statements support else but not elif.\n\nBelow is an example that prints an \"Under construction\" header, unless the rich text field is valued. If the rich text field has content, then that content will display.\n\nifchanged\n\nIn addition to if and unless statements, HubL supports ifchanged statements. These statements can be used to only render markup when a variable has changed since a prior invocation of this tag.\n\nInline if statements\n\nHubL supports inline if statements. These can be used to write conditional logic in a concise manner with operators and expression tests.\n\nTernary operators\n\nIt is also possible to use ternary operators to quickly write conditional logic with operators and expression tests.\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/cms/hubl/deprecated",
    "content": "Deprecated HubL filters and functions\n\nThe following is a list of HubL filters and functions that are deprecated. While these filters and functions still operate as intended, they've been replaced by newer ones that are more streamlined and optimized.\n\nFor all new and future projects we encourage using our current HubL functions instead of deprecated ones.\n\nDeprecated filters\n\nThe following filters have been deprecated:\n\ndatetimeformat\n\nThis function has been replaced by format_datetime.\n\nformat_currency\n\nThis function has been replaced by format_currency_value.\n\nDeprecated functions\n\nThe following functions have been deprecated:\n\nblog_post_by_id\n\nThis function has been replaced by content_by_id().\n\nblog_topics\n\nThis function has been renamed to blog_tags().\n\nblog_recent_topic_posts\n\nThis function has been renamed to blog_recent_tag_posts().\n\ndatetimeformat\n\nThis function has been replaced by format_datetime().\n\nget_public_template_url\n\nThis function has been replaced by get_asset_url().\n\ninclude_css\n\nThis function has been replaced by require_css().\n\ninclude_javascript\n\nThis function has been replaced by require_js().\n\npage_by_id\n\nThis function has been replaced by content_by_id().\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/cms/forms",
    "content": "HubSpot forms reference\n\nUse HubSpot forms to capture information from website visitors, which you can then access throughout HubSpot. You can share links to forms directly with users, submit form data via the API, and embed them on your website pages using the CMS. Below, find reference documentation for forms, including form embed configuration options, internationalization and validation error messages, and form events.\n\nIf you're using jQuery to manipulate the values of form inputs (i.e. using val() or prop()), you must trigger a change event using change() or trigger('change') for the change to properly register.\n\nForm embed configuration\n\nWhen embedding a form, you can include the following customization options in the form embed code.\n\nPlease note:\n\nEmbed code callbacks\n\nThe form embed code includes event callbacks that you can use to extend form functionality when the events below occur. These are separate from the global form events that you can hook into.\n\nInternationalization\n\nBy default, HubSpot provides a set of translated date picker field labels and validation messages for a set of supported languages. You can also add custom languages or override specific error messages and date picker months/days displayed on the form using the translation parameter.\n\nTo include the default translated strings for a supported language, add the locale parameter to the embed code, followed by one of the languages in the table below.\n\nTo add custom languages or override field labels and default translated strings, you can pass language objects into the translations parameter that correspond to the desired locale.\n\nFor supported locales, you only need to provide the keys and messages you wish to override. For example, the code below configures the form to replace the email field label, required field validation message, and submit button text with custom strings.\n\nLearn more about validation below.\n\nIn addition to the supported locales, you can register new locale codes in the locale parameter. In this case, make sure to specify messages for all of the keys listed in the table below. Omitted keys will show a \"missing translation\" message in their place.\n\nValidation messages\n\nHubSpot provides three layers of form validation:\n\nDuring each step of validation, HubSpot provides a set of default error messages. These messages can be overridden by using the locale and translation parameters in the form embed code. Below, learn more about the default validation error messages and how to override them depending on when they occur.\n\nLive validation errors\n\nBelow are the currently supported live validation field error keys for contextual overriding. These error keys can be specified in the language object of the translations parameter.\n\nClient-side validation errors\n\nThe following errors may be generated and displayed client-side. They can be contextually overridden using a submissionErrors object.\n\nServer-side validation errors\n\nThe following errors may be generated on the server after a submission request has been sent and displayed client-side when a response is received. They can be contextually overridden using a submissionErrors object.\n\nForm events\n\nForms allow two ways to bind functionality onto events, including callbacks in the HubSpot form embed code and global form events.\n\nUse these events to trigger custom JavaScript. If you need complete control over the styles and actions of your form, it's recommended that you build your own custom form and submit the data using the Forms API.\n\nPlease note:\n\nonBeforeFormInit\n\nCalled before the form has been inserted into DOM.\n\nonFormReady\n\nCalled after the form has been inserted into DOM.\n\nonBeforeFormSubmit\n\nCalled at the start of form submission, but before submission has been persisted. Behaves the same as onFormSubmit, but is preferred due to more accurate naming indicating when this event is triggered.\n\nWhen performing custom redirects, use onFormSubmitted instead, as this event may prevent submissions being initiated, thus preventing form submissions.\n\nonFormSubmit\n\nCalled at the start of form submission, but before submission has been persisted. Please use onBeforeFormSubmit instead.\n\nWhen performing custom redirects, use onFormSubmitted instead, as this event may prevent submissions being initiated, thus preventing form submissions.\n\nonFormSubmitted\n\nCalled after the form has been submitted and the submission has persisted. Recommended for performing custom redirects.\n\n"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/cms/fields/rich-text-editor",
    "content": "Configuring the Rich Text Editor\n\nAs a developer, there are times when WYSIWYG editors provide functionality that, when used incorrectly, can hinder the goal of a unified brand and cause content design and flow issues. The Rich Text Editor inside of custom modules now provides the ability for developers to remove components from the configuration toolbar through the enabled_features property inside of the fields.json file.\n\nNote: The following applies to custom modules utilizing the rich text field in local development only. Using this feature will not disable the functionality of options removed from the Rich Text Editor, just the display of the options. This is for backward compatibility reasons so existing content is not affected.\n\nHow to use enabled_features\n\nIn your fields.json file where you have your rich text field object, you can enable certain features by adding the valid toolbar options in an array to the enabled_features property as illustrated below:\n\nThe content editor would then see the rich text editor with only the included options enabled as illustrated in the image below:\n\nNote: Some features, such as the “Clear Styles” button which allows you to revert to the default styling for the editor, will always be enabled and cannot be removed. If the enabled_features property is omitted, all features will be shown.\n\nFeature listings\n\nBelow is a list of features which can be enabled individually when using the enabled_features property.\n\nGroups of controls\n\nText Formating\n\nInsert Buttons\n\nAdvanced Options\n\n"
  }
]