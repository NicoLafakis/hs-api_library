[
  {
    "url": "https://developers.hubspot.com/docs/reference/api/overview",
    "content": "HubSpot API reference documentation\n\nHubSpot’s developer platform is a core part of our mission to empower organizations to grow better. Our APIs are designed to enable teams of any shape or size to build robust integrations that help them customize and get the most value out of HubSpot.\n\nAll HubSpot APIs are built using REST conventions and designed to have a predictable URL structure. They use many standard HTTP features, including methods (POST, GET, PUT, DELETE) and error response codes.\n\nAll HubSpot API calls are made under https://api.hubapi.com and all responses return standard JSON.\n\nSetting up\n\nThere are several ways to build integrations with HubSpot:\n\nLearn more about the different types of apps and how to build them.\n\nClient libraries\n\nClient libraries are designed to help you interact with the HubSpot APIs with less friction. They are written in several different languages and help bridge the gap between your application and HubSpot’s APIs. They take away the need to know the exact URL and HTTP method to use for each API call among other things leaving you more time to focus on making your application. Learn more about our client libraries here\n\nUsing the documentation\n\nHubSpot’s API documentation is split into two sections: reference docs and their accompanying guides, and the integration guides.\n\nReference docs and guides\n\nAPI reference documentation provides a list of the available endpoints for an API, along with the available parameters and example requests in multiple languages. Example request code blocks also include a Test call button you can use to make test calls directly from the page. At the top of API reference pages, a Run in Postman button is displayed with the API is included in HubSpot's Postman collection. The corresponding guide will provide an expanded summary of the API, along with any special considerations to keep in mind when using the API.\n\nOn the https://developers.hubspot.com/docs site, each API reference doc and guide are presented on the same page, divided between Overview and Endpoints tabs.\n\nOn the new / site, API reference docs are presented on one page while the corresponding guide is on another. A link will be included on each page for easy navigation.\n\nIntegration guides\n\nHubSpot's integration guides includes documentation about general app development, including authentication and listing apps on the App Marketplace. You'll also find guides for building UI extensions (BETA) and working with the developer projects framework (BETA).\n\nBuilding on HubSpot's CMS\n\nWhile the API reference documentation includes information about using HubSpot's CMS APIs, such as the pages API, you'll find the full set of CMS developer documentation at https://developers.hubspot.com/docs/cms. This includes guides that walk through building various CMS assets as well as reference documentation for HubL.\n\nSupport and community resources\n\nGet your questions answered, make connections, and share your insights by joining HubSpot’s growing developer community forums and Slack community. These forums are a great place to make your voice heard — community feedback is incredibly important to us and our ongoing efforts to improve HubSpot’s developer experience.\n\nYou can also stay up to date on new features, announcements, and important changes by subscribing to the Changelog blog."
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/analytics-and-events/custom-events/custom-event-completions",
    "content": "Custom event completions\n\nIntroduction\n\nUse the custom events API to define events that you can later create and associate with records in your HubSpot CRM.\n\nUse cases for this API\n\nYou want to track more complex interactions that visitors perform when they navigate to your website and engage with your content.\n\nBehavioral_Events_Tracking\n\n/events/v3/send/batch\n\nCustom event data\n\nSend custom event completion\n\nEndpoint to send an instance of a custom event.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/analytics-and-events/custom-events/custom-event-definitions",
    "content": "Custom event definitions\n\nIntroduction\n\nUse the custom events API to define events that you can later create and associate with records in your HubSpot CRM.\n\nUse cases for this API\n\nYou want to track more complex interactions that visitors perform when they navigate to your website and engage with your content.\n\nEvent definition\n\nFetch a specific custom event definition\n\nFetch a single custom event definition by name.\n\nQuery custom event definitions\n\nSearch for existing custom event definitions.\n\nCreate a new property for a custom event definition.\n\nAdd a new property to an existing custom event definition.\n\nCreate custom event definition\n\nCreate a custom event definition.\n\nUpdate a custom event definition\n\nUpdate a specific custom event definition by name.\n\nUpdate an existing custom event property\n\nUpdates an existing property in a custom event definition.\n\n/events/v3/event-definitions/{eventName}\n\nDelete a property from a custom event definition\n\nDeletes a property from an existing custom event definition.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/analytics-and-events/email-analytics",
    "content": "Email analytics\n\nThis is a stable API but uses an older format. This means some functionality may not be available (for example test calls and Postman integration).\n\nIntroduction\n\nUse the email analytics API to fetch events generated by marketing emails, such as sends, bounces, and clicks.\n\nUse cases for this API\n\nTo optimize email campaigns, you want to gather data to power a machine learning model that determines the best time to send emails to different contact segments.\n\nRelated guide:\n\nGet all campaign IDs for a portal\n\nFor a given portal, return all email campaign IDs associated with the portal. The email campaign IDs are returned in no particular order. You can then use the IDs to look up data on the performance of each marketing email campaign.\n\nNote that you can get campaign IDs with recent activity via this endpoint instead.\n\nRequirements\n\nParameters\n\nA key representing which page of results you would like\n\nLimit the maximum number of results you would like returned.\n\nResponse\n\nShow more\n\nGet campaign IDs with recent activity for a portal\n\nFor a given portal, return all campaign IDs sorted by recent activity associated with the portal. The campaign IDs are returned in descending order of most-recent activity. You can then use the IDs to look up data on the perfomance of each campaign.\n\nRequirements\n\nParameters\n\nA key representing which page of results you would like\n\nLimit the maximum number of results you would like returned.\n\nResponse\n\nShow more\n\nGet campaign data for a given campaign\n\nThis endpoint provides a way to query data associated with a given email campaign.\n\nTo find the campaign_id that corresponds to a specific email:\n\nThe campaign_id will also be provided within the allEmailCampaignIds field in the response of the Marketing Email Statistics API.\n\nRequirements\n\nParameters\n\nThe Internal HubSpot ID of the email that you want to get the details for. Consult the section above this table to learn how to locate this ID.\n\nResponse\n\nShow more\n\nGet email events\n\nThis endpoint is used to query the event log for events matching specified parameters.\n\nPagination\n\nThe parameters offset and limit are used to paginate results.\n\nThe returned offset is an opaque token used internally to keep track of the position in the result set. It's not meant to be used for anything other than subsequent requests on this endpoint with the same query parameters (excluding offset itself and limit). Further, it's meant to be short-lived.\n\nRequirements\n\nParameters\n\nOnly return events which correspond to the given HubSpot Application ID.\n\nOnly return events from the given HubSpot Campaign ID.\n\nOnly return events related to the given recipient.\n\nOnly return events of the specified type (case-sensitive). The possible types\nare described in the Email Events\nOverview.\n\nOnly return events which occurred at or after the given timestamp (in\nmilliseconds since epoch).\n\nOnly return events which occurred at or before the given timestamp (in\nmilliseconds since epoch).\n\nAn offset token returned by a previous call to this endpoint.\n\nThe maximum number of events to return. If omitted, the default value of 10 is\nused. The maximum allowed value is 1000.\n\nOnly return events that have not been filtered out due to customer filtering\nsettings. The default value is false.\n\nResponse\n\nShow more\n\nResponse details\n\nEvents will be returned in reverse-chronological order.\n\nRefer to the Email Events Overview for a full description of events, including the different event types, what they represent, how they're related, and their properties.\n\nGet Email Event By ID\n\nQuery the event log for a specific event and get results for that email event.\n\nRefer to the Email Events Overview for a full description of events, including the different event types, what they represent, how they're related, and their properties.\n\nRequirements\n\nParameters\n\nThe creation timestamp (in milliseconds since epoch) of the event to return.\n\nThe unique ID of the event to return.\n\nResponse\n\nShow more"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/analytics-and-events/event-analytics",
    "content": "Event analytics\n\nIntroduction\n\nUse the web analytics API to fetch events associated with CRM records of any type. This includes standard events, such as website page views and email opens, as well as custom events.\n\nUse cases for this API\n\nYou want to view a timeline of the interactions that a contact has had with your content. You can then use this timeline to build a dataset for custom analytics or present a contact timeline in an external application.\n\nEvents\n\nEvent Instance Query\n\nThis endpoint allows you to query for event instances using filter criteria.\n\nEvent Types\n\nThis endpoint returns a list of event type names which are visible to you. You may use these event type names to query the API for specific event instances of a desired type.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/analytics-and-events/reporting",
    "content": "Reporting\n\nThis is a stable API but uses an older format. This means some functionality may not be available (for example test calls and Postman integration).\n\nIntroduction\n\nUse the reporting API to export analytics and reporting data from HubSpot. Primarily used for connecting HubSpot metrics to metrics stored in other business intelligence tools.\n\nUse cases for this API\n\nYou're hosting your blog on HubSpot while storing CRM data externally, and want to see traffic and leads tracked in HubSpot alongside sales activity in your CRM.\n\nRelated guide:\n\nGet analytics data breakdowns\n\nThis endpoint is used to get analytics data for a specified category.\n\nUse case for this endpoint: This endpoint is designed to mimic how report data is shown in a sources report. You can use it to pass website traffic data tracked in HubSpot to external business intelligence (BI) tools.\n\nFor more details about how sessions are categorized, please see the article linked here.\n\nRequirements\n\nParameters\n\nThe start date for the data you want. Must be included as ISO 8601 format, YYYYMMDD. Note: The date is inclusive, and will be treated as being in the time zone of the portal.\n\nThe end date for the data you want. Must be included as ISO 8601 format, YYYYMMDD. Note: The date is inclusive, and will be treated as being in the time zone of the portal.\n\nUsed to drilldown into the data. This parameter is designed to reflect the functionality of the HubSpot sources reports. For example, when breaking down by sources, d1 could be organic to drill down into organic traffic data.Note: Starter plans will not be able to use the &d1= or &d2= drilldown parameters.\n\nUsed to further drill down into the data. Similar to d1, this reflects the functionality of the sources report. For example, if you have d1=organic, d2=hubspot would drill down into data for organic search traffic for the keyword `hubspot`.Note: Starter plans will not be able to use the &d1= or &d2= drilldown parameters.\n\nMay be included multiple times. Filter the returned data to include only the specified breakdown. This parameter can be included multiple times to filter for multiple breakdowns. For example, when breaking down by sources and using d1=organic to drill down into organic search traffic, you can get the data for the specific keywords `hubspot` and `marketing` using f=hubspot&f=marketing.NOTE: You must include at least 1 filter when the :time_period is monthly, weekly, or daily.\n\nMay be included multiple times. Exclude data for the specified breakdown. This parameter can be included multiple times to exclude multiple breakdowns.For example, when breaking down by sources and using d1=referrals to drill down into referral traffic, you can exclude data for referral traffic from 'www.hubspot.com' by using e=www.hubspot.com.\n\nThe ID of an Analytics view. If included, the returned data will only include data that matches the view. See this endpoint for details on getting the IDs for the views.\n\nIf included, the results are sorted by the specified field.\n\nIf a &sort= value is included in the request, this parameter will control the direction of sorted results. Must be one of ASC (ascending) or DESC (descending). Defaults to DESC if not included.\n\nUsed to limit the number of results per request. If included, the response will include an offset value that can be used to get the next page or results. Defaults to 350 if not included. NOTE: This parameter will be ignored if the :time_period is monthly, weekly, or daily.\n\nUsed to get the next page of results if there are more results than the number specified in the limit parameter (or 350 if limit is not included). Each response will include an offset field, and you can use the response value in the offset parameter in the next request to get the next set of results.\n\nResponse\n\nShow more\n\nResponse details\n\nFor information about the error messages you can get from this endpoint, please see the overview page.\n\nNote: Access to the data requested using this endpoint will depend on the subscription of the connected HubSpot account. Please see the overview page for more details.\n\nGet analytics data for specific objects\n\nGet analytics data for specific objects, based on the type of object.\n\nThis endpoint is designed around how report data would be shown in the sources report. For more details about how the sources report works, please see the article linked here.\n\nFor more details about how sessions are categorized, please see the article linked here.\n\nNote: Access to the data from this endpoint will depend on the subscription of the HubSpot account. Please see the overview page for more details.\n\nRequirements\n\nParameters\n\nThe start date for the data you want. Must be included as ISO 8601 format, YYYYMMDD. Note: The date is inclusive, and will be treated as being in the time zone of the portal.\n\nThe end date for the data you want. Must be included as ISO 8601 format, YYYYMMDD. Note: The date is inclusive, and will be treated as being in the time zone of the portal.\n\nUsed to drilldown into the data. This parameter is designed to reflect the functionality of the HubSpot sources reports. For example, when breaking down by sources, d1 could be organic to drill down into organic traffic data.Note: Starter plans will not be able to use the &d1= or &d2= drilldown parameters.\n\nUsed to further drill down into the data. Similar to d1, this reflects the functionality of the sources report. For example, if you have d1=organic, d2=hubspot would drill down into data for organic search traffic for the keyword `hubspot`.Note: Starter plans will not be able to use the &d1= or &d2= drilldown parameters.\n\nMay be included multiple times. Filter the returned data to include only the specified breakdown. This parameter can be included multiple times to filter for multiple breakdowns. For example, when breaking down by sources and using d1=organic to drill down into organic search traffic, you can get the data for the specific keywords `hubspot` and `marketing` using f=hubspot&f=marketing.NOTE: You must include at least 1 filter when the :time_period is monthly, weekly, or daily.\n\nMay be included multiple times. Exclude data for the specified breakdown. This parameter can be included multiple times to exclude multiple breakdowns.For example, when breaking down by sources and using d1=referrals to drill down into referral traffic, you can exclude data for referral traffic from 'www.hubspot.com' by using e=www.hubspot.com.\n\nThe ID of an Analytics view. If included, the returned data will only include data that matches the view. See this endpoint for details on getting the IDs for the views.\n\nIf included, the results are sorted by the specified field.\n\nIf a &sort= value is included in the request, this parameter will control the direction of sorted results. Must be one of ASC (ascending) or DESC (descending). Defaults to DESC if not included.\n\nUsed to limit the number of results per request. If included, the response will include an offset value that can be used to get the next page or results. Defaults to 350 if not included. NOTE: This parameter will be ignored if the :time_period is monthly, weekly, or daily.\n\nUsed to get the next page of results if there are more results than the number specified in the limit parameter (or 350 if limit is not included). Each response will include an offset field, and you can use the response value in the offset parameter in the next request to get the next set of results.\n\nResponse\n\nShow more\n\nGet data for HubSpot hosted content\n\nGet analytics data for your HubSpot hosted content. This would include your website and landing pages, as well as any blog pages hosted on HubSpot.\n\nThis endpoint is designed around how report data would be shown in the sources and page performance reports. For more details about how the sources report works, please see the article linked here. For more details about the page performance report, please see the article linked here.\n\nFor more details about how sessions are categorized, please see the article linked here.\n\nIn addition to getting analytics details for pages, sources data can also be pulled for pages or for blogs: For pages: GET analytics/v2/reports/:content_type/:page_id/sources/:time_period\n\nFor blogs: GET analytics/v2/reports/:content_type/content-group/:blog_id/sources/:time_period\n\nNote: Access to the data from this endpoint will depend on the subscription of the HubSpot account. Please see the overview page for more details.\n\nRequirements\n\nParameters\n\nThe type of content that you want to get data for. Must be one of:\n\nA page ID can be included the URL to get sources data for a specific page. See\nthe examples for details.\n\nA blog ID can\nbe specified to get data for all content related to a specific blog. The\ncontent_type must be blog-posts or listing-pages, see the examples for\ndetails.\n\nThe time period used to group the data. Must be one of:\n\nsummarize/daily - Grouped by day, data is rolled up across all\nbreakdowns\n\nsummarize/weekly - Grouped by week, data is rolled up across all\nbreakdowns\n\nsummarize/monthly - Grouped by month, data is rolled up across all\nbreakdowns\n\nNOTE: When using daily, weekly, or monthly for the time_period, you\nmust include at least one filter (&f= parameter). See below for details.\n\nThe start date for the data you want. Must be included as ISO 8601 format,\nYYYYMMDD. Note: The date is inclusive, and will be treated as being in the\ntime zone of the\nportal.\n\nThe end date for the data you want. Must be included as ISO 8601 format,\nYYYYMMDD. Note: The date is inclusive, and will be treated as being in the\ntime zone of the\nportal.\n\nUsed to drilldown into the data. This parameter is designed to reflect the\nfunctionality of the HubSpot sources reports. For example, when breaking down\nby sources, d1 could be organic to drill down into organic traffic\ndata.Note: Starter plans will not be able to use the &d1= or &d2=\ndrilldown parameters.\n\nUsed to further drill down into the data. Similar to d1, this reflects the\nfunctionality of the sources report. For example, if you have d1=organic,\nd2=hubspot would drill down into data for organic search traffic for the\nkeyword `hubspot`.Note: Starter plans will not be able to use the\n&d1= or &d2= drilldown parameters.\n\nMay be included multiple times. Filter the returned data to include only\nthe specified breakdown. This parameter can be included multiple times to\nfilter for multiple breakdowns. For example, when breaking down by sources and\nusing d1=organic to drill down into organic search traffic, you can get the\ndata for the specific keywords `hubspot` and `marketing` using\nf=hubspot&f=marketing.NOTE: You must include at least 1 filter when the\n:time_period is monthly, weekly, or daily.\n\nMay be included multiple times. Exclude data for the specified breakdown.\nThis parameter can be included multiple times to exclude multiple\nbreakdowns.For example, when breaking down by sources and using d1=referrals\nto drill down into referral traffic, you can exclude data for referral traffic\nfrom 'www.hubspot.com' by using e=www.hubspot.com.\n\nThe ID of an Analytics view. If included, the returned data will only include\ndata that matches the view. See this endpoint for\ndetails on getting the IDs for the views.\n\nIf included, the results are sorted by the specified field.\n\nIf a &sort= value is included in the request, this parameter will control\nthe direction of sorted results. Must be one of ASC (ascending) or DESC\n(descending). Defaults to DESC if not included.\n\nUsed to limit the number of results per request. If included, the response\nwill include an offset value that can be used to get the next page or results.\nDefaults to 350 if not included. NOTE: This parameter will be ignored if\nthe :time_period is monthly,weekly, or daily.\n\nUsed to get the next page of results if there are more results than the number\nspecified in the limit parameter (or 350 if limit is not included). Each\nresponse will include an offset field, and you can use the response value in\nthe offset parameter in the next request to get the next set of results.\n\nResponse\n\nShow more\n\nCheck for the existence of analytics data for an object type\n\nCheck to see if there is analytics data for a specified object type. This can be used to perform a simple, quick check to see if a HubSpot account has any analytics data for the specified object type.\n\nThe response is a simple \"exists\": true if there is data, or \"exists\": false if there is no data for the object type.\n\nNote: Access to the data from this endpoint will depend on the subscription of the HubSpot account. Please see the overview page for more details.\n\nRequirements\n\nParameters\n\nThe object type that you want to check for analytics data. See the table below\nfor the supported object types.\n\nResponse\n\nShow more\n\nGet Event by ID\n\nGiven an event ID, returns a specific event definition in a given portal. Events can be created in-app, or dynamically via the Tracking Code API.\n\nRequirements\n\nParameters\n\nThe ID of the specific event you're looking to pull.\n\nIf specified as true, will return a deleted event. Otherwise, requesting deleted events by ID will return a 404.\n\nResponse\n\nShow more\n\nGet events\n\nThis endpoint is used to get data for all events in a HubSpot account with a Marketing Hub Enterprise subscription. Events can be created in-app or dynamically via the Tracking Code API.\n\nUse case for this endpoint: You can use this method to retrieve all event definitions and confirm data is syncing with an external analytics solution.\n\nRequirements\n\nParameters\n\nIf specified as true, include deleted events\n\nResponse\n\nShow more\n\nResponse details\n\nReturns all of the event definitions in a given portal.\n\nNote: Access to the data from this endpoint will require a Marketing Hub Enterprise subscription. Please see the Analytics API Overview for more details.\n\nGet a Group of Events by ID\n\nGiven a batch of event IDs, returns a list of event definitions in a given portal. Events can be created in-app, or dynamically via the Tracking Code API.\n\nNote: Access to the data from this endpoint will require a Marketing Hub Enterprise subscription. Please see the overview page for more details.\n\nRequirements\n\nParameters\n\nThe ID of an event. Can be included multiple times to pull multiple events.\n\nIf specified as true, will include deleted events.\n\nResponse\n\nShow more\n\nGet all analytics views\n\nGet the details for the analytics views set up in the portal. The id of a view can be used to filter the data from the Analytics API endpoints using the filterId= query parameter.\n\nNote: Access to the data from this endpoint will require a Marketing Hub Professional or Enterprise subscription. Please see the overview page for more details.\n\nRequirements\n\nParameters\n\nResponse\n\nShow more"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/analytics-and-events/cookie-banner/cookie-banner-api",
    "content": "Cookie consent banner API\n\nSuper admins and users with permission to edit website settings can customize visitor cookie tracking and consent banners to comply with EU cookie laws and the General Data Protection Regulation (GDPR).\n\nA cookie consent banner allows visitors to opt in or opt out of being tracked in your HubSpot account with cookies. This feature works for all HubSpot pages as well as any external pages with your HubSpot tracking code installed. Customize the cookie tracking settings and cookie consent banner.\n\nIn this article, learn how to manage the cookies that are added to a visitor's browser through the cookie consent banner.\n\nYou can also learn how to use a third party cookie consent banner to distribute consent, disable the consent collection, and manage features within HubSpot.\n\nRemove cookies\n\n_hsp.push(['revokeCookieConsent']);\n\nRemove the cookies created by the HubSpot tracking code that are included in the consent banner under GDPR, include the HubSpot cookies related to tracking the visitor. As a result of the cookies being removed, the visitor would see the cookie consent banner on their next page load, as they would appear as a new visitor.\n\nThis function does not remove cookies placed by non-HubSpot banners. You can find the specific list of cookies that will be removed on HubSpot's Knowledge Base.\n\nIf cookie blocking is turned on, this function will revoke consent so any third-party cookies will not be updated or dropped during future visits to the website.\n\nPlace do not track cookie\n\n_hsq.push(['doNotTrack']);\n\nPlaces the __hs_do_not_track cookie in the visitors browser, which will prevent the HubSpot tracking code from sending any information for the visitor.\n\nYou can remove the cookie by calling the function again and including the {track: true} argument: _hsq.push(['doNotTrack', {track: true}]);\n\nPlease note: this function prevents all information from being collected by the tracking code, including anonymized traffic and custom event data.\n\nGet privacy consent status\n\n_hsp.push(['addPrivacyConsentListener', callbackFunction]);\n\nGet the privacy consent status of the current visitor. There are 3 categories of consent that can be used to provide more granular control to the user. These each have their own keys within the consent.categories object:\n\nThe callbackFunction will be called, depending on the state of the page:\n\nIf the banner is not enabled, or if the visitor has previously seen the banner and clicked accept or decline:\n\nIf the banner is enabled, the callback function will be called when the visitor clicks on the accept or decline button.\n\nCookies not by category\n\nPlease note: this is provided for backward compatibility with older scripts. For all new websites you should use the cookies by category method, giving more granular control over cookie activation.\n\n_hsp.push(['addPrivacyConsentListener', callbackFunction]);\n\nAllows you to get the true or false privacy consent status of the current visitor.\n\nThe callbackFunction will be called, depending on the state of the page:\n\nIf the banner is not enabled, or if the visitor has previously seen the banner and clicked accept or decline:\n\nIf the banner is enabled, the callback function will be called when the visitor clicks on the accept or decline button.\n\nThe callbackFunction accepts a consent object as its only argument.\n\nThe consent object has a single allowed property that will be true if:\n\nThe property will be false if the consent banner is enabled in opt-in mode and the visitor clicks or has previously clicked the decline button.\n\n​​Enable website visitors to manage their consent\n\nCall the showBanner function to resurface the banner, enabling website visitors to make changes to their consent preferences. For example:\n\nThe behavior ofshowBannervaries by policy and is only available for Opt-In and Cookie-By-Category policies.\n\nFor Opt-In policies, calling showBanner will cause the banner to reappear, as shown in the video below:\n\nFor Cookies-By-Category policies, calling showBanner will cause the modal for selecting each category to reappear, as shown in the video below:\n\nUI Examples\n\nThis functionality can be made available to visitors in the form of buttons/links on your website that they can use to re-open the banner and edit their preferences. The following are examples with code.\n\nButton\n\nA button, often placed in the website footer.\n\nFixed position button\n\nA button with fixed positioning on the bottom of the screen. This kind of button has the advantage of being readily available and easy to find, while being somewhat obtrusive UX.\n\nLink\n\nA link or highlighted text.\n\nBlock third party cookies manually\n\nThe HubSpot Consent Banner supports manual handling of third party tracking technologies and cookies. It's recommended to use manual handling if you have a complicated website and/or a dedicated web developer. If auto-blocking does not work for your site, manual blocking is also a good option.\n\nManual blocking is implemented through the Cookie Banner Consent Listener API. This API is used to prevent tracking technologies from running until they have consent. To get started, take a look at the examples below.\n\nGeneral usage\n\nIf you want to install a tracking script onto your website to display targeted ads to visitors. You could use something like the below:\n\n<script src=”https://my.advertisement.script.com/ads”></script>\n\nWhen this script is pasted into the head HTML of a page on a website it would run anytime someone visits that page, regardless of their consent status. Visitors will have cookies placed on their browser without consent.\n\nTo prevent the script from running without consent, you can use the HubSpot Cookie Banner Consent Listener API to install the script when the visitor has consented to its cookies. Consent listeners are functions that run whenever the visitor submits their consent. To use this functionality, a consent listener needs to be created that adds the script to the page if the visitor has consented to advertisement cookies.\n\nThis script will register the consent listener with the cookie banner. When consent to cookies is submitted, the consent listener will run, adding HubSpot's third party ads script to the page.\n\nExample: Google Tag\n\nGoogle Tag or gtag.js can be used to add Google Analytics. For example:\n\nTo load Google Analytics when analytics consent has been given, the gtag script needs to be added when consent is given:\n\nExample: HotJar\n\nHotJar is another example of analytics tracking. For example:\n\nHotJar is another example of analytics tracking. For example:\n\nTo ensure Hotjar runs when analytics consent is given, the consent listener can be added.\n\nThird-party cookie consent\n\nIn the section below, learn how to use a third party cookie consent banner to:\n\nDisable HubSpot cookie banner\n\nTo disable rendering of the HubSpot cookie banner, include the code below in a script near the top of your page’s head html. This will also disable any consent management.\n\nPlease note: this flag must be set before the cookie banner is loaded.\n\nSet consent state of the HubSpot cookie banner\n\nSet the consent value for all HubSpot, third party, or custom products integrated with the HubSpot cookie banner. This function takes an object specifying the consent state of the visitor, saves that value as the current consent state, and distributes that consent to all scripts with attached consent listeners. This value isn't saved in consent cookies managed by the cookie banner. Preserving consent state across sessions falls to the caller of this function.\n\nThe function accepts a consent object with the following fields:\n\nExample usage\n\nExample: Using a third-party cookie banner to control HubSpot cookies\n\nThe following code snippet and script provide an example of how to send a custom event whenever consent state changes. Note that the functionality that you want to implement for your specific use case may vary from the example code below. Consult any third-party documentation (e.g., Google’s introduction to user consent management) for more information on how to tailor behavior to your website’s needs.\n\nThe following script should be placed at the top of the head html of the page."
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/analytics-and-events/cookie-banner/google-consent-mode",
    "content": "Implement Google consent mode\n\nGoogle Consent Mode v2 is a framework designed to integrate website visitor consent preferences with Google's advertising and analytics tools. With it, websites can adjust how these tools behave based on the consent status of website visitors, particularly regarding cookies and data collection. When visitors don’t consent to cookies, with advanced consent mode, Google services can operate in a limited mode and collect basic interactions without breaching privacy expectations. With basic consent mode, without consent, cookielesss pings and basic interactions will not replace tracking.\n\nImplement Google consent mode v2 manually\n\nIf you use HubSpot's native Google Analytics 4 or Google Tag Manager integrations, learn how to support Google consent mode v2.\n\nYou will need to manually integrate Google consent mode v2 if either of the following scenarios are true:\n\nIntegrate Google consent mode v2 with Google Analytics 4\n\nFollow Google’s instructions for installing Google Analytics 4when installing Google Analytics. Remember to replace G-XXXXXXXXXX with your Google Measurement ID.\n\nIntegrate Google consent mode v2 with Google Tag Manager\n\nFollow Google’s instructions for installing Google Tag Managerwhen installing Google Tag Manager. Remember to replace G-XXXXXXXXXX with your Google Measurement ID.\n\nImplement advanced Google consent mode v2 manually\n\nThis article provides an overview of how Advanced Google Consent Mode works, and how to implement it for Google Tag Manager or Google Analytics 4 using the HubSpot Cookie Banner. Note that this article assumes you’re familiar with writing HTML and JavaScript.\n\nWhen you implement consent mode on your website or app in advanced mode, Google tags are always loaded. Default consent is set (typically to denied) using the Consent Mode API. While consent is denied, Google tags will send cookieless pings. When the user interacts with the HubSpot cookie banner, the consent state updates. If consent is granted, Google tags send full measurement data.\n\nTo implement advanced consent mode via the HubSpot cookie banner, you must write a consent mode configuration script and install it along with the base installation code. This script will:\n\nLearn more about the types of Google consent mode.\n\nIntegrate Google consent mode v2 with Google Tag Manager\n\nThe example code below provides one possible way you could implement advanced consent mode on your website. The code consists of two parts:\n\n1. Setting up the default consent state: this snippet configures the default consent state for consent mode. Each consent category can be set to granted or denied. The default can also be targeted to specific regions (identified by their region code). Learn more about setting up consent mode. Make sure to configure the categories used and the regions based on your specific requirements.\n\n2. Updating consent when the user interacts with your cookie consent banner: this snippet sends consent updates from the HubSpot cookie banner to Google. This code extracts the consent state from the HubSpot cookie banner consent object and updates the corresponding categories in consent mode. These mappings are a suggestion, so make sure to update them to include the categories you require. Learn more about the categories available for the HubSpot cookie bannerand consent mode categories.\n\nPlease note: The code below is a recommendation and may not meet your regulatory requirements. Make sure to review and update the code to ensure it meets your needs.\n\nImplement advanced Google consent mode for Google Analytics 4\n\nFirst, you need to find the installation code for Google Analytics 4 in your Google Analytics account.\n\nThis code may change as Google updates its product. Typically, you must paste two scripts in the page’s <head> html (similar to the scripts below). If copying these scripts, replace MEASUREMENT_ID with your measurement ID.\n\nTo implement Advanced Consent Mode, add your consent mode configuration script before the installation code in your <head> html.\n\nImplement advanced Google consent mode for Google Tag Manager\n\nThe base installation code for Google Tag Manager can be found in your Google Tag Manager account.\n\nThe Google Tag Manager installation code can change as Google updates its products. Typically, you must install Google Tag Manager with two snippets. If copying these scripts, replace CONTAINER_ID with your container ID.\n\n1. Head code: Google instructs that this code be pasted into the <head> tag.\n\n2. Body code: Google instructs that this code be pasted into the <body> tag.\n\nSupport basic consent mode for tags without built-in consent checks\n\nIf a tag does not feature built-in consent checks, it is not compatible with advanced consent mode, and you must use basic consent mode instead. Under basic consent mode, tags only fire when they have consent. If a tag does not have consent, it is blocked. You can implement this functionality using Google Tag Manager’s Additional Consent Checks feature, which allows you to specify consent mode categories that must be granted for the tag to fire.\n\nThis implementation requires you to:\n\nThe Cookie Banner Consent Listener API, allows scripts running on a webpage to receive consent updates from the Cookie Banner. Learn more about how to get privacy consent status."
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/analytics-and-events/tracking-code",
    "content": "Tracking code API overview\n\nThis page has been updated for working with new custom behavioral events. For legacy custom events, please see the legacy documentation.\n\nIn addition to tracking page views, the HubSpot tracking code allows you to identify visitors, track events, and manually track page views without reloading the page. The tracking code API allows you to dynamically create events and track event data in HubSpot.\n\nIf your site uses the privacy consent banner, learn how to manage the cookies that are added to a visitor's browser with the cookie banner API.\n\nFunction calls are pushed into the _hsq array. For example:\n\nIn this article, learn about how you can add functions to the tracking code to identify visitors, track page views, send event data, and more.\n\nIdentifying contacts\n\nThe HubSpot analytics tool identifies contacts using two pieces of data:\n\nWhen the HubSpot tracking code tracks a visitor's action, such as a page view, it automatically associates that action with the visitor's usertoken. When you use the tracking code API to identify a visitor by email address, the analytics system will tie that email to the usertoken, allowing HubSpot to update an existing contact record or create a new one. Analytics data associated with the usertoken, such as page views and original source, will then appear on the contact record.\n\nWhen you know a visitor's identity (e.g., email address), you can use the identify function to set identities in the tracker. You can then send the identity to HubSpot by making a separate trackPageView or trackCustomBehavioralEvent call.\n\nWhen using this function keep in mind:\n\nIdentify a visitor\n\nPlease note: if your account was created before September 8, 2021 and is set up to allow contact properties to be updated through the tracking code, you can also include other contact properties to be updated with this function. For accounts created after September 8, 2021, this functionality is deprecated.\n\n_hsq.push([\"identify\", { {identity details} }]);\n\nUse this endpoint to identify website visitors and contacts.\n\nTo manually identify a visitor or contact, you can use either an email address or unique external ID:\n\nPlease note: this external ID can only be used with the HubSpot tracking code. This ID cannot be used to retrieve or update any records through any other HubSpot tools or APIs. If you know the visitor’s email address, it’s recommended to use that as the unique identifier. Similarly, you should only identify a visitor with by ID when you don’t know their email address.\n\nIf you’ve previously sent analytics data to HubSpot using the visitor’s ID only, you can later include both the ID and an email address to associate the data from that ID with a contact. The existing contact will then be updated or created if no contact currently exists.\n\nWhen using this function, keep the following in mind:\n\nTracking in single-page applications\n\nThe HubSpot tracking code will automatically record a page view when the code is first loaded, but you can also manually track page views in a single-page application without reloading the tracking code. You can use the setPath and trackPageView functions to update and track the current page. For example:\n\nSet page path\n\nhsq.push(['setPath', { path string }])\n\nUpdate the path of the current page stored in the tracker. This function should be used by single-page applications to update the current page whenever a page is loaded. After using this function to update the path, you'll need to call the trackPageView function to track the view of the current page.\n\nSingle-page applications should push a setPath call into _hsq before the tracking code loads to set the URL that gets tracked for the first page view. See the track page view section below for an example.\n\nWhen calling setPath, you'll include the path of the current page. The set path will be treated as relative to the current domain being viewed. The path should always start with a slash. If your URL also contains parameters, these will need to be included in the path as well. View the above code for examples.\n\nWhen using this function, keep the following in mind:\n\nTrack page view\n\n_hsq.push(['trackPageView']);\n\nTrack the page view for the current page. This function is automatically called when the tracking code is loaded on a page, but you can manually call this function to track subsequent views in a single page application.\n\nPlease note: calling this function manually before or during the initial page load could lead to duplicate views being tracked.\n\nThis function does not support any arguments. The page title tracked will be the current value of document.title.\n\nThe URL that gets tracked is based on one of the following:\n\nWhen using this function, keep in mind the following:\n\nPrivacy policy in tracking\n\nIf your site has a privacy consent banner you can use functions to check and manage cookies placed into the visitor's browser. Learn more about managing privacy consent banner cookies.\n\nGet cross-domain linking parameters\n\n_hsq.push(['addIdentityListener', function(hstc, hssc, hsfp) {}])\n\nThe HubSpot tracking code can be used across multiple sites with separate domains. This function will allow you to get the query parameters required to create links that will allow you to track your visitors across those separate domains. These query parameters are used by the HubSpot tracking code to identify a visitor across domains by ensuring that the separate cookies for the separate domains are merged to a single tracked visitor. You can also use cross-domain query parameters in links that are dynamically added to the page after the tracking code is loaded.\n\nCross-domain links are only needed when linking to a distinct domain (e.g., domain-one.com and domain-two.com) that is also being tracked for a single HubSpot account. You do not need cross-domain link parameters when tracking visits between subdomains (e.g., www.domain-one.com and blog.domain-one.com).\n\nReapply analytics event handlers\n\n_hsq.push(['refreshPageHandlers'])\n\nThis function reapplies any analytics event handlers that are set up in the analytics settings for the HubSpot account.\n\nThis would include reapplying any clicked element events that have been set up.\n\nYou can use this function to automatically reapply click handlers when content on the page is updated, such as updating a section of content or displaying a modal window on the page.\n\nPlease note: this functionality is automatically triggered as part of the setPath function, so you'll only need to use this function when updating the content without updating the tracked page URL.\n\nTracking custom behavioral events (Marketing Hub Enterprise only)\n\nUsing custom behavioral events, you can tie event completions to contacts records and populate event properties with metadata about the event. To retrieve custom behavioral events, use the web analytics API.\n\nThrough the API, events can be triggered using the event's internal name, which is assigned automatically when you create the event. You can find an event's internal name either in HubSpot or by using the events API. Learn how to find the internal name for an event.\n\nThere are three types of events that you can create in HubSpot:\n\nFor each event type, HubSpot includes a set of standard properties that can capture certain metadata at the time of completion, including UTM parameters or device and operating system metadata.\n\nSince this function works alongside HubSpot's analytics tracking, any events triggered through the JavaScript API will automatically be associated with the visitor's hubspotutk cookie, so the event would automatically be tied to the contact associated with that usertoken.\n\ntrackCustomBehavioralEvent\n\n_hsq.push([\"trackCustomBehavioralEvent\", { {event details} }]);\n\nUse this function to track an event using JavaScript and HubSpot's tracking code. You can use events to track specific activities completed by visitors on your site. Tracked events can show up in contacts' timelines.\n\nCustomize your tracking code to send custom behavioral event data\n\nBy default, HubSpot creates a set of properties for each event you create. For clicked element or visited URL events, HubSpot will auto-populate some of those properties with data. But you can also customize your tracking code to send data to the event's properties.\n\nThen, in the properties table, click the name of the event property that you want to send data to.\n\nIn the right panel, click the </> source icon to view the property's internal name. You'll use this name when customizing the tracking code.\n\nNow that you have your event and event property data, click the Settings icon to navigate to your account settings. Then, in the left sidebar menu, navigate to Tracking & Analytics > Tracking code.\n\nClick Customize javascript.\n\nIn the upper right, click Add custom JavaScript.\n\nIn the right sidebar, enter a name for your custom JavaScript, then enter the JavaScript, including the trackCustomBehavioralEvent function. This JavaScript be executed after the tracking code loads for a page.\n\nFor example, if your event tracks a course registration when a button with the HTML ID register_for_econ101 is clicked, your JavaScript might look like the following:"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/app-management/feature-flags",
    "content": "Feature flags\n\nIntroduction\n\nUse the feature flag API to control availability of your app cards in installed customer accounts. Currently supports a single App Flag: hs-release-app-cards. Attempts to specify other App Flags will receive an error. Requests must be authenticated with your Developer API key, which you'll include through a `?hapikey=` parameter.\n\nUse cases for this API\n\nSelectively enable accounts for testing or to control the rollout of app cards to your customers.\n\nPortal Flag States\n\nGet a single account's App Card Release flag state\n\nRetrieve an individual account's App Card Release flag state setting.\n\nBatch delete account-level App Card Release flag state\n\nDelete the hs-release-app-cards account flag state for multiple HubSpot accounts at once. Use this endpoint to manage flag exposure for groups of HubSpot accounts.\n\nBatch set account App Card Release flag state\n\nSet the App Card Release portal flag state for multiple HubSpot accounts at once. Use this endpoint to manage flag exposure for groups of HubSpot accounts.\n\nUpdate an account's App Card Release flag state\n\nSpecify an account-level flag state for a specific HubSpot account and the hs-release-app-cards flag.\n\nDelete an account's App Card Release flag state\n\nDelete a Portal Flag State for a specific HubSpot account. No request body is included.\n\nApp Flags\n\nGet account Portal Flag State for the App Card Release flag\n\nRetrieve a list of HubSpot accounts with an account-specific flag setting for the App Card Release flag for your app. No request body is included.\n\nGet your app's App Card Release feature flag\n\nRetrieve an app's hs-release-app-cards feature flag. No request body is included.\n\nUpdate your app's App Card Release feature flag\n\nUpdate an app's feature flag\n\nDelete your app's App Card Release feature flag\n\nDelete your app's App Card Release feature flag after all accounts have been migrated.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/app-management/oauth",
    "content": "OAuth\n\nThis is a stable API but uses an older format. This means some functionality may not be available (for example test calls and Postman integration).\n\nInitiate an integration with OAuth 2.0\n\nInitiating OAuth access is the first step towards allowing users to install your app in their HubSpot account(s).\n\nInitiating OAuth access\n\nBefore you can initiate an OAuth connection, you have to create a HubSpot app. The client ID that you'll need to include in the authorization URL can be found in the app settings. Navigate to these settings by clicking the name of your app from your developer account dashboard.\n\nTo initiate OAuth access, you'll need to send HubSpot users to your authorization URL. Use the query parameters detailed below to identify your app and outline its required scopes to users who land on the authorization page.\n\nUsers must be signed into HubSpot to grant your app access. Any user that isn't logged into HubSpot will be directed to a login screen before being directed back to the authorization page. The authorization screen will show the details for your app and the permissions being requested (based on the scopes you include in the URL). Users will have the option to select the Hub ID for the account they wish to grant access to.\n\nAfter the user grants access, they will be redirected to the specified redirect_uri. A code query parameter will be appended to the URL, which you'll use to get an access token from HubSpot.\n\nRequirements\n\nParameters\n\nThe client ID from your app settings.\n\nThe URL visitors will be redirected to after granting access to your app. Please note: For security reasons, this URL must use https in production. When testing using localhost, http can be used. Also, you must use a domain, as IP addresses are not supported.\n\nA space-separated set of scopes that your app will need access to. Scopes listed in this parameter will be treated as required for your app, and the user will see an error if they select an account that does not have access to the scope you've included.Any scopes that you have checked in your app settings will be treated as required scopes, and you'll need to include any selected scopes in this parameter or the authorization page will display an error.See below for more details about which APIs are accessed by specific scopes.\n\nA space separated set of scopes that are optional for your app. Optional scopes will be automatically dropped from the authorization request if the user selects a HubSpot account that does not have access to that tool (such as requesting the social scope on a CRM only portal). If you're using optional scopes, you will need to check the access token or refresh token to see which scopes were granted. See the table below for more details about scopes.\n\nA string value that can be used to maintain the state of the user when they are redirected back to your application. If this parameter is included in the authorization URL, the value will be included in a state query parameter when the user is directed to the redirect_uri.\n\nResponse\n\nShow more\n\nGet Information for OAuth 2.0 Access Token\n\nGet the meta data for an access token. This can be used to get the email address of the HubSpot user that the token was created for, as well as the Hub ID that the token is associated with.\n\nNote: HubSpot access tokens will fluctuate in size as we change the information that is encoded the tokens. We recommend allowing for tokens to be up to 300 characters to account for any changes we may make.\n\nRequirements\n\nParameters\n\nThe access token that you want to get the information for.\n\nResponse\n\nShow more\n\nGet Information for OAuth 2.0 Refresh Token\n\nGet the meta data for a refresh token. This can be used to get the email address of the HubSpot user that the token was created for, as well as the Hub ID that the token is associated with.\n\nNote: For a more elaborate walkthrough on initiating Oauth, visit this link.\n\nRequirements\n\nParameters\n\nThe refresh token that you want to get the information for.\n\nResponse\n\nShow more\n\nGet OAuth 2.0 access and refresh tokens\n\nUse the code you get after a user authorizes your app to get an access token and refresh token. The access token will be used to authenticate requests that your app makes. Access tokens are short lived, so you can use the refresh token to get a new access token when the current access token expires.\n\nNote: HubSpot access tokens will fluctuate in size as we change the information that is encoded. We recommend allowing for tokens to be up to 300 characters to account for any changes.\n\nRequirements\n\nParameters\n\nThe grant type of the request, must be authorization_code for the initial request to get the access and refresh tokens.\n\nThe Client ID of your app.\n\nThe Client Secret of your app.\n\nThe redirect URI that was used when the user authorized your app. This must exactly match the redirect_uri used when initiating the OAuth 2.0 connection.\n\nThe code parameter returned to your redirect URI when the user authorized your app.\n\nResponse\n\nShow more\n\nRefresh OAuth 2.0 access token\n\nUse a previously obtained refresh token to generate a new access token. Access tokens are short lived; you can check the expires_in parameter when generating an access token to determine its lifetime (in seconds). If you need offline access to HubSpot data, store the refresh token you get when initiating your OAuth integration and use it to generate a new access token once the initial one expires.\n\nNote: HubSpot access tokens will fluctuate in size as we change the information that is encoded the tokens. We recommend allowing for tokens to be up to 300 characters to account for any changes we may make.\n\nRequirements\n\nParameters\n\nThe grant type of the request, must be refresh_token when refreshing an access token.\n\nThe client ID of your app.\n\nThe client secret of your app.\n\nThe refresh token obtained when initially authenticating your OAuth integration.\n\nResponse\n\nShow more\n\nDelete OAuth 2.0 Refresh Token\n\nDeletes a refresh token. You can use this to delete your refresh token if a user uninstalls your app.\n\nNote: This will only delete the refresh token. Access tokens generated with the refresh token will not be affected.\n\nNote: This will not uninstall an application from a HubSpot account or inhibit data syncing between an account and a connected application.\n\nRequirements\n\nParameters\n\nThe refresh token that you want to delete.\n\nResponse\n\nShow more"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/app-management/webhooks",
    "content": "Webhooks\n\nIntroduction\n\nThe Webhooks API allows you to subscribe to events happening in a HubSpot account with your integration installed. Rather than making an API call when an event happens in a connected account, HubSpot can send an HTTP request to an endpoint you configure.\n\nUse cases for this API\n\nYou're building a custom integration that syncs contact data with HubSpot and you need to programmatically determine when certain fields are updated in your HubSpot account.\n\nSettings\n\nRead webhook settings\n\nRetrieve the webhook settings for the specified app, including the webhook’s target URL, throttle configuration, and create/update date.\n\nDelete webhook settings\n\nUpdate webhook settings for the specified app.\n\nDelete webhook settings\n\nDelete the webhook settings for the specified app. Event subscriptions will not be deleted, but will be paused until another webhook is created.\n\nSubscriptions\n\nRead an event subscription\n\nRetrieve a specific event subscription by ID.\n\nRead event subscriptions\n\nRetrieve event subscriptions for the specified app.\n\nBatch create event subscriptions\n\nBatch create event subscriptions for the specified app.\n\nCreate an event subscription\n\nCreate new event subscription for the specified app.\n\nUpdate an event subscription\n\nUpdate an existing event subscription by ID.\n\nDelete event subscription\n\nDelete an existing event subscription by ID.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/automation/create-manage-workflows",
    "content": "Create & manage workflows\n\nFlows\n\nFetch all details for a single flow.\n\nFetch the list of all flows in a portal.\n\nThis allows paging through all flows visible for a portal.\n\nCreate a new flow\n\nDelete a single flow.\n\nThis will fully delete a flow. The flow cannot be restored via the API. If you need to restore an accidentally deleted flow, you will need to contact support.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/automation/custom-workflow-actions",
    "content": "Custom workflow actions\n\nIntroduction\n\nUse the automation API to define custom actions in the HubSpot workflows tool, which allows users in your account to integrate with external services as they build out a HubSpot workflow.\n\nUse cases for this API\n\nYou want to empower other users in your account to automate specialized parts of their day-to-day processes (e.g., creating highly customized quotes based on the data from an enrolled contact and their associations).\n\nCallbacks\n\nCompletes a batch of callbacks\n\nCompletes a single callback\n\nDefinitions\n\nGet extension definition by Id\n\nGet paged extension definitions\n\nCreate a new extension definition\n\nPatch an existing extension definition\n\nArchive an extension definition\n\nFunctions\n\nGet a function for a given definition\n\nGet all functions by a type for a given definition\n\nGet all functions for a given definition\n\nInsert a function for a definition\n\nInsert a function for a definition\n\nArchive a function for a definition\n\nDelete a function for a definition\n\nRevisions\n\nGet all revisions for a given definition\n\nGets a revision for a given definition by revision id\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/automation/custom-code-actions",
    "content": "Custom code workflow actions\n\nSupported products\n\nIn workflows, use the Custom code action to write and execute JavaScript or Python (in beta). With custom code actions, you can extend workflow functionality within and outside of HubSpot. To see examples of common custom code actions, view HubSpot's Programmable Automation Use Cases.\n\nCustom code actions support JavaScript using the Node.js runtime framework. If you're using Python for your custom code action, the custom code action will use Python runtime framework. When an action executes, the runtime compute is managed through a serverless function by HubSpot and AWS Lambda.\n\nIf you encounter any general issues implementing your custom code action, you can reach out to HubSpot support. However, if you're facing any issues with your written custom code, it's recommended to search and post on the HubSpot Developer's Forum to get help with troubleshooting your code.\n\nNode.js supported libraries\n\nIf you're using Node.js, the following libraries are available for use within the code action. These libraries can be loaded using the normal require() function at the top of your code.\n\nPlease note: the v4 Associations API is supported in Version 9.0.0 or later of the NodeJS HubSpot Client and in Version 8 of the NodeJS HubSpot Client.\n\nPython supported libraries\n\nIf you're using Python, you can load the following libraries with an import statement at the top of your code. The import statement should be formatted as from [libraryname] import [item], such as from redis.client import redis.\n\nIf you're using anything from the standard library, you can use import, such as import os.\n\nGet started\n\nUse the code samples below to begin using custom code workflow actions.\n\nCode samples\n\nCreate a custom code action\n\nTo add a custom code action to a workflow:\n\nPlease note: the code field will not display lint errors when using Python.\n\nWhen building custom code actions, keep the following in mind:\n\nThe event object will contain the following data:\n\nTest the action\n\nWhen adding a custom code action to a workflow, you can test the action to ensure that your code runs as expected before turning the workflow on.\n\nWhen testing a custom code action, you'll start by selecting a record to test the code with, then run the code. This test will run only the code in your custom action, not any of the other actions in the workflow. When the code is finished running, you'll be able to view the code outputs and the log of your test.\n\nPlease note: when testing your custom code, the code will run and any changes will apply to the selected test record. It's recommended to create a dedicated test record if you want to avoid updating your live records.\n\nTo test a custom code action:\n\nIn the workflow timeline, click the custom code action.\n\nAt the bottom of the right sidebar, click Test action to expand the testing section.\n\nSelect a record to test your code with by clicking the [Object] dropdown menu, then selecting a record.\n\nIf you're using previously formatted property values in the workflow, enter a test value for the formatted data.\n\nTo run the code, click Test.\n\nIn the dialog box, confirm that you want to test your code against the selected record by clicking Test.\n\nOnce your code is done running, the sidebar will display the results of your test:\n\nStatus: the success or failure status of your custom code action.\n\nData outputs: the values that resulted for your defined data outputs. An alert will display next to any outputs that the code generated which weren't defined either in the Data outputs section or in the code editor. You'll need to add those outputs in order to use them later in the workflow.\n\nLogs: information about the test itself, such as how much memory the action took to execute and the total runtime.\n\nTo update your custom code action, click Create action to expand the action editor. Continue to update and test your code as needed.\n\nWhen you're done testing the action, click Save to save your changes.\n\nSecrets\n\nThere are times you will want your code to reference something that shouldn't be widely shared. Most often, this is a means of authentication, like a private app access token. You can manage the secrets your function has access to directly in the workflow action definition. When using multiple secrets within a custom code, the total length of all secret values must not exceed 1000 characters.\n\nOnce added, the secrets will be available as environment variables, which you can access in the custom code, as shown below:\n\nAdd HubSpot properties to your custom code\n\nAt times, you may need to fetch object properties in your custom code action. Rather than using HubSpot's APIs, you can add these properties directly in the workflow action definition. Add properties and set property names to reference properties in your code. You can add up to 50 properties in each custom code action.\n\nOnce added, the property can be referenced in the custom code.\n\nLogging\n\nAn important tool for developers is ability to print outputs from their code. It helps you debug issues and provide better support for your end users. To see the output of the logs, you can find them in the \"History\" tab of the workflow.\n\nHow to Define Outputs\n\nIn the function, define the output fields you want to use later in the workflow. Then, in the right sidebar, select the data output type (e.g., number, string, boolean, datetime, enum, date phone number) and input the field you want to output.\n\nThe output fields should be part of a json object formatted accordingly, depending on the language used:\n\nYou can then use the output from your code action as in input to the Copy property value action. This removes the need to make another API call to store the value as a property on your object.\n\nDo take note of the following when defining your output:\n\ncurrentDate.setUTCHours(0,0,0,0)\n\nLimitations\n\nCustom code actions must finish running within 20 seconds and can only use up to 128 MB of memory. Exceeding either of these limits will result in an error.\n\nRetries\n\nYou may need to fetch object properties using the HubSpot API or to call other HubSpot API endpoints in your custom code action. Like any other API call, you'll still need to comply with HubSpot API rate limits.\n\nPlease note: if the call fails due to a rate limiting error, or a 429 or 5XX error from axios or @hubspot/api-client, HubSpot will reattempt to execute your action for up to three days, starting one minute after failure. Subsequent failures will be retried at increasing intervals, with a maximum gap of eight hours between tries.\n\nCaveats\n\nIf you're using Node.js for your custom code, take note of the following caveats:\n\nIf you're using Python for your custom code, take note of the following caveats:"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/automation/sequences",
    "content": "Sequences\n\nIntroduction\n\nUse the Sequences API to Get a list of sequences get a specific sequence, enroll a contact in a sequence, and view a contact’s enrollment status.\n\nUse cases for this API\n\nYou need to enroll them in a HubSpot sequence using an app you designed to maintain a list of contacts.\n\nPublic_Enrollments\n\n/automation/v4/sequences/enrollments/contact/{contactId}\n\n/automation/v4/sequences/enrollments\n\nPublic_Sequences\n\n/automation/v4/sequences/\n\n/automation/v4/sequences/{sequenceId}\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/cms/blogs/blog-details",
    "content": "Blog details\n\nThis is a stable API but uses an older format. This means some functionality may not be available (for example test calls and Postman integration).\n\nIntroduction\n\nUse the blogs API to retrieve information about the blogs in a HubSpot account.\n\nUse cases for this API\n\nReview revision history for one of the blogs in your HubSpot account to understand when certain changes were made.\n\nList blogs\n\nList all of the blogs for an account. Supports paging and filtering.\n\nIf a parameter supports a filter type of 'gt', that means you can append a double underscore to the parameter name to find all items greater than the specified value. For example, the following query will find all blogs created after 5/1/2015: https://api.hubapi.com/content/api/v2/blogs?created__gt=1430452800000\n\nRequirements\n\nParameters\n\nThe number of items to return. Defaults to 20\n\nThe id of a topic you wish to filter blog posts by. Topic IDs can be found using the topics endpoint\n\nThe offset set to start returning rows from. Defaults to 0.\n\nexact, gt, gte - When the post was deleted, in milliseconds since the epoch. Zero if the blog post was never deleted. Use a DELETE request to delete the post, do not set this directly\n\nexact, range, gt, gte, lt, lte - When the post was first created, in milliseconds since the epoch\n\nexact, in - The internal name of the blog\n\nResponse\n\nShow more\n\nJSON Fields returned in the response\n\nShow more\n\nGet a blog by ID\n\nGet the details for a specific blog.\n\nRequirements\n\nParameters\n\nThe ID of the blog to get\n\nResponse\n\nShow more\n\nJSON Fields returned in the response\n\nShow more\n\nList previous versions of the blog\n\nGet the previous revisions of the settings for a specific blog.\n\nRequirements\n\nParameters\n\nThe ID of the blog to get\n\nResponse\n\nShow more\n\nJSON Fields returned in the response\n\nShow more\n\nGet the previous version of the blog\n\nGet a specific revision of the settings for a blog. Version id is the id of the version from the list previous versions endpoint.\n\nRequirements\n\nParameters\n\nUnique identifier for a particular blog.\n\nIdentifier of the version to look up.\n\nResponse\n\nShow more\n\nJSON Fields returned in the response\n\nShow more"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/cms/blogs/blog-authors",
    "content": "Blog authors\n\nIntroduction\n\nUse the blog authors API to manage information about blog post authors.\n\nUse cases for this API\n\nAfter hiring a new blog writer, you need to create a new blog author profile for them so that readers can learn more about the author on each of their posts.\n\nBlog Authors\n\nGet all Blog Authors\n\nGet the list of blog authors. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits.\n\nRetrieve a Blog Author\n\nRetrieve the Blog Author object identified by the id in the path.\n\nAttach a Blog Author to a multi-language group\n\nAttach a Blog Author to a multi-language group.\n\nCreate a batch of Blog Authors\n\nCreate the Blog Author objects detailed in the request body.\n\nCreate a new Blog Author\n\nCreate a new Blog Author.\n\nCreate a new language variation\n\nCreate a new language variation from an existing Blog Author.\n\nDelete a batch of Blog Authors\n\nDelete the Blog Author objects identified in the request body.\n\nDetach a Blog Author from a multi-language group\n\nDetach a Blog Author from a multi-language group.\n\nRetrieve a batch of Blog Authors\n\nRetrieve the Blog Author objects identified in the request body.\n\nUpdate a batch of Blog Authors\n\nUpdate the Blog Author objects identified in the request body.\n\nUpdate languages of multi-language group\n\nExplicitly set new languages for each Blog Author in a multi-language group.\n\nSet a new primary language\n\nSet a Blog Author as the primary language of a multi-language group.\n\nUpdate a Blog Author\n\nSparse updates a single Blog Author object identified by the id in the path.\nAll the column values need not be specified. Only the that need to be modified can be specified.\n\nDelete a Blog Author\n\nDelete the Blog Author object identified by the id in the path.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/cms/blogs/blog-posts",
    "content": "Blog posts\n\nIntroduction\n\nUse the blog posts API to create, manage, and publish blog posts on your website.\n\nUse cases for this API\n\nRetrieve all blog posts created this year as a part of a content audit.\n\nBasic\n\nGet all posts\n\nRetrieve all blog posts, with paging and filtering options. This method would be useful for an integration that ingests posts and suggests edits.\n\nRetrieve a blog post\n\nRetrieve a blog post by the post ID.\n\nRetrieve a previous version of a blog post\n\nRetrieve a previous version of a blog post.\n\nRetrieve the full draft version of the Blog Post\n\nRetrieve the full draft version of a blog post.\n\nRetrieves all previous versions of a post\n\nRetrieve all the previous versions of a blog post.\n\nClone a blog post\n\nClone a blog post, making a copy of it in a new blog post.\n\nCreate a new post\n\nCreate a new blog post, specifying its content in the request body.\n\nPublish blog post draft\n\nPublish the draft version of the blog post, sending its content to the live page.\n\nReset post draft to the live version\n\nDiscard all drafted content, resetting the draft to contain the content in the currently published version.\n\nRestore a draft to a previous version\n\nTakes a specified version of a blog post, sets it as the new draft version of the blog post.\n\nRestore a previous version\n\nRestores a blog post to one of its previous versions.\n\nSchedule a post to be published\n\nSchedule a blog post to be published at a specified time.\n\nUpdate a post\n\nPartially updates a single blog post by ID. You only need to specify the values that you want to update.\n\nUpdate the draft of a post\n\nPartially updates the draft version of a single blog post by ID. You only need to specify the values that you want to update.\n\nDelete a blog post\n\nDelete a blog post by ID.\n\nBatch\n\nCreate a batch of blog posts\n\nCreate a batch of blog posts, specifying their content in the request body.\n\nDelete a batch of blog posts\n\nDelete a blog post by ID.\nNote: This is not the same as the in-app archive function. To perform a dashboard archive send an normal update with the archivedInDashboard field set to true.\n\nRetrieve a batch of Blog Posts\n\nRetrieve a batch of blog posts by ID. identified in the request body.\n\nUpdate a batch of Blog Posts\n\nUpdate a batch of blog posts.\n\nMulti-language\n\nAttach post to a multi-language group\n\nAttach a blog post to a multi-language group.\n\nCreate a language variation\n\nCreate a new language variation from an existing blog post\n\nDetach post from a multi-language group\n\nDetach a blog post from a multi-language group.\n\nUpdate languages of multi-language group\n\nExplicitly set new languages for each post in a multi-language group.\n\nSet a new primary language\n\nSet the primary language of a multi-language group to the language of the provided post (specified as an ID in the request body)\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/cms/blogs/blog-tags",
    "content": "Blog tags\n\nIntroduction\n\nUse the blog tags API to create and manage available blog post tags for easy sorting and filtering on your site.\n\nUse cases for this API\n\nRetrieve all blog tags as a part of a content audit, then update specific tags to support an upcoming company rebrand.\n\nBlog Tags\n\nGet all Blog Tags\n\nGet the list of blog tags. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits.\n\nRetrieve a Blog Tag\n\nRetrieve the Blog Tag object identified by the id in the path.\n\nAttach a Blog Tag to a multi-language group\n\nAttach a Blog Tag to a multi-language group.\n\nCreate a batch of Blog Tags\n\nCreate the Blog Tag objects detailed in the request body.\n\nCreate a new Blog Tag\n\nCreate a new Blog Tag.\n\nCreate a new language variation\n\nCreate a new language variation from an existing Blog Tag\n\nDelete a batch of Blog Tags\n\nDelete the Blog Tag objects identified in the request body.\n\nDetach a Blog Tag from a multi-language group\n\nDetach a Blog Tag from a multi-language group.\n\nRetrieve a batch of Blog Tags\n\nRetrieve the Blog Tag objects identified in the request body.\n\nUpdate a batch of Blog Tags\n\nUpdate the Blog Tag objects identified in the request body.\n\nUpdate languages of multi-language group\n\nExplicitly set new languages for each Blog Tag in a multi-language group.\n\nSet a new primary language\n\nSet a Blog Tag as the primary language of a multi-language group.\n\nUpdate a Blog Tag\n\nSparse updates a single Blog Tag object identified by the id in the path.\nAll the column values need not be specified. Only the that need to be modified can be specified.\n\nDelete a Blog Tag\n\nDelete the Blog Tag object identified by the id in the path.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/cms/blogs/blog-topics",
    "content": "Blog topics\n\nThis is a stable API but uses an older format. This means some functionality may not be available (for example test calls and Postman integration).\n\nIntroduction\n\nUse the blog topics API to create and manage blog topics in a HubSpot account.\n\nUse cases for this API\n\nRetrieve all blog tags as a part of a content audit, then update and merge specific tags to support an upcoming company rebrand.\n\nList blog topics\n\nList all blog topics. Supports paging and filtering.\n\nSome parameters support \"range\" filters via double-underscored param suffixes, like __gt. If a parameter supports a filter type of 'gt', that means you can append a double-underscore and 'gt' to the parameter name to find all items greater than a specified value.\n\nFor example, the following query will find all items with the 'updated' time greater than 1364424600000: https://api.hubapi.com/blogs/v3/topics?created__gt=1364424600000\n\nRequirements\n\nParameters\n\nSearch for topics by id. Supports exact value matching and the 'in' range filter (e.g. id__in=348109009,348109019)\n\nSearch for topics by name. Supports exact value matching, 'contains' searching, and 'icontains' case-insensitive searching (e.g. name__contains=topic1)\n\nSearch for topics by slug. Supports exact value matching\n\nFilter results by creation date, in milliseconds since the epoch. Supports exact value matching and the following range filters: range, gt, gte, lt, lte\n\nThe maximum number of items to return. Defaults to 20.\n\nThe offset from the beginning of the result set from which to start returning results. Used for paging. Defaults to 0.\n\nUse the casing=snake parameter to change the API's casing for all query parameters (including those above) and JSON fields (below) to snake_case, rather than camelCase, which is the default. This option is provided for backwards-compatibility and ease of migration from Content v2 APIs, which used snake_case.\n\nResponse\n\nShow more\n\nJSON Fields returned in the response\n\nShow more\n\nSearch blog topics\n\nSearch for blog topics by various criteria. See the options below for details about filtering. Supports paging for the case where a large number of topics match the criteria.\n\nSome parameters support \"range\" filters via double-underscored param suffixes, like __gt. If a parameter supports a filter type of 'gt', that means you can append a double-underscore and 'gt' to the parameter name to find all items greater than a specified value.\n\nFor example, the following query will find all items with the 'updated' time greater than 1364424600000: https://api.hubapi.com/blogs/v3/topics/search?created__gt=1364424600000\n\nRequirements\n\nParameters\n\nSearch for topics by id. Supports exact value matching and the 'in' range filter (e.g. id__in=348109009,348109019)\n\nSearch for topics by name. Supports exact value matching, 'contains' searching, and 'icontains' case-insensitive searching (e.g. name__contains=topic1)\n\nSearch for topics by slug. Supports exact value matching\n\nFilter results by creation date, in milliseconds since the epoch. Supports exact value matching and the following range filters: range, gt, gte, lt, lte\n\nThe maximum number of items to return. Defaults to 100.\n\nThe offset from the beginning of the result set from which to start returning results. Used for paging. Defaults to 0.\n\nUse the casing=snake parameter to change the API's casing for all query parameters (including those above) and JSON fields (below) to snake_case, rather than camelCase, which is the default. This option is provided for backwards-compatibility and ease of migration from Content v2 APIs, which used snake_case.\n\nSearch for topics whose names or url slugs contain the given string.\n\nFilter topics by whether or not they are associated with any published blog posts (true or false).\n\nFilter topics by a blog they are used on (value is a blog ID).\n\nResponse\n\nShow more\n\nJSON Fields returned in the response\n\nShow more\n\nGet a blog topic by ID\n\nGet the details for a specific topic by its ID.\n\nRequirements\n\nParameters\n\nUnique identifier for a particular topic\n\nUse the casing=snake parameter to change the API's casing for returned JSON fields (below) to snake_case, rather than camelCase, which is the default. This option is provided for backwards-compatibility and ease of migration from Content v2 APIs, which used snake_case.\n\nResponse\n\nShow more\n\nJSON Fields returned in the response\n\nShow more\n\nCreate a new blog topic\n\nCreate a new blog topic.\n\nRequirements\n\nParameters\n\nUse the casing=snake parameter to change the API's casing for allowed JSON fields (below) to snake_case, rather than camelCase, which is the default. This option is provided for backwards-compatibility and ease of migration from Content v2 APIs, which used snake_case.\n\nThe topic name\n\nThe topic description\n\nResponse\n\nShow more\n\nGroup blog topics\n\nMerge multiple topics by ID into a single topic group.\n\nRequirements\n\nParameters\n\nUse the casing=snake parameter to change the API's casing for allowed JSON fields (below) to snake_case, rather than camelCase, which is the default. This option is provided for backwards-compatibility and ease of migration from Content v2 APIs, which used snake_case.\n\nThe new name of the combined topics\n\nThe List of topic ids to merge\n\nResponse\n\nShow more\n\nUpdate a blog topic\n\nUpdate an existing blog topic.\n\nRequirements\n\nParameters\n\nUnique identifier for a particular topic\n\nUse the casing=snake parameter to change the API's casing for returned JSON fields (below) to snake_case, rather than camelCase, which is the default. This option is provided for backwards-compatibility and ease of migration from Content v2 APIs, which used snake_case.\n\nThe topic name\n\nThe topic description\n\nResponse\n\nShow more\n\nDelete blog topic\n\nMarks a blog topic as deleted.\n\nRequirements\n\nParameters\n\nUnique identifier for the particular topic to delete\n\nResponse\n\nShow more"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/cms/blogs/blog-comments",
    "content": "Blog comments\n\nThis is a stable API but uses an older format. This means some functionality may not be available (for example test calls and Postman integration).\n\nIntroduction\n\nUse the blog comments API to create and manage blog comments, including restoring deleted comments.\n\nUse cases for this API\n\nYou want to build a system for automating the moderation of comments left on your company's blog.\n\nList comments\n\nList comments from your HubSpot blogs. Supports paging and filtering.\n\nRequirements\n\nParameters\n\nThe number of items to return. Defaults to 20\n\nThe offset set to start returning rows from. Defaults to 0.\n\nThe portal number associated with your api key/token\n\nComment state. Options are: APPROVED, SPAM, REJECTED, PENDING_MODERATION\n\nAllows you get comments for a specific blog post. Include contentId={post ID} to only get comments for that post.\n\nIf you want comments oldest to newest, supply 'reverse=true'\n\nMatches arbitrary text within a comment\n\nResponse\n\nShow more\n\nJSON Fields returned in the response\n\nShow more\n\nGet a blog comment by ID\n\nGet a specific comment by ID.\n\nRequirements\n\nParameters\n\nUnique identifier for a particular comment\n\nResponse\n\nShow more\n\nJSON Fields returned in the response\n\nShow more\n\nCreate a new comment\n\nCreate a new comment.\n\nThis API is considered content agnostic, meaning it may record data for more than a single type of object (a blog post or a landing page, etc.) Due to this difference, the API requires additional fields that may seem redundant if the API were only concerned with a single type.\n\nRequirements\n\nParameters\n\nThe full text of the comment\n\nThe id of the parent blog post\n\nThe ID of the blog that the post is a part of. You can get the blog ID through the Blog API\n\nThe email address of the blog post author\n\nThe name of the blog post author\n\nURL to the blog post\n\nTitle of the blog post\n\nThe email address of the comment author\n\nThe name of the comment author\n\nThe homepage of the comment author\n\nResponse\n\nShow more\n\nRestores a previously deleted comment\n\nRestore a prevously deleted comment.\n\nRequirements\n\nParameters\n\nUnique identifier for a particular comment\n\nResponse\n\nShow more\n\nDelete the comment\n\nMarks the Comment as deleted. The Comment can be restored later via a POST to the restore-deleted endpoint.\n\nRequirements\n\nParameters\n\nUnique identifier for a particular comment"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/cms/content-audit",
    "content": "Content audit\n\nIntroduction\n\nUse the content audit API to retrieve information about changes made to content objects, such as blog posts, website pages, and domains.\n\nUse cases for this API\n\nAfter noticing some recent changes to your website, including missing pages, use this API to see which user most recently modified and unpublished your website pages.\n\nAudit_Logs\n\nQuery audit logs\n\nReturns audit logs based on filters.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/cms/domains",
    "content": "Domains\n\nIntroduction\n\nUse the domain management API to return information about the domains connected to a HubSpot account. You can return data for all currently connected domains, or for a single domain by ID.\n\nUse cases for this API\n\nRetrieve all currently connected domains to see which sites are live in a given account.\n\nDomains\n\nGet a single domain\n\nReturns a single domains with the id specified.\n\nGet current domains\n\nReturns all existing domains that have been created. Results can be limited and filtered by creation or updated date.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/cms/hubdb",
    "content": "HubDB\n\nIntroduction\n\nUse the HubDB API to create and manage HubDB tables in the account, as well as import, retrieve, and manage individual table data.\n\nUse cases for this API\n\nStore inventory data in HubDB tables for both record keeping and generating dynamic pages for listing products on your website.\n\nTables\n\nExport a draft table\n\nExports the draft version of a table to CSV / EXCEL format.\n\nExport a published version of a table\n\nExports the published version of a table in a specified format.\n\nGet all published tables\n\nReturns the details for the published version of each table defined in an account, including column definitions.\n\nGet details for a draft table\n\nGet the details for the draft version of a specific HubDB table. This will include the definitions for the columns in the table and the number of rows in the table.\n\nGet details of a published table\n\nReturns the details for the published version of the specified table. This will include the definitions for the columns in the table and the number of rows in the table.\n\nNote: This endpoint can be accessed without any authentication if the table is set to be allowed for public access. To do so, you'll need to include the HubSpot account ID in a portalId query parameter.\n\nReturn all draft tables\n\nReturns the details for each draft table defined in the specified account, including column definitions.\n\nClone a table\n\nClone an existing HubDB table. The newName and newLabel of the new table can be sent as JSON in the request body. This will create the cloned table as a draft.\n\nCreate a new table\n\nCreates a new draft HubDB table given a JSON schema. The table name and label should be unique for each account.\n\nImport data into draft table\n\nImport the contents of a CSV file into an existing HubDB table. The data will always be imported into the draft version of the table. Use the /publish endpoint to push these changes to the published version.\nThis endpoint takes a multi-part POST request. The first part will be a set of JSON-formatted options for the import and you can specify this with the name as config.  The second part will be the CSV file you want to import and you can specify this with the name as file. Refer the overview section to check the details and format of the JSON-formatted options for the import.\n\nPublish a table from draft\n\nPublishes the table by copying the data and table schema changes from draft version to the published version, meaning any website pages using data from the table will be updated.\n\nReset a draft table\n\nReplaces the data in the draft version of the table with values from the published version. Any unpublished changes in the draft will be lost after this call is made.\n\nUnpublish a table\n\nUnpublishes the table, meaning any website pages using data from the table will not render any data.\n\nUpdate an existing table\n\nUpdate an existing HubDB table. You can use this endpoint to add or remove columns to the table as well as restore an archived table. Tables updated using the endpoint will only modify the draft verion of the table. Use the /publish endpoint to push all the changes to the published version. To restore a table, include the query parameter archived=true and \"archived\": false in the json body.\nNote: You need to include all the columns in the input when you are adding/removing/updating a column. If you do not include an already existing column in the request, it will be deleted.\n\nArchive a table\n\nArchive (soft delete) an existing HubDB table. This archives both the published and draft versions.\n\nRows\n\nGet a row from the draft table\n\nGet a single row by ID from a table's draft version.\n\nGet a table row\n\nGet a single row by ID from the published version of a table.\nNote: This endpoint can be accessed without any authentication, if the table is set to be allowed for public access.\n\nGet rows for a table\n\nReturns a set of rows in the published version of the specified table. Row results can be filtered and sorted. Filtering and sorting options will be sent as query parameters to the API request. For example, by adding the query parameters column1__gt=5&sort=-column1, API returns the rows with values for column column1 greater than 5 and in the descending order of column1 values. Refer to the overview section for detailed filtering and sorting options.\nNote: This endpoint can be accessed without any authentication, if the table is set to be allowed for public access.\n\nGet rows from draft table\n\nReturns rows in the draft version of the specified table. Row results can be filtered and sorted. Filtering and sorting options will be sent as query parameters to the API request. For example, by adding the query parameters column1__gt=5&sort=-column1, API returns the rows with values for column column1 greater than 5 and in the descending order of column1 values. Refer to the overview section for detailed filtering and sorting options.\n\nAdd a new row to a table\n\nAdd a new row to a HubDB table. New rows will be added to the draft version of the table. Use the /publish endpoint to push these changes to published version.\n\nClone a row\n\nClones a single row in the draft version of a table.\n\nReplaces an existing row\n\nReplace a single row in the draft version of a table. All column values must be specified. If a column has a value in the target table and this request doesn't define that value, it will be deleted.\nSee the \"Create a row\" endpoint for instructions on how to format the JSON row definitions.\n\nUpdates an existing row\n\nSparse updates a single row in the table's draft version.\nAll the column values need not be specified. Only the columns or fields that needs to be modified can be specified.\nSee the \"Create a row\" endpoint for instructions on how to format the JSON row definitions.\n\nPermanently deletes a row\n\nPermanently deletes a row from a table's draft version.\n\nRows Batch\n\nClone rows in batch\n\nClones rows in the draft version of the specified table, given a set of row ids. Maximum of 100 row ids per call.\n\nCreate rows in batch\n\nCreates rows in the draft version of the specified table, given an array of row objects. Maximum of 100 row object per call. See the overview section for more details with an example.\n\nGet a set of rows\n\nReturns rows in the published version of the specified table, given a set of row IDs.\nNote: This endpoint can be accessed without any authentication if the table is set to be allowed for public access.\n\nGet a set of rows from draft table\n\nReturns rows in the draft version of the specified table, given a set of row IDs.\n\nPermanently deletes rows\n\nPermanently deletes rows from the draft version of the table, given a set of row IDs. Maximum of 100 row IDs per call.\n\nReplace rows in batch in draft table\n\nReplaces multiple rows as a batch in the draft version of the table, with a maximum of 100 rows per call. See the endpoint PUT /tables/{tableIdOrName}/rows/{rowId}/draft for details on updating a single row.\n\nUpdate rows in batch in draft table\n\nUpdates multiple rows as a batch in the draft version of the table, with a maximum of 100 rows per call. See the endpoint PATCH /tables/{tableIdOrName}/rows/{rowId}/draft for details on updating a single row.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/cms/layouts",
    "content": "Layouts\n\nThis is a stable API but uses an older format. This means some functionality may not be available (for example test calls and Postman integration).\n\nIntroduction\n\nUse the layouts API to retrieve data about global groups for CMS templates in the developer file system. These layouts can be found in the design manager.\n\nUse cases for this API\n\nRetrieve version history for a global group to understand when certain changes were made.\n\nList layouts\n\nGet all layouts for an account. Supports paging and filtering.\n\nIf a parameter supports a filter type of 'gt', that means you can append a double underscore to the parameter name to find all items greater than the value. For example, the following query will find all items created than the 'updated' time:\n\nRequirements\n\nParameters\n\nThe number of items to return. Defaults to 20.\n\nThe offset set to start returning rows from. Defaults to 0.\n\nexact\n\nexact, range, gt, gte, lt, lte\n\nUse a DELETE request to delete the layout - do not set this directly.\n\nexact, in\n\nexact\n\nexact\n\nCustom HTML added to the head of pages using the layout.\n\nFlag to include the Primary CSS stylesheet. Defaults to use value from Site\nSettings. Can be overridden at the page level.\n\nFlag to include the domain stylesheets for a page using the layout. Can be\noverridden at the page level.\n\nList of references to stylesheets that are attached directly to the layout.\nCan be overridden at the page level.\n\nResponse\n\nShow more\n\nJSON Fields returned in the response\n\nShow more\n\nGet the layout by ID\n\nGet the details for a specific layout, by ID.\n\nRequirements\n\nParameters\n\nUnique identifier for a particular blog.\n\nResponse\n\nShow more\n\nJSON Fields returned in the response\n\nShow more\n\nGets the current contents of the auto-save buffer\n\nThe auto-save buffer is updated continuously when a user is editing the content through the UI. Only when the user clicks \"Save\" or \"Publish\" does the auto-save buffer get copied to the live object.\n\nRequirements\n\nParameters\n\nUnique identifier for a particular blog.\n\nResponse\n\nShow more\n\nJSON Fields returned in the response\n\nShow more\n\nDetermine if the auto-save buffer differs from the live layout\n\nReturns a dictionary: {\"has_buffered_changes\": false/true} depending on if the buffer is different from the live object.\n\nRequirements\n\nParameters\n\nUnique identifier for a particular blog.\n\nResponse\n\nShow more\n\nList previous versions of the layout\n\nGet the previous revisions for a specific layout, specified by ID.\n\nRequirements\n\nParameters\n\nUnique identifier for a particular blog.\n\nResponse\n\nShow more\n\nGet the previous version of the layout\n\nGet a specific revision of a specific layout. Version id is the id of the version from the list previous versions endpoint\n\nRequirements\n\nParameters\n\nUnique identifier for a particular blog.\n\nResponse\n\nShow more"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/cms/media-bridge"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/cms/modules",
    "content": "Modules\n\nThis is a stable API but uses an older format. This means some functionality may not be available (for example test calls and Postman integration).\n\nGet the details for a module by ID\n\nGet the details for a specific module using its ID.\n\nParameters\n\nThe ID of the module to fetch the details for.\n\nResponse\n\nShow more\n\nGet the details for a module by path\n\nGet the details for a specific module using its path.\n\nParameters\n\nThe path of the module to fetch the details for.\n\nResponse\n\nShow more"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/cms/pages",
    "content": "Pages\n\nIntroduction\n\nUse the pages API to create and manage website pages.\n\nUse cases for this API\n\nAfter noticing that a website page was updated incorrectly, use the API to view revisions of that page, then restore the page to a previous version.\n\nSite Pages\n\nGet all Site Pages\n\nGet the list of site pages. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits.\n\nRetrieve a Site Page\n\nRetrieve the Site Page object identified by the id in the path.\n\nRetrieve the full draft version of the Site Page\n\nRetrieve the full draft version of the Site Page.\n\nRetrieves a previous version of a Site Page\n\nRetrieves a previous version of a Site Page\n\nRetrieves all the previous versions of a Site Page\n\nRetrieves all the previous versions of a Site Page.\n\nAttach a site page to a multi-language group\n\nAttach a site page to a multi-language group.\n\nClone a Site Page\n\nClone a Site Page\n\nCreate a batch of Site Pages\n\nCreate the Site Page objects detailed in the request body.\n\nCreate a new A/B test variation\n\nCreate a new A/B test variation based on the information provided in the request body.\n\nCreate a new language variation\n\nCreate a new language variation from an existing site page\n\nCreate a new Site Page\n\nCreate a new Site Page\n\nDelete a batch of Site Pages\n\nDelete the Site Page objects identified in the request body.\nNote: This is not the same as the dashboard archive function. To perform a dashboard archive send an normal update with the archivedInDashboard field set to true.\n\nDetach a site page from a multi-language group\n\nDetach a site page from a multi-language group.\n\nEnd an active A/B test\n\nEnd an active A/B test and designate a winner.\n\nPush Site Page draft edits live\n\nTake any changes from the draft version of the Site Page and apply them to the live version.\n\nRerun a previous A/B test\n\nRerun a previous A/B test.\n\nReset the Site Page draft to the live version\n\nDiscards any edits and resets the draft to the live version.\n\nRestore a previous version of a Site Page\n\nTakes a specified version of a Site Page and restores it.\n\nRestore a previous version of a Site Page, to the draft version of the Site Page\n\nTakes a specified version of a Site Page, sets it as the new draft version of the Site Page.\n\nRetrieve a batch of Site Pages\n\nRetrieve the Site Page objects identified in the request body.\n\nSchedule a Site Page to be Published\n\nSchedule a Site Page to be Published\n\nUpdate a batch of Site Pages\n\nUpdate the Site Page objects identified in the request body.\n\nUpdate languages of multi-language group\n\nExplicitly set new languages for each site page in a multi-language group.\n\nSet a new primary language\n\nSet a site page as the primary language of a multi-language group.\n\nUpdate a Site Page\n\nSparse updates a single Site Page object identified by the id in the path.\nYou only need to specify the column values that you are modifying.\n\nUpdate a Site Page draft\n\nSparse updates the draft version of a single Site Page object identified by the id in the path.\nYou only need to specify the column values that you are modifying.\n\nDelete a Site Page\n\nDelete the Site Page object identified by the id in the path.\n\nLanding Pages\n\nGet all Landing Page Folders\n\nGet the list of Landing Page Folders. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits.\n\nGet all Landing Pages\n\nGet the list of landing pages. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits.\n\nRetrieve a Folder\n\nRetrieve the Folder object identified by the id in the path.\n\nRetrieve a Landing Page\n\nRetrieve the Landing Page object identified by the id in the path.\n\nRetrieve the full draft version of the Landing Page\n\nRetrieve the full draft version of the Landing Page.\n\nRetrieves a previous version of a Folder\n\nRetrieves a previous version of a Folder\n\nRetrieves a previous version of a Landing Page\n\nRetrieves a previous version of a Landing Page\n\nRetrieves all the previous versions of a Folder\n\nRetrieves all the previous versions of a Folder.\n\nRetrieves all the previous versions of a Landing Page\n\nRetrieves all the previous versions of a Landing Page.\n\nAttach a landing page to a multi-language group\n\nAttach a landing page to a multi-language group.\n\nClone a Landing Page\n\nClone a Landing Page\n\nCreate a batch of Folders\n\nCreate the Folder objects detailed in the request body.\n\nCreate a batch of Landing Pages\n\nCreate the Landing Page objects detailed in the request body.\n\nCreate a new A/B test variation\n\nCreate a new A/B test variation based on the information provided in the request body.\n\nCreate a new Folder\n\nCreate a new Folder\n\nCreate a new Landing Page\n\nCreate a new Landing Page\n\nCreate a new language variation\n\nCreate a new language variation from an existing landing page\n\nDelete a batch of Folders\n\nDelete the Folder objects identified in the request body.\n\nDelete a batch of Landing Pages\n\nDelete the Landing Page objects identified in the request body.\nNote: This is not the same as the dashboard archive function. To perform a dashboard archive send an normal update with the archivedInDashboard field set to true.\n\nDetach a landing page from a multi-language group\n\nDetach a landing page from a multi-language group.\n\nEnd an active A/B test\n\nEnd an active A/B test and designate a winner.\n\nPush Landing Page draft edits live\n\nTake any changes from the draft version of the Landing Page and apply them to the live version.\n\nRerun a previous A/B test\n\nRerun a previous A/B test.\n\nReset the Landing Page draft to the live version\n\nDiscards any edits and resets the draft to the live version.\n\nRestore a previous version of a Folder\n\nTakes a specified version of a Folder and restores it.\n\nRestore a previous version of a Landing Page\n\nTakes a specified version of a Landing Page and restores it.\n\nRestore a previous version of a Landing Page, to the draft version of the Landing Page\n\nTakes a specified version of a Landing Page, sets it as the new draft version of the Landing Page.\n\nRetrieve a batch of Folders\n\nUpdate the Folder objects identified in the request body.\n\nRetrieve a batch of Landing Pages\n\nRetrieve the Landing Page objects identified in the request body.\n\nSchedule a Landing Page to be Published\n\nSchedule a Landing Page to be Published\n\nUpdate a batch of Folders\n\nUpdate the Folder objects identified in the request body.\n\nUpdate a batch of Landing Pages\n\nUpdate the Landing Page objects identified in the request body.\n\nUpdate languages of multi-language group\n\nExplicitly set new languages for each landing page in a multi-language group.\n\nSet a new primary language\n\nSet a landing page as the primary language of a multi-language group.\n\nUpdate a Folder\n\nSparse updates a single Folder object identified by the id in the path.\nYou only need to specify the column values that you are modifying.\n\nUpdate a Landing Page\n\nSparse updates a single Landing Page object identified by the id in the path.\nYou only need to specify the column values that you are modifying.\n\nUpdate a Landing Page draft\n\nSparse updates the draft version of a single Landing Page object identified by the id in the path.\nYou only need to specify the column values that you are modifying.\n\nDelete a Folder\n\nDelete the Folder object identified by the id in the path.\n\nDelete a Landing Page\n\nDelete the Landing Page object identified by the id in the path.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/cms/site-search",
    "content": "Site search\n\nIntroduction\n\nUse the site search API to return HubSpot-hosted content based on search terms. Content can be searched across multiple domains. You can also retrieve all indexed data for a specific website page, blog post, or knowledge base article using its ID.\n\nUse cases for this API\n\nBuild a site search bar to enable users to search through your website content.\n\nPublic\n\nGet indexed properties.\n\nFor a given account and document ID (page ID, blog post ID, HubDB row ID, etc.), return all indexed data for that document. This is useful when debugging why a particular document is not returned from a custom search.\n\nSearch your site.\n\nReturns any website content matching the given search criteria for a given HubSpot account. Searches can be filtered by content type, domain, or URL path.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/cms/source-code",
    "content": "Source code\n\nIntroduction\n\nUse the source code API to interact with files stored in the developer file system. These files are surfaced in the design manager, and include template, module, CSS, JavaScript, and other CMS asset files.\n\nUse cases for this API\n\nRetrieve a drafted website page template to view its contents before publishing.\n\nContent\n\nDownload a file\n\nDownloads the byte contents of the file at the specified path in the specified environment.\n\nCreate a file\n\nCreates a file at the specified path in the specified environment. Accepts multipart/form-data content type. Throws an error if a file already exists at the specified path.\n\nCreate or update a file\n\nUpserts a file at the specified path in the specified environment. Accepts multipart/form-data content type.\n\nDelete a file\n\nDeletes the file at the specified path in the specified environment.\n\nMetadata\n\nGet the metadata for a file\n\nGets the metadata object for the file at the specified path in the specified environment.\n\nValidation\n\nValidate the contents of a file\n\nValidates the file contents passed to the endpoint given a specified path and environment. Accepts multipart/form-data content type.\n\nExtract\n\nGet extraction status\n\nGet the status of an extraction by the taskId returned from the initial extract/async request.\n\nExtract a zip file\n\nExtract a zip file in the developer file system. Extraction status can be checked with the /extract/async/tasks/taskId/status endpoint below.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/cms/templates",
    "content": "Templates\n\nThis is a stable API but uses an older format. This means some functionality may not be available (for example test calls and Postman integration).\n\nIntroduction\n\nUse the templates API to create and manage CMS templates.\n\nUse cases for this API\n\nRetrieve version history for a website page template to understand when a certain change was made.\n\nList Templates\n\nGet all templates. Supports paging and filtering.\n\nRequirements\n\nParameters\n\nThe number of items to return. Defaults to 20.\n\nThe offset set to start returning rows from. Defaults to 0.\n\nexact, gt, lt\n\nexact\n\nexact\n\nexact\n\nexact\n\nResponse\n\nShow more\n\nJSON Fields returned in the response\n\nShow more\n\nGet the Template by ID\n\nGet a specific template by ID.\n\nRequirements\n\nParameters\n\nThe unique id of the template.\n\nResponse\n\nShow more\n\nJSON Fields returned in the response\n\nShow more\n\nGets the current contents of the auto-save buffer\n\nThe auto-save buffer is updated continuously when a user is editing the content through the UI. Only when the user clicks \"Save\" or \"Publish\" does the auto-save buffer get copied to the live object.\n\nRequirements\n\nParameters\n\nUnique identifier for a particular blog.\n\nResponse\n\nShow more\n\nJSON Fields returned in the response\n\nShow more\n\nDetermine if the auto-save buffer differs from the live Template\n\nReturns a dictionary: {\"has_buffered_changes\": false/true} depending on if the buffer is different from the live object.\n\nRequirements\n\nParameters\n\nUnique identifier for a particular blog.\n\nResponse\n\nShow more\n\nList previous versions of the Template\n\nGet all previous versions of a template.\n\nRequirements\n\nParameters\n\nUnique identifier for a particular blog.\n\nResponse\n\nShow more\n\nGet the previous version of the Template\n\nGet a specific revision of a template. Version id is the id of the version from the list previous versions endpoint.\n\nRequirements\n\nParameters\n\nUnique identifier for a particular blog.\n\nUnique identifier for a specific version.\n\nResponse\n\nShow more\n\nJSON Fields returned in the response\n\nShow more\n\nCreate a new Template\n\nCreate a new coded template object in Design Manager.\n\nRequirements\n\nParameters\n\nThis parameter category type:\n\nThe name of the folder to save the template in Design Manager.\n\nThis parameter accepts a numeric value and sets the type of template that is\ncreated. The following numbers correspond to specific template types:\n\nThe Design Manager path to the directory that contains the file being created.\n\nThe source code of the file.\n\nUsed to determine if the template should be expected to pass page/content\nvalidation and be used with live content (if \"True\", the template\nsource must contain the required variables for the template\ntype).\n\nThis is equivalent to the \"Make Available for New Content?\" checkbox on\nPublish in the UI, and the \"Template\" vs. \"Template Partial\" radio select\non template creation in the design manager\nbeta.\n\nResponse\n\nShow more\n\nCopy the contents of the auto-save buffer into the live Template\n\nCopies the contents of the UI auto-save buffer into the live template.\n\nRequirements\n\nParameters\n\nUnique identifier for a particular blog.\n\nResponse\n\nShow more\n\nRestores a previously deleted Template\n\nRestore a previously deleted template.\n\nRequirements\n\nParameters\n\nUnique identifier for a particular blog.\n\nResponse\n\nShow more\n\nRestore a previous version of the Template\n\nRestore a previous version of the Template. The version_id in the request body is the ID of a specific revision of the template.\n\nRequirements\n\nParameters\n\nUnique identifier for a particular blog.\n\nResponse\n\nShow more\n\nUpdate the Template\n\nUpdates a template. If not all the fields are included in the body, we will only update the included fields.\n\nRequirements\n\nParameters\n\nUnique identifier for a particular blog.\n\nResponse\n\nShow more\n\nUpdates the auto-save buffer\n\nUpdates the auto-save buffer. Live objects will not be impacted.\n\nRequirements\n\nParameters\n\nUnique identifier for a particular blog.\n\nResponse\n\nShow more\n\nDelete Selected Template\n\nMarks the selected Template as deleted. The Template can be restored later via a POST to the restore-deleted endpoint.\n\nRequirements\n\nParameters\n\nUnique identifier for a particular blog."
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/cms/url-redirects",
    "content": "URL redirects\n\nIntroduction\n\nUse the URL redirects API to redirect traffic from a HubSpot-hosted page or blog post to any URL. You can redirect pages to specific URLs or use flexible pattern redirects to redirect multiple pages using variables. Learn more about managing redirects in HubSpot.\n\nUse cases for this API\n\nRedirect one page to another, or redirect an entire blog with one URL using flexible pattern variables.\n\nRedirects\n\nGet current redirects\n\nReturns all existing URL redirects. Results can be limited and filtered by creation or updated date.\n\nGet details for a redirect\n\nReturns the details for a single existing URL redirect by ID.\n\nCreate a redirect\n\nCreates and configures a new URL redirect.\n\nUpdate a redirect\n\nUpdates the settings for an existing URL redirect.\n\nDelete a redirect\n\nDelete one existing redirect, so it is no longer mapped.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/conversations/chat-widget-sdk",
    "content": "Conversations SDK\n\nTo chat with customers and leads on your website using HubSpot's conversation inbox, you can set up a live chat widget. With the conversations SDK, you can provide a more tailored experience for visitors by customizing the behavior of the chat widget.\n\nAt a high level, the conversations SDK enables you to do the following:\n\nInitializing\n\nThe API is housed in the window.HubSpotConversations object, which provides access to all available methods. The object is created by the HubSpot tracking code, but may not be available immediately on page load. To defer accessing the API until it's initialized, you can use the window.hsConversationsOnReady helper.\n\nwindow.hsConversationsOnReady is an optional field you can define on the window object which enables you to specify code to be executed as soon as the widget becomes available. This field takes an array functions to be executed once the API has been initialized.\n\nConfigure conversations settings\n\nhsConversationsSettings\n\nThis optional object enables you to provide some configuration options to the widget before it initializes.\n\nInline embed styling\n\nWhen the widget is embedded in a specific location using inlineEmbedSelector, several DOM elements are added and can be styled (e.g. height, width, border).\n\nFor example, if you embed the chat widget using the #some-id selector, it would be loaded with the following containers and IDs:\n\nYou can then customize the chat widget using those selectors, such as:\n\nWidget behavior\n\nHubSpotConversations.widget\n\nThe widget object contains a number of methods that allow you to manipulate the chat widget on your page, including:\n\nBelow, learn more about each method.\n\nwidget.load\n\nThe widget.load method handles the initial load on the page. This method is only necessary if you set loadImmediately to false. Otherwise, the widget will load itself automatically.\n\nThis method is throttled to one call per second.\n\nwidget.refresh\n\nThe widget.refresh method handles refreshing and re-rendering the widget's information, given the current page URL. This method can be useful for chat widgets embedded in single-page applications when you need to refresh the widget on route changes. This method also enables you to specify different chat widgets on different page routes.\n\nIf you call widget.refresh on a route where there is no chat widget, and the user isn't engaged in a chat, the widget will be removed. It will not remove the widget when there is a currently active chat.\n\nThis method is throttled to one call per second.\n\nExample\n\nUsing this method, you could create buttons and links to open specific chatflows on a page by adding query parameters to the page URL.\n\nFor example, you could add the following code to your pages to generate the buttons:\n\nThen, in each chat's target settings, you would set the chat to display when the query parameter matches the one you've set in your button code.\n\nwidget.open\n\nThe widget.open method opens the widget if it is not already open or isn't currently loaded.\n\nwidget.close\n\nThe widget.close method closes the widget if it isn't already closed.\n\nwidget.remove\n\nThe widget.remove method removes the widget from the page. If the widget isn't present on the page, this method does nothing. The widget will display again on page refresh or if widget.load is invoked.\n\nwidget.status\n\nThe widget.status method returns an object containing properties related to the current status of the widget.\n\nClear chat cookies\n\nThe clear method deletes cookies related to the chat widget and returns it to its default state on subsequent load.\n\nThe chat widget creates several cookies to preserve its state across site visits and page refreshes. These cookies are scoped to the domain of the page hosting the widget, and are used to support the following features:\n\nThe following cookies are cleared with this method:\n\nFor more information about these cookies, see check out HubSpot's Knowledge Base.\n\nAdditionally, you can pass {resetWidget:true} to the clear() function to clear all chat related cookies, remove the widget from the page, and create a new instance of the chat widget.\n\nChat events\n\nThe chat widget emits various events you can listen and respond to throughout its lifecycle. These events include:\n\nTo register and remove event listeners, you'll use on and off, as shown below.\n\nLearn more about each event below.\n\nconversationStarted\n\nThe conversationStarted event triggers when a new conversation has been successfully started.\n\nconversationClosed\n\nThe conversationClosed event triggers when a new conversation has marked as closed from the conversations inbox.\n\nSite visitors minimizing or closing the chat widget will not trigger this event. For that event, use widgetClosed instead.\n\nuserSelectedThread\n\nThe userSelectedThread event triggers when creating a thread or selecting an existing thread.\n\nunreadConversationCountChanged\n\nThe unreadConversationCountChanged event is triggered when the number of conversations with unread messages increases or decreases.\n\ncontactAssociated\n\nThe contactAssociated event is triggered when the visitor is associated with a contact in the CRM.\n\nuserInteractedWithWidget\n\nThe userInteractedWithWidget event is triggered when the visitor interacts with the widget, such as clicking to open the widget or closing the initial welcome message.\n\nwidgetLoaded\n\nThe widgetLoaded event is triggered when the widget iframe is loaded.\n\nquickReplyButtonClick\n\nThe quickReplyButtonClick event is triggered when the visitor clicks a quick reply in a bot conversation.\n\nIn the example screenshot above, the bot chatflow contains three quick reply options. If the user selects Learn more, the resulting event payload would be:\n\nwidgetClosed\n\nThe widgetClosed event is triggered when the visitor closes the chat widget."
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/conversations/create-custom-channels",
    "content": "Create custom channels\n\nIntroduction\n\nUse the custom channels API to create custom channels to build a bridge between an external message service and HubSpot's inbox or help desk features.\n\nUse cases for this API\n\nAllow admins to install an integration with a third-party messaging channel that your team uses to communicate with customers, to allow users in your account to manage their conversations for that channel directly in HubSpot.\n\nChannels\n\nGet a custom channel\n\nRetrieve the details about a custom channel. This API allows you to see a custom channel's current capabilties and other configuration metadata\n\nGet all channels for app\n\nCreate a custom channel\n\nRegister a new channel along with its capabilities and the webhook url that will be used to receive messages published over the channel\n\nUpdate a custom channel\n\nThis endpoint can be used to update a channel's capabilities. You can also use it to update the channel's webhookUri and its channelAccountConnectionRedirectUrl.\n\nArchive a custom channel\n\nUse this API to archive a registered custom channel\n\nMessages\n\nGet a message\n\nGet the PublicConversationsMessage that represents a message sent over a custom channel\n\nPublish a message\n\nPublish a message over your custom channel\n\nUpdate message\n\nUse this API to update a message's status to indicate if it was successfully sent, failed to send, or was read\n\nChannel Account Staging Tokens\n\nUpdate a channel account staging token\n\nThis API is used for integrators creating public apps. Use this API to update a channel account staging token's account name and delivery identifier. This information will be applied to the channel account created from this staging token.\n\nChannel Accounts\n\nGet a channel account by id\n\nRetrieve a PublicChannelAccount that contains all the metadata about your channel account. This includes information like its channel, associated inbox id, and delivery identifier information.\n\nQuery channel accounts\n\nCreate a channel account\n\nThis API allows you to create one or more accounts that all talk over a single channel but using different delivery identifiers.\n\nUpdate a channel account\n\nThis API is used to update the name of the channel account and it's isAuthorized status. Setting to isAuthorized flag to False disables the channel account.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/conversations/inbox-and-messages",
    "content": "Inbox & messages\n\nIntroduction\n\nUse the conversations API to manage and send messages via the connected channels in your conversations inbox. You can retrieve existing messages, update threads, and provide internal comments for agents on your team.\n\nUse cases for this API\n\nIf you're using the conversations inbox in HubSpot, but you want to report on support agent productivity in an external tool or export message data to an external service, you can build an integration with the conversations and messages API.\n\nConversations\n\nGet a single actor.\n\nGet a single channel account.\n\nGet a single channel.\n\nGet a single conversations inbox.\n\nGet a single message.\n\nGet a single thread.\n\nReturns a single thread.\n\nGet channel accounts.\n\nGet channels.\n\nGet conversations inboxes.\n\nGet message history for a thread.\n\nGet the original content of a single message.\n\nReturns the complete original text and rich text bodies of a message. This will be different from the text and rich text in the message itself if the message's truncationStatus is anything other than NOT_TRUNCATED.\n\nGet threads.\n\nGet actors\n\nResolve ActorIds to the underlying actors/participants.\n\nSend a message to a thread.\n\nSend a new message on a thread at the current timestamp.\n\nUpdate a thread.\n\nUpdates a single thread. Either a thread's status can be updated, or the thread can be restored.\n\nArchives a thread.\n\nArchives a single thread. The thread will be permanently deleted 30 days after placed in an archived state.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/conversations/visitor-identification",
    "content": "Visitor identification\n\nIntroduction\n\nThe visitor identification API allows you to identify users who navigate to your website that you've authenticated using your own authentication system.\n\nUse cases for this API\n\nYou're building an integration to pass along website visitors to a chatflow you've configured in HubSpot, and ensure that visitors are associated with a known contact so support agents in your account know who they're helping.\n\nGenerate\n\nGenerate a token\n\nGenerates a new visitor identification token. This token will be unique every time this endpoint is called, even if called with the same email address. This token is temporary and will expire after 12 hours\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/associations/association-details",
    "content": "Association details\n\nIntroduction\n\nUse the associations API to create, retrieve, update, or delete associations between records, or between records and activities.\n\nUse cases for this API\n\nWhen an existing contact has moved to a new company, update their associated company to keep your CRM up to date.\n\nBatch\n\nCreate Default Associations\n\nCreate the default (most generic) association type between two object types\n\nCreate\n\nBatch create associations for objects\n\nDelete\n\nBatch delete associations for objects\n\nDelete Specific Labels\n\nBatch delete specific association labels for objects. Deleting an unlabeled association will also delete all labeled associations between those two objects\n\nRead\n\nBatch read associations for objects to specific object type. The 'after' field in a returned paging object  can be added alongside the 'id' to retrieve the next page of associations from that objectId. The 'link' field is deprecated and should be ignored. Note: The 'paging' field will only be present if there are more pages and absent otherwise.\n\nReport\n\nReport\n\nRequests a report of all objects in the portal which have a high usage of associations\n\nBasic\n\nList\n\nList all associations of an object by object type. Limit 500 per call.\n\nCreate\n\nSet association labels between two records.\n\nCreate Default\n\nCreate the default (most generic) association type between two object types\n\nDelete\n\ndeletes all associations between two records.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/associations/associations-schema",
    "content": "Associations schema\n\nIntroduction\n\nUse the association schema API to understand how different types of CRM records and activities can relate to one another, as well as define your own custom associations.\n\nUse cases for this API\n\nTo associate a contact with a company, use this API to get the necessary associationTypeId and associationCategory.\n\nDefinition Configurations\n\nRead\n\nReturns user configurations on all association definitions between two object types\n\nRead All\n\nReturns all user configurations available on a given portal\n\nCreate\n\nBatch create user configurations between two object types\n\nDelete\n\nBatch delete user configurations between two object types\n\nUpdate\n\nBatch update user configurations between two object types\n\nDefinitions\n\nRead\n\nReturns all association types between two object types\n\nCreate\n\nCreate a user defined association definition\n\nUpdate\n\nUpdate a user defined association definition\n\nDelete\n\nDeletes an association definition\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/commerce/carts",
    "content": "Carts\n\nIntroduction\n\nUse the orders API to create and manage data related to ecommerce purchases in HubSpot. This can be especially useful for keeping HubSpot data synced with external ecommerce platforms, such as Shopify and NetSuite.\n\nUse cases for this API\n\nWhen a customer adds a set of products to their cart and makes a purchase, store that purchase as an individual order. You can then update that order with tracking information once the shipping label has been printed.\n\nBatch\n\nArchive a batch of carts\n\nArchives a batch of cart by ID. Archived carts can be restored within 90 days of deletion. Learn more about restoring records.\n\nCreate a batch of carts\n\nCreate a batch of carts. The inputs array can contain a properties object to define property values for each record, along with an associations array to define associations with other CRM records.\n\nCreate and update a batch of carts by unique property\n\nCreate and update a batch of carts by a unique property. Carts that don't exist will be created, while existing carts will be updated.\n\nRetrieve a batch of carts\n\nRetrieve a batch of carts by ID (cartId) or unique property value (idProperty).\n\nUpdate a batch of carts\n\nUpdate a batch of carts by ID (cartId) or unique property value (idProperty). Provided property values will be overwritten. Read-only and non-existent properties will result in an error. Properties values can be cleared by passing an empty string.\n\nBasic\n\nRetrieve a cart\n\nRetrieve a cart by its ID (cartId) or by a unique property (idProperty). You can specify what is returned using the properties query parameter.\n\nRetrieve carts\n\nRead a page of carts. Control what is returned via the properties query param.\n\nCreate a cart\n\nCreate a single cart. Include a properties object to define property values for the cart, along with an associations array to define associations with other CRM records.\n\nUpdate a cart\n\nUpdate a cart by ID (cartId) or unique property value (idProperty). Provided property values will be overwritten. Read-only and non-existent properties will result in an error. Properties values can be cleared by passing an empty string.\n\nArchive a cart\n\nArchive a cart by ID. Archived carts can be restored within 90 days of deletion. Learn more about restoring records.\n\nSearch\n\nSearch for carts\n\nSearch for carts by filtering on properties, searching through associations, and sorting results. Learn more about CRM search.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/commerce/discounts",
    "content": "Discounts\n\nIntroduction\n\nUse the discounts API to create and manage discounts that can be included in quotes.\n\nUse cases for this API\n\nYou want to create a 5% first time buyer discount for quotes that you send to new customers.\n\nBatch\n\nArchive a batch of discounts by ID\n\nCreate a batch of discounts\n\nCreate or update a batch of discounts by unique property values\n\nRead a batch of discounts by internal ID, or unique property values\n\nUpdate a batch of discounts\n\nBasic\n\nList\n\nRead a page of discounts. Control what is returned via the properties query param.\n\nRead\n\nRead an Object identified by {discountId}. {discountId} refers to the internal object ID by default, or optionally any unique property value as specified by the idProperty query param.  Control what is returned via the properties query param.\n\nCreate\n\nCreate a discount with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard discounts is provided.\n\nUpdate\n\nPerform a partial update of an Object identified by {discountId}. {discountId} refers to the internal object ID by default, or optionally any unique property value as specified by the idProperty query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.\n\nArchive\n\nMove an Object identified by {discountId} to the recycling bin.\n\nSearch\n\n/crm/v3/objects/discounts/search\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/commerce/fees",
    "content": "Fees\n\nIntroduction\n\nUse the fees API to create and manage fees that can be included in quotes.\n\nUse cases for this API\n\nYou want to include an onboarding fee on quotes that you send to new customers.\n\nBatch\n\nArchive a batch of fees by ID\n\nCreate a batch of fees\n\nCreate or update a batch of fees by unique property values\n\nRead a batch of fees by internal ID, or unique property values\n\nUpdate a batch of fees\n\nBasic\n\nList\n\nRead a page of fees. Control what is returned via the properties query param.\n\nRead\n\nRead an Object identified by {feeId}. {feeId} refers to the internal object ID by default, or optionally any unique property value as specified by the idProperty query param.  Control what is returned via the properties query param.\n\nCreate\n\nCreate a fee with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard fees is provided.\n\nUpdate\n\nPerform a partial update of an Object identified by {feeId}. {feeId} refers to the internal object ID by default, or optionally any unique property value as specified by the idProperty query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.\n\nArchive\n\nMove an Object identified by {feeId} to the recycling bin.\n\nSearch\n\n/crm/v3/objects/fees/search\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/commerce/invoices",
    "content": "Invoices\n\nIntroduction\n\nUse the invoices API to fetch information about an account's invoices. This is a read-only API, so it cannot be used for creating new or managing existing invoices.\n\nUse cases for this API\n\nFetch all currently open invoices in the account.\n\nBatch\n\nRead a batch of invoices by internal ID, or unique property values\n\nBasic\n\nList\n\nRead a page of invoices. Control what is returned via the properties query param.\n\nRead\n\nRead an Object identified by {invoiceId}. {invoiceId} refers to the internal object ID by default, or optionally any unique property value as specified by the idProperty query param.  Control what is returned via the properties query param.\n\nSearch\n\nSearch for invoices\n\nSearch for invoices by filtering on properties, searching through associations, and sorting results. Learn more about CRM search.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/commerce/orders"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/commerce/payments",
    "content": "Payments\n\nIntroduction\n\nUse the payments API to fetch information about an account's payments. This is a read-only API, so it cannot be used for creating new or managing existing payments. Note that the account must be set up to collect payments through either HubSpot payments or Stripe payment processing.\n\nUse cases for this API\n\nFetch all refunded payments in the account.\n\nBatch\n\nRetrieve a batch of payments\n\nRetrieve a batch of payments by ID (commercePaymentId) or unique property value (idProperty).\n\nBasic\n\nRetrieve a payment\n\nRetrieve a payment by its ID (commercePaymentId) or by a unique property (idProperty). You can specify what is returned using the properties query parameter.\n\nRetrieve payments\n\nRetrieve all payments, using query parameters to specify the information that gets returned.\n\nSearch\n\nSearch for payments\n\nSearch for payments by filtering on properties, searching through associations, and sorting results. Learn more about CRM search.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/commerce/quotes",
    "content": "Quotes\n\nIntroduction\n\nUse the quotes API to create and manage sales quotes for sharing pricing information with potential buyers.\n\nUse cases for this API\n\nCreate a contract proposal for a customer who is interested in signing up for one of your annual SEO auditing service packages.\n\nBatch\n\nArchive a batch of quotes by ID\n\nCreate a batch of quotes\n\nCreate or update a batch of quotes by unique property values\n\nRead a batch of quotes by internal ID, or unique property values\n\nUpdate a batch of quotes\n\nBasic\n\nList\n\nRead a page of quotes. Control what is returned via the properties query param.\n\nRead\n\nRead an Object identified by {quoteId}. {quoteId} refers to the internal object ID by default, or optionally any unique property value as specified by the idProperty query param.  Control what is returned via the properties query param.\n\nCreate\n\nCreate a quote with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard quotes is provided.\n\nUpdate\n\nPerform a partial update of an Object identified by {quoteId}. {quoteId} refers to the internal object ID by default, or optionally any unique property value as specified by the idProperty query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.\n\nArchive\n\nMove an Object identified by {quoteId} to the recycling bin.\n\nSearch\n\n/crm/v3/objects/quotes/search\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/commerce/subscriptions",
    "content": "Subscriptions\n\nIntroduction\n\nUse the subscriptions API to fetch information about an account's subscriptions. This is a read-only API, so it cannot be used for creating new or managing existing subscriptions. Note that the account must be set up to collect payments through either HubSpot payments or Stripe payment processing.\n\nUse cases for this API\n\nFetch the currently active subscriptions in a given account.\n\nBasic\n\nRetrieve a subscription\n\nRetrieve a subscription by its ID (subscriptionId) or by a unique property (idProperty). You can specify what is returned using the properties query parameter.\n\nRetrieve subscriptions\n\nRetrieve all subscriptions, using query parameters to specify the information that gets returned.\n\nSearch\n\nSearch for subscriptions\n\nSearch for subscriptions by filtering on properties, searching through associations, and sorting results. Learn more about CRM search.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/commerce/taxes",
    "content": "Taxes\n\nIntroduction\n\nUse the taxes API to create and manage taxes that can be included in quotes.\n\nUse cases for this API\n\nYou want to include a percentage sales tax on quotes, depending on state requirements.\n\nBatch\n\nArchive a batch of taxes by ID\n\nCreate a batch of taxes\n\nCreate or update a batch of taxes by unique property values\n\nRead a batch of taxes by internal ID, or unique property values\n\nUpdate a batch of taxes\n\nBasic\n\nList\n\nRead a page of taxes. Control what is returned via the properties query param.\n\nRead\n\nRead an Object identified by {taxId}. {taxId} refers to the internal object ID by default, or optionally any unique property value as specified by the idProperty query param.  Control what is returned via the properties query param.\n\nCreate\n\nCreate a tax with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard taxes is provided.\n\nUpdate\n\nPerform a partial update of an Object identified by {taxId}. {taxId} refers to the internal object ID by default, or optionally any unique property value as specified by the idProperty query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.\n\nArchive\n\nMove an Object identified by {taxId} to the recycling bin.\n\nSearch\n\n/crm/v3/objects/taxes/search\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/engagements/engagement-details",
    "content": "Engagement details\n\nThis is a stable API but uses an older format. This means some functionality may not be available (for example test calls and Postman integration).\n\nIntroduction\n\nUse the engagements API to manage notes, emails, tasks, meetings, and calls on CRM records.\n\nUse cases for this API\n\nYou want to upgrade your integration to log calls and meetings to contact records to streamline the sales process.\n\nRelated guide:\n\nGet an engagement\n\nThis endpoint is used to get an engagement (a task or activity) for a CRM record in HubSpot.\n\nUse case for this endpoint: This data can be used to report on per-rep productivity or to integrate HubSpot with other back-office tools.\n\nFor another example, you can use this information about an individual call to drive automation about when the next follow-up meeting or call should happen.\n\nScopes\n\nIn addition to the contacts scope, the sales-email-read scope is required in order to receive the details of any email-type engagements. See the Engagement API Overview for more details.\n\nRequirements\n\nParameters\n\nThe unique ID of the engagement you want the information for.\n\nResponse\n\nShow more\n\nGet all engagements\n\nThis endpoint is used to get all engagements in an account.\n\nUse case for this endpoint: Because engagements represent individual activity, you can use the endpoint to source the inputs for a machine learning model to help predict the best time for a call to a prospect or a customer.\n\nScopes\n\nIn addition to the contacts scope, the sales-email-read scope is required to receive the details of any email-type engagements. See the Engagements API Overview for more details.\n\nRequirements\n\nParameters\n\nThe number of records to return. Defaults to 100, has a maximum value of 250.\n\nUsed to page through the results. If there are more records in your portal than the limit= parameter, you will need to use the offset returned in the first request to get the next set of results.\n\nResponse\n\nShow more\n\nResponse details\n\nReturns a paginated set of engagements. Up to 250 records can be returned in a single response.\n\nIn addition to the list of engagements, each request will also return two values, offset and hasMore. If hasMore is true, you'll need to make another request, using the offset to get the next page of engagement records.\n\nThis endpoint will not return engagements for sample contacts \"Brian Halligan\" or \"Cool Robot.\"\n\nGet recent engagements\n\nGet the most recently created or updated engagements in a portal, sorted by when they were last updated, with the most recently updated engagements first.\n\nNote: This endpoint will only return records updated in the last 30 days, or the 10k most recently updated records. If you need to get all of your engagements, please use this endpoint.\n\nNote: In addition to the contacts scope, the sales-email-read scope is required in order to receive the details of any email type engagements. See the Engagements overview for more details.\n\nRequirements\n\nParameters\n\nThe number of items to include in the response. Defaults to 20, has a maximum value of 100.\n\nUsed to page through the recent engagements. Each response will include an offset value that can be used with this parmaeter to get the next set of records.\n\nA Unix timestamp in milliseconds. If this parameter is included, only records modified after the specified time will be returned.\n\nResponse\n\nShow more\n\nGet call engagement dispositions\n\nGet all possible dispositions for sales calls (stored as engagements), listed as the outcome when viewing the call's outcome when viewing the call in the timeline in HubSpot.\n\nPlease note: due to how the underlying redirect logic works, your API logs will show any calls to this endpoint as /twilio/v1/dispositions.\n\nRequirements\n\nParameters\n\nResponse\n\nShow more\n\nCreate an engagement\n\nUse this endpoint to create an engagement (an email, call, meeting, task or note) on an object in HubSpot.\n\nUse case for this endpoint: This endpoint is useful for keeping your CRM records up-to-date on any interactions that take place outside of HubSpot. Activity reporting in the CRM also feeds off of this data.\n\nAssociations\n\nYou can associate engagements with objects to ensure they're displayed correctly in the UI. (See example request body to the right.)\n\nTasks created through HubSpot's API will not trigger user notifications.\n\nFor note-type engagements, the body of the note will be limited to 65536 characters.\n\nRequirements\n\nParameters\n\nOne of: EMAIL, CALL, MEETING, TASK, NOTE\n\nAn object representing the details of the engagement. See the examples to the right for details about the format of the metadata for specific engagement types.\n\nCorresponding to an Owner. Task engagements use the ownerId to populate the Assigned to field.\n\nTimestamp (in milliseconds). This timestamp will be treated as the time that the engagement happened, and will determine where the engagement appears in the timeline for any associated records.\n\nResponse\n\nShow more\n\nResponse details\n\nUpdate an Engagement\n\nUpdate an engagement (a task or activity) on an object in HubSpot.\n\nSee the documentation for creating an engagement for more details on the fields that can be included.\n\nNote: Associations cannot be modified using this endpoint. Use the CRM associations API to update associations for existing engagements.\n\nRequirements\n\nParameters\n\nAn object representing the engagement you have created.\n\nResponse\n\nShow more\n\nDelete an Engagement\n\nDelete an engagement (a task or activity) on an object in HubSpot.\n\nExample URL to DELETE to: api.hubapi.com/engagements/v1/engagements/74\n\nRequirements\n\nParameters\n\nThe unique ID of the engagement you want to delete.\n\nResponse\n\nShow more"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/engagements/calls",
    "content": "Calls\n\nIntroduction\n\nUse the call engagements API to associate calls with your CRM records. You can include key takeaways in the metadata of each call, including the call's outcome, recipient information, and a URL of the recording, if applicable.\n\nUse cases for this API\n\nIf your team isn't using the HubSpot calling tool to make calls to prospects, you can use the calls API to log call information from another service to your HubSpot account.\n\nBatch\n\nArchive a batch of calls\n\nArchive a batch of calls by ID. Deleted calls can be restored within 90 days of being deleted, but call recordings recording will be permanently deleted. Learn more about restoring activity records.\n\nCreate a batch of calls\n\nCreate a batch of calls. The inputs array can contain a properties object to define property values for each record, along with an associations array to define associations with other CRM records.\n\nCreate or update a batch of calls by unique property\n\nCreate or update a batch of calls by ID (callId) or unique property value (idProperty).\n\nRetrieve a batch of calls\n\nRetrieve a batch of calls by ID.\n\nUpdate a batch of calls\n\nUpdate a batch of calls by ID.\n\nBasic\n\nRetrieve a call\n\nRetrieve a call by its ID (callId) or by a unique property (idProperty). You can specify what is returned using the properties query parameter.\n\nRetrieve calls\n\nRetrieve all calls, using query parameters to specify the information that gets returned.\n\nCreate a call\n\nCreate a single call. Include a properties object to define property values for the call, along with an associations array to define associations with other CRM records.\n\nUpdate a call\n\nUpdate a call by ID. Provided property values will be overwritten. Read-only and non-existent properties will result in an error. Properties values can be cleared by passing an empty string.\n\nArchive a call\n\nDelete a call by ID. A deleted call can be restored within 90 days of being deleted, but the recording will be permanently deleted. Learn more about restoring activity records.\n\nSearch\n\nSearch for calls\n\nSearch for calls by filtering on properties, searching through associations, and sorting results. Learn more about CRM search.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/engagements/communications",
    "content": "Communications\n\nIntroduction\n\nUse the communications API to associate messages from external channels (e.g., WhatsApp, LinkedIn, and SMS) to CRM records in your HubSpot account.\n\nUse cases for this API\n\nYour team frequently reaches out to your contacts via multiple channels that aren't directly connected to your HubSpot account, and you want to ensure all your communications to customers are centralized in one place.\n\nBatch\n\nArchive a batch of messages\n\nDelete a batch of messages by ID. A deleted message can be restored within 90 days of being deleted. Learn more about restoring activity records.\n\nCreate a batch of messages\n\nCreate a batch of messages. The inputs array can contain a properties object to define property values for each message, along with an associations array to define associations with other CRM records.\n\nCreate and and update a batch of messages\n\nCreate and update a batch of messages by a unique property. Messages that don't exist will be created, while existing messages will be updated.\n\nRetrieve a batch of messages\n\nRetrieve a batch of messages by ID (communicationId) or unique property value (idProperty).\n\nUpdate a batch of messages\n\nUpdate a batch of messages by ID (communicationId) or unique property value (idProperty). Provided property values will be overwritten. Read-only and non-existent properties will result in an error. Properties values can be cleared by passing an empty string.\n\nBasic\n\nRetrieve a message\n\nRetrieve a message by its ID (communicationId) or by a unique property (idProperty). You can specify what is returned using the properties query parameter.\n\nRetrieve messages\n\nRetrieve all messages, using query parameters to specify the information that gets returned.\n\nCreate a message\n\nCreate a single message. Include a properties object to define property values for the message, along with an associations array to define associations with other CRM records.\n\nUpdate a message\n\nUpdate a message by ID (communicationId) or unique property value (idProperty). Provided property values will be overwritten. Read-only and non-existent properties will result in an error. Properties values can be cleared by passing an empty string.\n\nArchive a message\n\nDelete a message by ID. You can restore deleted messages within 90 days of deletion. Learn more about restoring activity records.\n\nSearch\n\nSearch for messages\n\nSearch for messages by filtering on properties, searching through associations, and sorting results. Learn more about CRM search.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/engagements/email",
    "content": "Email\n\nIntroduction\n\nUse the email engagements API to associate emails with records in your CRM. You can include various metadata fields as needed, including the email's headers, subject line, and body.\n\nUse cases for this API\n\nYou send and manage emails to your customers using a third-party email provider, and you want to programmatically log your email data to the associated records in your HubSpot account.\n\nBatch\n\nArchive a batch of emails by ID\n\nCreate a batch of emails\n\nCreate or update a batch of emails by unique property values\n\nRead a batch of emails by internal ID, or unique property values\n\nUpdate a batch of emails\n\nBasic\n\nList\n\nRead a page of emails. Control what is returned via the properties query param.\n\nRead\n\nRead an Object identified by {emailId}. {emailId} refers to the internal object ID by default, or optionally any unique property value as specified by the idProperty query param.  Control what is returned via the properties query param.\n\nCreate\n\nCreate a email with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard emails is provided.\n\nUpdate\n\nPerform a partial update of an Object identified by {emailId}. {emailId} refers to the internal object ID by default, or optionally any unique property value as specified by the idProperty query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.\n\nArchive\n\nMove an Object identified by {emailId} to the recycling bin.\n\nSearch\n\n/crm/v3/objects/emails/search\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/engagements/meetings",
    "content": "Meetings\n\nIntroduction\n\nThe meetings engagements API allows you to log and manage meetings on the corresponding CRM records, such as contacts or companies. You can include notes from the meeting and its outcome, along with other important data from the meeting to share with the rest of your team.\n\nUse cases for this API\n\nIf you're using a different service outside of HubSpot to schedule your meetings, or if you want to supplement the built-in tracking of the HubSpot meetings tool, you can use this API to help keep track of how your meetings went with prospects and customers in the HubSpot CRM.\n\nBatch\n\nArchive a batch of meetings by ID\n\nCreate a batch of meetings\n\nCreate or update a batch of meetings by unique property values\n\nRead a batch of meetings by internal ID, or unique property values\n\nUpdate a batch of meetings\n\nBasic\n\nList\n\nRead a page of meetings. Control what is returned via the properties query param.\n\nRead\n\nRead an Object identified by {meetingId}. {meetingId} refers to the internal object ID by default, or optionally any unique property value as specified by the idProperty query param.  Control what is returned via the properties query param.\n\nCreate\n\nCreate a meeting with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard meetings is provided.\n\nUpdate\n\nPerform a partial update of an Object identified by {meetingId}. {meetingId} refers to the internal object ID by default, or optionally any unique property value as specified by the idProperty query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.\n\nArchive\n\nMove an Object identified by {meetingId} to the recycling bin.\n\nSearch\n\n/crm/v3/objects/meetings/search\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/engagements/notes",
    "content": "Notes\n\nIntroduction\n\nUse the notes engagements API to include contextual information or associate an attachment with a CRM record. Other users in your HubSpot account will then be able to review the note and any attachments.\n\nUse cases for this API\n\nIf you had an offline conversation with a customer, you could add a note to their contact record with the important takeaways from your conversation.\n\nBatch\n\nArchive a batch of notes by ID\n\nCreate a batch of notes\n\nCreate or update a batch of notes by unique property values\n\nRead a batch of notes by internal ID, or unique property values\n\nUpdate a batch of notes\n\nBasic\n\nList\n\nRead a page of notes. Control what is returned via the properties query param.\n\nRead\n\nRead an Object identified by {noteId}. {noteId} refers to the internal object ID by default, or optionally any unique property value as specified by the idProperty query param.  Control what is returned via the properties query param.\n\nCreate\n\nCreate a note with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard notes is provided.\n\nUpdate\n\nPerform a partial update of an Object identified by {noteId}. {noteId} refers to the internal object ID by default, or optionally any unique property value as specified by the idProperty query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.\n\nArchive\n\nMove an Object identified by {noteId} to the recycling bin.\n\nSearch\n\n/crm/v3/objects/notes/search\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/engagements/postal-mail",
    "content": "Postal mail\n\nIntroduction\n\nThe postal mail API allows you to log data from your physical mail campaigns to the associated records in your CRM.\n\nUse cases for this API\n\nYour company is sending and receiving invoices via postal mail, and you want to centralize these communications alongside your emails and calls to customers in your CRM.\n\nBatch\n\nArchive a batch of postal mail by ID\n\nCreate a batch of postal mail\n\nCreate or update a batch of postal mail by unique property values\n\nRead a batch of postal mail by internal ID, or unique property values\n\nUpdate a batch of postal mail\n\nBasic\n\nList\n\nRead a page of postal mail. Control what is returned via the properties query param.\n\nRead\n\nRead an Object identified by {postalMailId}. {postalMailId} refers to the internal object ID by default, or optionally any unique property value as specified by the idProperty query param.  Control what is returned via the properties query param.\n\nCreate\n\nCreate a postal mail with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard postal mail is provided.\n\nUpdate\n\nPerform a partial update of an Object identified by {postalMailId}. {postalMailId} refers to the internal object ID by default, or optionally any unique property value as specified by the idProperty query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.\n\nArchive\n\nMove an Object identified by {postalMailId} to the recycling bin.\n\nSearch\n\n/crm/v3/objects/postal_mail/search\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/engagements/tasks",
    "content": "Tasks\n\nIntroduction\n\nUse the tasks API to associate tasks with your CRM records. You can assign tasks to specific users in your account, keep track of their status, and organize them using different priorities and types.\n\nUse cases for this API\n\nIf you're using a third-party service for project management, you can create and manage any tasks associated with your CRM records by logging them in HubSpot.\n\nBatch\n\nArchive a batch of tasks by ID\n\nCreate a batch of tasks\n\nCreate or update a batch of tasks by unique property values\n\nRead a batch of tasks by internal ID, or unique property values\n\nUpdate a batch of tasks\n\nBasic\n\nList\n\nRead a page of tasks. Control what is returned via the properties query param.\n\nRead\n\nRead an Object identified by {taskId}. {taskId} refers to the internal object ID by default, or optionally any unique property value as specified by the idProperty query param.  Control what is returned via the properties query param.\n\nCreate\n\nCreate a task with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard tasks is provided.\n\nUpdate\n\nPerform a partial update of an Object identified by {taskId}. {taskId} refers to the internal object ID by default, or optionally any unique property value as specified by the idProperty query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.\n\nArchive\n\nMove an Object identified by {taskId} to the recycling bin.\n\nSearch\n\n/crm/v3/objects/tasks/search\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/extensions/calling-sdk",
    "content": "Calling SDK\n\nIntroduction\n\nUse the calling extensions SDK to provide HubSpot users with custom calling options on CRM records.\n\nUse cases for this API\n\nCreate an integration for a third-party calling service that your company uses, rather than using HubSpot's native calling tool.\n\nSettings\n\nRetrieve settings\n\nRetrieve the settings configured for the app.\n\nConfigure a calling extension\n\nSet the menu label, target iframe URL, and dimensions for your calling extension.\n\nUpdate settings\n\nUpdate existing calling extension settings.\n\nDelete calling settings\n\nDelete a calling extension. This will remove your service as an option for all connected accounts.\n\nRecording settings\n\nRetrieve recording settings\n\nRetrieve the URL that is registered for call recording.\n\nEnable the app for call recording\n\nRegister an external URL that HubSpot will use to retrieve call recordings.\n\nMark recording as ready for transcription\n\nMark a call recording as ready for transcription, specifying the call by its ID (engagementid).\n\nUpdate recording settings\n\nUpdate the URL that HubSpot will use to retrieve call recordings.\n\nChannel Connection Settings\n\nRetrieve channel connection settings\n\nRetrieve the settings related to the app's channel connection.\n\nConfigure channel connection settings\n\nConfigure channel connection settings for the app.\n\nUpdate channel connection settings\n\nUpdate existing channel connection settings for your app.\n\nDelete channel connection settings\n\nDelete the channel connection settings for the app.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/extensions/crm-cards",
    "content": "CRM cards\n\nIntroduction\n\nCreate custom cards to data from external systems on CRM records. Requires a public public app. These CRM cards are different from the UI extensions you can create with projects.\n\nUse cases for this API\n\nAdd a custom card to contact records that displays data from your external bug tracking software.\n\nSampleResponse\n\nGet sample card detail response\n\nReturns an example card detail response. This is the payload with displayed details for a card that will be shown to a user. An app should send this in response to the data fetch request.\n\nCards\n\nGet a card.\n\nReturns the definition for a card with the given ID.\n\nGet all cards\n\nReturns a list of cards for a given app.\n\nCreate a new card\n\nDefines a new card that will become active on an account when this app is installed.\n\nUpdate a card\n\nUpdate a card definition with new details.\n\nDelete a card\n\nPermanently deletes a card definition with the given ID. Once deleted, data fetch requests for this card will no longer be sent to your service. This can't be undone.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/extensions/extension-details",
    "content": "Extension details\n\nThis is a stable API but uses an older format. This means some functionality may not be available (for example test calls and Postman integration).\n\nView an object type\n\nView the details for an existing object type. See creating an object type or the overview page for details on the returned fields.\n\nRequirements\n\nParameters\n\nThe id of the object type you want to get.\n\nYour Developer HAPIkey. This must be a Developer HAPIkey associated with the Developer portal that the OAuth app was created in.\n\nResponse\n\nShow more\n\nCreate object type\n\nCreate a new CRM Extensions object type.\n\nRequirements\n\nParameters\n\nYour Developer HAPIkey. This must be a Developer HAPIkey associated with the Developer portal that the OAuth app was created in.\n\nThe ID of the HubSpot application that will own this object type.\n\nA list of URIs. When you define actions, the URIs for these actions must be under one of these URIs.\n\nThe URI the CRM will call to fetch Sales Objects for the specified associatedHubSpotObjectTypes.\n\nThe title of this object. This will be displayed as the title of the CRM sidebar card.\n\nThe common properties that these objects will have, in the order they should appear on the sidebar card. See Property Types for more info.\n\nA set of CONTACT, COMPANY, DEAL, or TICKET. This determines where on the CRM this Object Type will appear -- contact, company, deal, or ticket details pages.\n\nHubSpot properties to send in the data fetch request, by CRM object type.\n\nResponse\n\nShow more\n\nModify an object type\n\nUpdate the details for an existing object type. See creating an object type or the overview page for details on the required fields.\n\nNote: The entire JSON structure for the object type must be provided in the request body. Anything not proviuded in the request body will be removed from the object type.\n\nRequirements\n\nParameters\n\nThe id of the object type you want to update.\n\nYour Developer HAPIkey. This must be a Developer HAPIkey associated with the Developer portal that the OAuth app was created in.\n\nThe JSON representing the details for the object type.See creating an object type or the overview page for details on the required fields.\n\nResponse\n\nShow more\n\nDelete an object type\n\nDelete an existing object type.\n\nRequirements\n\nParameters\n\nThe id of the object type you want to delete.\n\nYour Developer HAPIkey. This must be a Developer HAPIkey associated with the Developer portal that the OAuth app was created in.\n\nResponse\n\nShow more"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/extensions/timeline",
    "content": "Timeline events\n\nIntroduction\n\nUse the timeline events API to add custom event information to CRM record timelines. You'll first need to create a public app, then an event template to display event data.\n\nUse cases for this API\n\nAfter setting up a new set of sign-up flows on your website, update contact timelines to indicate which flow they completed. In each event, you could also include a link to open an iframe that displays additional external data about the event.\n\nEvents\n\nGets the detailTemplate as rendered\n\nThis will take the detailTemplate from the event template and return an object rendering the specified event. If the template references extraData that isn't found in the event, it will be ignored and we'll render without it.\n\nGets the event\n\nThis returns the previously created event. It contains all existing info for the event, but not necessarily the CRM object.\n\nRenders the header or detail as HTML\n\nThis will take either the headerTemplate or detailTemplate from the event template and render for the specified event as HTML. If the template references extraData that isn't found in the event, it will be ignored and we'll render without it.\n\nCreate a single event\n\nCreates an instance of a timeline event based on an event template. Once created, this event is immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via objectPropertyName, this call will also attempt to updates those properties, or add them if they don't exist.\n\nCreates multiple events\n\nCreates multiple instances of timeline events based on an event template. Once created, these event are immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via objectPropertyName, this call will also attempt to updates those properties, or add them if they don't exist.\n\nTokens\n\nAdds a token to an existing event template\n\nOnce you've defined an event template, it's likely that you'll want to define tokens for it as well. You can do this on the event template itself or update individual tokens here.\n\nEvent type tokens allow you to attach custom data to events displayed in a timeline or used for list segmentation.\n\nYou can also use objectPropertyName to associate any CRM object properties. This will allow you to fully build out CRM objects.\n\nToken names should be unique across the template.\n\nUpdates an existing token on an event template\n\nThis will update the existing token on an event template. Name and type can't be changed on existing tokens.\n\nRemoves a token from the event template\n\nThis will remove the token from an existing template. Existing events and CRM objects will still retain the token and its mapped object properties, but new ones will not.\n\nThe timeline will still display this property for older CRM objects if it's still referenced in the template Markdown. New events will not.\n\nAny lists or reports referencing deleted tokens will no longer return new contacts, but old ones will still exist in the lists.\n\nTemplates\n\nGets a specific event template for your app\n\nView the current state of a specific template and its tokens.\n\nList all event templates for your app\n\nUse this to list all event templates owned by your app.\n\nCreate an event template for your app\n\nEvent templates define the general structure for a custom timeline event. This includes formatted copy for its heading and details, as well as any custom property definitions. The event could be something like viewing a video, registering for a webinar, or filling out a survey. A single app can define multiple event templates.\n\nEvent templates will be created for contacts by default, but they can be created for companies, tickets, and deals as well.\n\nEach event template contains its own set of tokens and Markdown templates. These tokens can be associated with any CRM object properties via the objectPropertyName field to fully build out CRM objects.\n\nYou must create an event template before you can create events.\n\nUpdate an existing event template\n\nUpdates an existing template and its tokens. This is primarily used to update the headerTemplate/detailTemplate, and those changes will take effect for existing events.\n\nYou can also update or replace all the tokens in the template here instead of doing individual API calls on the /tokens endpoint.\n\nDeletes an event template for the app\n\nThis will delete the event template. All associated events will be removed from search results and the timeline UI.\n\nThis action can't be undone, so it's highly recommended that you stop using any associated events before deleting a template.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/extensions/video-conferencing",
    "content": "Video conferencing extension\n\nIntroduction\n\nUse the video conference API to add video conferencing options when scheduling a meeting in HubSpot.\n\nUse cases for this API\n\nIf your company often conducts meetings over Zoom, use this API to enable users to add Zoom information to meeting invitations when schedule meetings in HubSpot.\n\nSettings\n\nGet settings\n\nReturn the settings for a video conference application with the specified ID.\n\nUpdate settings\n\nUpdates the settings for a video conference application with the specified ID.\n\nDelete settings\n\nDeletes the settings for a video conference application with the specified ID.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/contacts-timeline-embed",
    "content": "Contacts timeline embed\n\nThis is a stable API but uses an older format. This means some functionality may not be available (for example test calls and Postman integration).\n\nContact Timeline Embed\n\nThe Contact Timeline Embed is a custom timeline view that enables integrators to insert the HubSpot contact timeline into an external system. Integrators can use the URL to prompt a log in to HubSpot (if the users haven't already) and surface a custom, embeddable view of the HubSpot timeline. The custom view includes the contact's HubSpot score and allows full timeline filtering. For Marketing Professional/Enterprise portals, the embed also provides the option to enroll contacts in HubSpot workflows.\n\nRequirements\n\nParameters\n\nThe Hub ID of the portal in question.\nUsed in the request URL (see example).\n\nThe vid of the contact record you're looking to embed.\n\nResponse\n\nShow more"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/exports",
    "content": "Export CRM data\n\nIntroduction\n\nUse the exports API to export CRM records and property data from your HubSpot account.\n\nUse cases for this API\n\nTo perform an audit of your CRM, export all CRM records with specific properties to review any redundancies or inconsistencies.\n\nPublic_Exports\n\nGet the status of the export including the URL to download the file\n\nReturns the status of the export with taskId, including the URL of the resulting file if the export status is COMPLETE\n\nStart an export\n\nBegins exporting CRM data for the portal as specified in the request body\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/imports",
    "content": "Import CRM data\n\nIntroduction\n\nUse the imports API to import CRM records and activities, such as contacts, companies, and notes, into your HubSpot account.\n\nUse cases for this API\n\nAfter a successful in-person webinar, use this API to import a set of contacts based on who signed up during the event.\n\nCore\n\nGet active imports\n\nReturns a paged list of active imports for this account.\n\nGet the information on any import\n\nA complete summary of an import record, including any updates.\n\nCancel an active import\n\nThis allows a developer to cancel an active import.\n\nStart a new import\n\nBegins importing data from the specified file resources. This uploads the corresponding file and uses the import request object to convert rows in the files to objects.\n\nPublic_Imports\n\n/crm/v3/imports/{importId}/errors\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/lists",
    "content": "Lists\n\nIntroduction\n\nUse the lists API to manage list memberships for object lists.\n\nUse cases for this API\n\nYou want to bulk add contacts to a particular list, or remove company records from a company list.\n\nLists\n\nFetch List by ID\n\nFetch a single list by ILS list ID.\n\nFetch List by Name\n\nFetch a single list by list name and object type.\n\nFetch Multiple Lists\n\nFetch multiple lists in a single request by ILS list ID. The response will include the definitions of all lists that exist for the listIds provided.\n\nCreate List\n\nCreate a new list with the provided object list definition.\n\nSearch Lists\n\nSearch lists by list name or page through all lists by providing an empty query value.\n\nRestore a List\n\nRestore a previously deleted list by ILS list ID. Deleted lists are eligible to be restored up-to 90-days after the list has been deleted.\n\nUpdate List Filter Definition\n\nUpdate the filter branch definition of a DYNAMIC list. Once updated, the list memberships will be re-evaluated and updated to match the new definition.\n\nUpdate List Name\n\nUpdate the name of a list. The name must be globally unique relative to all other public lists in the portal.\n\nDelete a List\n\nDelete a list by ILS list ID. Lists deleted through this endpoint can be restored up to 90-days following the delete. After 90-days, the list is purged and can no longer be restored.\n\nMemberships\n\nFetch List Memberships Ordered by Added to List Date\n\nFetch the memberships of a list in order sorted by the time the records were added to the list.\n\nThe recordIds are sorted in ascending order if an after offset or no offset is provided. If only a before offset is provided, then the records are sorted in descending order.\n\nThe after offset parameter will take precedence over the before offset in a case where both are provided.\n\nFetch List Memberships Ordered by ID\n\nFetch the memberships of a list in order sorted by the recordId of the records in the list.\n\nThe recordIds are sorted in ascending order if an after offset or no offset is provided. If only a before offset is provided, then the records are sorted in descending order.\n\nThe after offset parameter will take precedence over the before offset in a case where both are provided.\n\nGet lists record is member of\n\nFor given record provide lists this record is member of.\n\nAdd All Records from a Source List to a Destination List\n\nAdd all of the records from a source list (specified by the sourceListId) to a destination list (specified by the listId). Records that are already members of the destination list will be ignored. The destination and source list IDs must be different. The destination and source lists must contain records of the same type (e.g. contacts, companies, etc.).\n\nThis endpoint only works for destination lists that have a processingType of MANUAL or SNAPSHOT. The source list can have any processingType.\n\nThis endpoint only supports a sourceListId for lists with less than 100,000 memberships.\n\nAdd and/or Remove Records from a List\n\nAdd and/or remove records that have already been created in the system to and/or from a list.\n\nThis endpoint only works for lists that have a processingType of MANUAL or SNAPSHOT.\n\nAdd Records to a List\n\nAdd the records provided to the list. Records that do not exist or that are already members of the list are ignored.\n\nThis endpoint only works for lists that have a processingType of MANUAL or SNAPSHOT.\n\nRemove Records from a List\n\nRemove the records provided from the list. Records that do not exist or that are not members of the list are ignored.\n\nThis endpoint only works for lists that have a processingType of MANUAL or SNAPSHOT.\n\nDelete All Records from a List\n\nRemove all of the records from a list. Note: The list is not deleted.\n\nThis endpoint only works for lists that have a processingType of MANUAL or SNAPSHOT.\n\nThis endpoint only supports lists that have less than 100,000 memberships.\n\nFolders\n\nRetrieves a folder.\n\nRetrieves a folder and recursively includes all folders via the childNodes attribute.  The child lists field will be empty in all child nodes. Only the folder retrieved will include the child lists in that folder.\n\nCreates a folder\n\nCreates a folder with the given information.\n\nMoves a folder\n\nThis moves the folder from its current location to a new location. It updates the parent of this folder to the new Id given.\n\nMoves a list to a given folder\n\nGiven a list and a folder, the list will be moved to that folder.\n\nRename a folder\n\nRenames the given folderId with a new name.\n\nDeletes a folder\n\nDeletes the folder with the given Id.\n\nMapping\n\nTranslate Legacy List Id to Modern List Id\n\nThis API allows translation of legacy list id to list id. This is a temporary API allowed for mapping old id's to new id's and will expire on May 30th, 2025.\n\nTranslate Legacy List Id to Modern List Id in Batch\n\nThis API allows translation of a batch of legacy list id's to list id's. This allows for a maximum of 10,000 id's. This is a temporary API allowed for mapping old id's to new id's and will expire on May 30th, 2025.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/owners",
    "content": "Owners\n\nIntroduction\n\nEach user in a HubSpot account is assigned an owner ID, which HubSpot uses to map the user to their assigned CRM records, activities, and more. Use the owners API to retrieve owner IDs and other related information for users in the account. To assign an owner to a CRM record, you can use the properties API to set the hubspot_owner_id property.\n\nUse cases for this API\n\nRetrieve the owner IDs for all users in the account to later assign CRM records across the team.\n\nOwners\n\nGet a page of owners\n\nRead an owner by given `id` or `userId`\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/pipelines",
    "content": "Pipelines\n\nIntroduction\n\nUse the pipelines API to create and manage deal and ticket pipelines. Pipelines enable you to track the status or progress of deals and tickets, such as closing deals and opening support tickets.\n\nUse cases for this API\n\nTo streamline customer support processes, use this API to retrieve your existing ticket pipelines and add new stages based on your business needs. Support reps can then assign tickets to those pipeline stages to track progress on customer issues.\n\nPipeline Stage Audits\n\nReturn an audit of all changes to the pipeline stage\n\nReturn a reverse chronological list of all mutations that have occurred on the pipeline stage identified by {stageId}.\n\nPipelines\n\nRetrieve all pipelines\n\nReturn all pipelines for the object type specified by {objectType}.\n\nReturn a pipeline by ID\n\nReturn a single pipeline object identified by its unique {pipelineId}.\n\nCreate a pipeline\n\nCreate a new pipeline with the provided property values. The entire pipeline object, including its unique ID, will be returned in the response.\n\nReplace a pipeline\n\nReplace all the properties of an existing pipeline with the values provided. This will overwrite any existing pipeline stages. The updated pipeline will be returned in the response.\n\nUpdate a pipeline\n\nPerform a partial update of the pipeline identified by {pipelineId}. The updated pipeline will be returned in the response.\n\nDelete a pipeline\n\nDelete the pipeline identified by {pipelineId}.\n\nPipeline Audits\n\nReturn an audit of all changes to the pipeline\n\nReturn a reverse chronological list of all mutations that have occurred on the pipeline identified by {pipelineId}.\n\nPipeline Stages\n\nReturn a pipeline stage by ID\n\nReturn the stage identified by {stageId} associated with the pipeline identified by {pipelineId}.\n\nReturn all stages of a pipeline\n\nReturn all the stages associated with the pipeline identified by {pipelineId}.\n\nCreate a pipeline stage\n\nCreate a new stage associated with the pipeline identified by {pipelineId}. The entire stage object, including its unique ID, will be returned in the response.\n\nReplace a pipeline stage\n\nReplace all the properties of an existing pipeline stage with the values provided. The updated stage will be returned in the response.\n\nUpdate a pipeline stage\n\nPerform a partial update of the pipeline stage identified by {stageId} associated with the pipeline identified by {pipelineId}. Any properties not included in this update will keep their existing values. The updated stage will be returned in the response.\n\nDelete a pipeline stage\n\nDelete the pipeline stage identified by {stageId} associated with the pipeline identified by {pipelineId}.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/properties",
    "content": "Properties\n\nIntroduction\n\nUse the properties API to store information in fields on individual contact records. You can use this API to manage existing default and custom properties, create new custom properties, and more.\n\nUse cases for this API\n\nCreate a set of new custom multi-select properties for storing contract data on company records.\n\nBatch\n\nArchive a batch of properties\n\nArchive a provided list of properties. This method will return a 204 No Content response on success regardless of the initial state of the property (e.g. active, already archived, non-existent).\n\nCreate a batch of properties\n\nCreate a batch of properties using the same rules as when creating an individual property.\n\nRead a batch of properties\n\nRead a provided list of properties.\n\nGroups\n\nRead a property group\n\nRead a property group identified by {groupName}.\n\nRead all property groups\n\nRead all existing property groups for the specified object type and HubSpot account.\n\nCreate a property group\n\nCreate and return a copy of a new property group.\n\nUpdate a property group\n\nPerform a partial update of a property group identified by {groupName}. Provided fields will be overwritten.\n\nArchive a property group\n\nMove a property group identified by {groupName} to the recycling bin.\n\nCore\n\nRead a property\n\nRead a property identified by {propertyName}.\n\nRead all properties\n\nRead all existing properties for the specified object type and HubSpot account.\n\nCreate a property\n\nCreate and return a copy of a new property for the specified object type.\n\nUpdate a property\n\nPerform a partial update of a property identified by {propertyName}. Provided fields will be overwritten.\n\nArchive a property\n\nMove a property identified by {propertyName} to the recycling bin.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/sensitive-data",
    "content": "Access and manage Sensitive Data\n\nWith Sensitive Data properties, HubSpot users in Enterprise accounts can store Sensitive Data and use the data in HubSpot tools. For example, you can create a Passport Number property and filter contacts in a list based on its values. If you have access to the Highly Sensitive Data beta, you can also store highly sensitive information, such as social security numbers. Refer to the Sensitive Data terms page to understand which types of Sensitive Data you can store and which HubSpot tools can access each type of Sensitive Data.\n\nExisting HubSpot APIs and apps will continue to work as expected, but if you have an app that needs access to Sensitive Data, you must update the app’s scopes and require app users to authorize and install the app. Once your app gains access, you can use certain APIs to manage your Sensitive Data.\n\nSensitive Data scopes\n\nFor an app to access Sensitive Data, it must have the sensitive scopes for each applicable object. For example, if your app needs to read and update Sensitive Data on companies and contacts, you’ll need to add the company and contact read and write sensitive scopes.\n\nIf you want to access Highly Sensitive Data (BETA), you'll need additional scopes.\n\nPlease note: sensitive and highly sensitive scopes are not required to retrieve schema information for a Sensitive Data or Highly Sensitive Data property, but are required to create or edit Sensitive Data or Highly Sensitive data properties and to access the property values.\n\nSensitive scopes\n\nThe sensitive scopes are:\n\nHighly sensitive scopes (BETA)\n\nThe highly sensitive scopes are:\n\nLearn more about storing Highly Sensitive Data (BETA).\n\nTurn on Sensitive Data access for your app\n\nThe process for gaining access to Sensitive Data scopes depends on whether you have a private or public app.\n\nPrivate apps\n\nFor private apps, you can add the scopes in your private app settings.\n\nYour private app's access token will immediately have access to read and/or write Sensitive Data properties on the selected objects.\n\nPublic apps\n\nFor public apps, you’ll need to request access to specific sensitive scopes from HubSpot’s Ecosystem Quality team. If approved, the team will allowlist the sensitive scopes to test your app and will help you publish your app with the required scopes following a period of testing and compliance checks. You’ll then need to notify app users of the change and request re-authorization of your app.\n\nNavigate to this page to view the full process and fill out the form to request Sensitive Data access for public apps.\n\nRequest authorization from app users\n\nOnce the sensitive scopes have been added to your app, you’ll need to send authorization URLs to app users so they can authorize and install the app, granting access to Sensitive Data scopes. If they’re existing users of the app, they’ll need to reauthorize with the updated scopes for Sensitive Data access to apply.\n\nOnce you’ve notified your app users, a Super admin in their account will need to:\n\nOnce authorized and installed, the app can access Sensitive Data via APIs for the account.\n\nManage Sensitive Data\n\nOnce your app has access to Sensitive Data, you can use the following APIs to manage Sensitive Data:\n\nRetrieve Sensitive Data properties\n\nYou can use the properties API to view Sensitive Data property definitions and schema information.\n\nTo retrieve all Sensitive Data properties for an object, include the dataSensitivity query parameter with the value sensitive. To retrieve all Highly Sensitive Data properties (BETA), use the value highly_sensitive. If you don't include this parameter when retrieving properties, only non-sensitive properties will be returned. For example, to retrieve all contact properties that store Sensitive Data, make a GET request to /crm/v3/properties/contacts?dataSensitivity=sensitive.\n\nFor example, if you you have a Passport Number Sensitive Data property, when you retrieve it, your response would look like:\n\nCreate or update Sensitive Data properties\n\nYou can use the properties API to create or update Sensitive Data properties. You must have the sensitive.write scope for the given object to create or edit its properties.\n\nPlease note: once you've created a property as sensitive, you cannot change the sensitivity setting.\n\nFor example, to create a Sensitive Data property for contacts, your request would look like:\n\nLearn more about using the properties API.\n\nRetrieve Sensitive Data property values\n\nYou can retrieve a record’s value for a Sensitive Data property. To do this, make a GET request to /crm/v3/objects/{object}/{recordId} and include the Sensitive Data property in your query parameters.\n\nFor example, to retrieve a contact’s Passport Number value, your request URL would look like: https://api.hubspot.com/crm/v3/objects/contacts/1234567?properties=passport_number.\n\nSet or update Sensitive Data property values\n\nYou can use the object APIs to create or edit records to set values for Sensitive Data properties.\n\nFor example, if you want to create a contact and set a value for the Passport Number property, your request would look like:\n\nIf you wanted to update the property’s value later on, your request would look like:\n\nCRM Search API\n\nIf your app has the Sensitive Data scopes, you can use the V3 CRM search API to search for records with values for Sensitive Data properties. To do so, make a POST request to /crm/v3/objects/{object}/search and include the Sensitive Data properties you want to search for.\n\nFor example, the following search would return contacts with their first name, last name, and passport number values:\n\nForms API\n\nTo send form submissions containing Sensitive Data to HubSpot, make a POST request to https://api.hsforms.com/submissions/v3/integration/secure/submit/{HubID}/:formGuid. Learn more about using this endpoint..\n\nThis is currently the only forms submission API endpoint that can be used with Sensitive Data because it supports authentication. Any other requests to the forms API will result in an error or hide Sensitive Data values.\n\nWebhooks API\n\nYou can create propertyChange event type webhook subscriptions for Sensitive Data properties on contacts, companies, deals, and tickets.\n\nFor non-sensitive property propertyChange events, the webhook payload has the new value in the propertyValue field. For Sensitive Data property propertyChange events, the webhook payload will have the propertyValue set as \"REDACTED\". To view the value, you'll need to retrieve the record's value for the Sensitive Data property.\n\nFor example, a webhook payload for a Sensitive Data property propertyChange event contact subscription would look like the following:\n\nErrors\n\nThe following errors and redactions are expected:"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/crm/limits-tracking",
    "content": "Limits tracking\n\nIntroduction\n\nUse the limits tracking API to view limits and usage for CRM data including records, associations, pipelines, and properties.\n\nUse cases for this API\n\nBefore importing a large file of contacts, you want to check how many contact records you've created compared to your account's limit.\n\nLimits\n\nRead association label limits\n\nReturns limits and usage for custom association labels\n\nRead calculation property limits\n\nReturns overall limit and per object usage for calculated properties\n\nRead custom object limits\n\nReturns limits and usage for custom object schemas\n\nRead custom property limits\n\nReturns limits and usage per object for custom properties\n\nRead pipeline limits\n\nReturns limits and usage per object for pipelines\n\nRead record association limits\n\nReturns objects with records approaching or at association limits\n\nRead record association limits between two objects\n\nReturns records approaching or at association limits between two objects\n\nRead record association limits from an object\n\nReturns objects for which the from object has records approaching or at association limits\n\nRead record limits\n\nReturns limits and usage per object for records\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/library/files",
    "content": "Files\n\nIntroduction\n\nUse the files API to manage and store files in HubSpot's file manager tool. Files can be used throughout other HubSpot tools, such as inserting image files into emails.\n\nUse cases for this API\n\nWhen launching a company rebrand, upload a new set of branded images and assets to the file manager so that marketing and sales teams can update their assets accordingly.\n\nFiles\n\n/files/v3/files/stat/{path}\n\nCheck import status.\n\nCheck the status of requested import.\n\nGet file.\n\nGet file by ID.\n\nGet signed URL to access private file.\n\nGenerates signed URL that allows temporary access to a private file.\n\nSearch files\n\nSearch through files in the file manager. Does not display hidden or archived files.\n\nImport a file from a URL into the file manager.\n\nAsynchronously imports the file at the given URL into the file manager.\n\nUpload file\n\nUpload a single file with content specified in request body.\n\nReplace file.\n\nReplace existing file data with new file data. Can be used to change image content without having to upload a new file and update all references.\n\nupdate file properties\n\nUpdate properties of file by ID.\n\nDelete file\n\nDelete file by ID\n\nGDPR delete\n\nGDRP delete file\n\nFolders\n\nCheck folder update status.\n\nCheck status of folder update. Folder updates happen asynchronously.\n\nGet folder\n\nGet folder by ID\n\nGet folder.\n\nGet folder by path.\n\nSearch folders\n\nSearch for folders. Does not contain hidden or archived folders.\n\nCreate folder.\n\nCreates a folder.\n\nUpdate folder properties\n\nUpdate properties of folder by given ID. This action happens asynchronously and will update all of the folder's children as well.\n\nDelete folder.\n\nDelete folder by ID.\n\nDelete folder.\n\nDelete folder by path.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/library/meetings",
    "content": "Meetings\n\nIntroduction\n\nUse the Meetings API to retrieve information about meetings created through a scheduling page. You can also book a meeting with a scheduling page through the API.\n\nUse cases for this API\n\nYou need to get a list of meeting links or book meetings, or you need to create an interface so customers can book meetings with your team.\n\nExternal_Meetings_Link\n\n/scheduler/v3/meetings/meeting-links\n\n/scheduler/v3/meetings/meeting-links/book/{slug}\n\n/scheduler/v3/meetings/meeting-links/book/availability-page/{slug}\n\n/scheduler/v3/meetings/meeting-links/book\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/marketing/calls-to-action-sdk",
    "content": "Calls-to-action JavaScript API\n\nThe Calls-to-action JavaScript API allows you to render HubSpot Calls-To-Actions on your website. You can use this API to programmatically control when a CTA appears or listen to events triggered when a user interacts with one of your CTAs.\n\nInitializing\n\nThe API is housed in the window.HubSpotCallsToActions object, which provides access to all available methods. The object is created by the HubSpot tracking code, but may not be available immediately on page load. To defer accessing the API until it's initialized, you can use the window.hsCallsToActionReady helper.\n\nwindow.hsCallsToActionReady is an optional field you can define on the window object which enables you to specify code to be executed as soon as the API becomes available. If used, this field should be set to an array of functions. Once the API has been initialized, this event handler will check for the existence of this array and execute the functions in order.\n\nRefresh CTAs\n\nHubSpotCallsToActions.refresh\n\nRefresh and re-render CTAs, given the current page URL.\n\nIf you're using CTAs in a single-page application, this function can be useful to refresh the CTAs shown based on a route change (i.e., dynamically show a CTA based on a specific route). If HubSpotCallsToActions.refresh is called on a route where there are no CTAs present, any visible CTAs will be removed.\n\nClose a single CTA\n\nHubSpotCallsToActions.close\n\nCloses a specific CTA based on its ID. Display frequency rules will be applied to a CTA once it's closed. Calling this function will have no effect on embedded CTAs.\n\nClose all CTAs on a page\n\nHubSpotCallsToActions.closeAll\n\nClose all CTAs on a page. Calling this function will have no effect on embedded CTAs.\n\nRegister an event listener\n\nHubSpotCallsToActions.on\n\nRegister an event listener that will fire based on two arguments:\n\nSee the example snippet below for an example of defining a handler for the onCallToActionReady event. You can also review a full list of events you can define handlers in the table below.\n\nUnregister an event listener\n\nHubSpotCallsToActions.off\n\nUnregister a previously registered event listener\n\nEvents\n\nCTAs will emit various events throughout its lifecycle. These events are defined in the table below. You can define listeners for each of these events using the HubSpotCallsToAction.on function, as described in the section above.\n\nEvents will also be posted to the parent window, which you can define listeners for using window.addEventListener.\n\nFor example, the snippet below defines an event listener that checks for the onCallToActionReady event being emitted."
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/marketing/campaigns",
    "content": "Campaigns\n\nIntroduction\n\nYou can use campaign endpoints to create, read, update, and delete marketing campaign data. For example, you can use these endpoints to create and manage HubSpot campaigns from your external applications. You can also transfer campaign data to external data warehouses for analytics.\n\nSearch\n\nCampaign search\n\nThis endpoint allows users to search for and return a page of campaigns based on various query parameters. Users can filter by name, sort, and paginate through the campaigns, as well as control which properties are returned in the response.\n\nBasic\n\nRead a campaign\n\nGet a campaign identified by a specific campaignGuid with the given properties. Along with the campaign information, it also returns information about assets. Depending on the query parameters used, this can also be used to return information about the corresponding assets' metrics. Metrics are available only if startDate and endDate are provided.\n\nCreate a campaign\n\nCreate a campaign with the given properties and return the campaign object, including the campaignGuid and created properties.\n\nUpdate campaign\n\nPerform a partial update of a campaign identified by the specified campaignGuid. Provided property values will be overwritten. Read-only and non-existent properties will cause 400 error.\nIf an empty string is passed for any property in the Batch Update, it will reset that property's value.\n\nDelete campaign\n\nDelete a specified campaign from the system.\nThis call will return a 204 No Content response regardless of whether the campaignGuid provided corresponds to an existing campaign or not.\n\nBatch\n\nCreate a batch of campaigns\n\nThis endpoint creates a batch of campaigns. The maximum number of items in a batch request is 50.\nThe campaigns in the response are not guaranteed to be in the same order as they were provided in the request.\n\nDelete a batch of campaigns\n\nThis endpoint deletes a batch of campaigns.\nThe maximum number of items in a batch request is 50.\nThe response will always be 204 No Content, regardless of whether the campaigns exist or not, whether they were successfully deleted or not, or if only some of the campaigns in the batch were deleted.\n\nRead a batch of campaigns\n\nThis endpoint reads a batch of campaigns based on the provided input data and returns the campaigns along with their associated assets.\nThe maximum number of items in a batch request is 50.\nThe campaigns in the response are not guaranteed to be in the same order as they were provided in the request.\nIf duplicate campaign IDs are provided in the request, duplicates will be ignored. The response will include only unique IDs and will be returned without duplicates.\n\nUpdate a batch of campaigns\n\nThis endpoint updates a batch of campaigns based on the provided input data.\nThe maximum number of items in a batch request is 50.\nIf an empty string (\"\") is passed for any property in the Batch Update, it will reset that property's value.\n\nReports\n\nFetch contact IDs\n\nFetch the list of contact IDs for the specified campaign and contact type\n\nFetch revenue\n\nFetch revenue attribution report data for a specified campaign\n\nGet Campaign Metrics\n\nThis endpoint retrieves key attribution metrics for a specified campaign, such as sessions, new contacts, and influenced contacts.\n\nAsset\n\nList assets\n\nThis endpoint lists all assets of the campaign by asset type. The assetType parameter is required, and each request can only fetch assets of a single type.\nAsset metrics can also be fetched along with the assets; they are available only if start and end dates are provided.\n\nAdd asset association\n\nAssociate a specified asset with a campaign.\nImportant: Currently, only the following asset types can be associated and disassociated via the API: Forms, Static lists, External website pages\n\nRemove asset association\n\nDisassociate a specified asset from a campaign.\nImportant: Currently, only the following asset types can be associated and disassociated via the API: Forms, Static lists, External website pages\n\nBudget\n\nRead budget\n\nRetrieve detailed information about the budget and spend items for a specified campaign, including the total budget, total spend, and remaining budget.\nBudget and Spend items may be returned in any order, but the order field specifies their sequence based on the creation date. The item with order 0 is the oldest, and items with higher order values are newer\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/marketing/emails/marketing-emails",
    "content": "Marketing emails\n\nIntroduction\n\nUse the marketing email API to create, manage, and retrieve details about marketing emails. You can also this use API to retrieve statistics related to email sends, similar to what you can see in HubSpot.\n\nUse cases for this API\n\nYou want to programmatically create marketing emails, then retrieve their send statistics at a later time.\n\nStatistics\n\nGet aggregated statistic intervals.\n\nGet aggregated statistics in intervals for a specified time span. Each interval contains aggregated statistics of the emails that were sent in that time.\n\nGet aggregated statistics.\n\nUse this endpoint to get aggregated statistics of emails sent in a specified time span. It also returns the list of emails that were sent during the time span.\n\nMarketing Emails\n\nGet a revision of a marketing email.\n\nGet a specific revision of a marketing email.\n\nGet all marketing emails for a HubSpot account.\n\nThe results can be filtered, allowing you to find a specific set of emails. See the table below for a full list of filtering options.\n\nGet draft version of a marketing email\n\nGet the draft version of an email (if it exists). If no draft version exists, the published email is returned.\n\nGet revisions of a marketing email\n\nGet a list of all versions of a marketing email, with each entry including the full state of that particular version. The current revision has the ID -1.\n\nGet the details of a specified marketing email.\n\nGet the details for a marketing email.\n\nGet the variation of a an A/B marketing email\n\nThis endpoint lets you obtain the variation of an A/B marketing email. If the email is variation A (master) it will return variation B (variant) and vice versa.\n\nClone a marketing email.\n\nThis will create a duplicate email with the same properties as the original, with the exception of a unique ID.\n\nCreate a new marketing email.\n\nUse this endpoint to create a new marketing email.\n\nCreate an A/B test variation of a marketing email.\n\nCreate a variation of a marketing email for an A/B test. The new variation will be created as a draft. If an active variation already exists, a new one won't be created.\n\nPublish or send a marketing email.\n\nIf you have a Marketing Hub Enterprise account or the transactional email add-on, you can use this endpoint to publish an automated email or send/schedule a regular email.\n\nReset Draft\n\nResets the draft back to a copy of the live object.\n\nRestore a revision of a marketing email\n\nRestores a previous revision of a marketing email. The current revision becomes old, and the restored revision is given a new version number.\n\nRestore a revision of a marketing email to DRAFT state\n\nRestores a previous revision of a marketing email to DRAFT state. If there is currently something in the draft for that object, it is overwritten.\n\nUnpublish or cancel a marketing email.\n\nIf you have a Marketing Hub Enterprise account or the transactional email add-on, you can use this endpoint to unpublish an automated email or cancel a regular email. If the email is already in the process of being sent, canceling might not be possible.\n\nCreate or update draft version\n\nCreate or update the draft version of a marketing email. If no draft exists, the system creates a draft from the current “live” email then applies the request body to that draft. The draft version only lives on the buffer—the email is not cloned.\n\nUpdate a marketing email.\n\nChange properties of a marketing email.\n\nDelete a marketing email.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/marketing/emails/single-send-api",
    "content": "Single send API\n\nIntroduction\n\nThe single-send API allows you to send template emails created in the HubSpot marketing email tool using a JSON-formatted POST request.\n\nUse cases for this API\n\nAny marketing emails sent through the single-send API will automatically be associated with contact records based on their email address, and update non-marketing contacts and set them to marketing contacts .\n\nSingle_Send\n\n/marketing/v4/email/single-send\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/marketing/emails/transactional-emails",
    "content": "Transactional emails\n\nIntroduction\n\nUse the transactional email API to send emails from a dedicated IP address to your contacts for essential business transactions, including account updates or terms of service changes.\n\nUse cases for this API\n\nAfter a customer converts or purchases a product from your business, you want to send them a receipt of their transaction.\n\nSingle send\n\nSend a single transactional email asynchronously.\n\nAsynchronously send a transactional email. Returns the status of the email send with a statusId that can be used to continuously query for the status using the Email Send Status API.\n\nPublic SMTP tokens\n\nQuery a single token by ID.\n\nQuery a single token by ID.\n\nQuery SMTP API tokens by campaign name or an emailCampaignId.\n\nQuery multiple SMTP API tokens by campaign name or a single token by emailCampaignId.\n\nCreate a SMTP API token.\n\nCreate a SMTP API token.\n\nReset the password of an existing token.\n\nAllows the creation of a replacement password for a given token. Once the password is successfully reset, the old password for the token will be invalid.\n\nDelete a single token by ID.\n\nDelete a single token by ID.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/marketing/forms",
    "content": "Forms\n\nIntroduction\n\nUse the forms API to create and manage forms in your HubSpot account, which you can then embed on your website to collect form submissions from website visitors.\n\nUse cases for this API\n\nProgrammatically change certain parts of a HubSpot form based on more complex use-cases or data from a third-party service (displaying a field dynamically based on data you're querying from an external source).\n\nForms\n\nGet a form definition\n\nReturns a form based on the form ID provided.\n\nGet a list of forms\n\nReturns a list of forms based on the search filters. By default, it returns the first 20 hubspot forms\n\nCreate a form\n\nAdd a new hubspot form\n\nUpdate a form definition\n\nUpdate all fields of a hubspot form definition.\n\nPartially update a form definition\n\nUpdate some of the form definition components\n\nArchive a form definition\n\nArchive a form definition. New submissions will not be accepted and the form definition will be permanently deleted after 3 months.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/marketing/marketing-events",
    "content": "Marketing events\n\nIntroduction\n\nA marketing event is a CRM object, similar to contacts and companies, that enables you to track marketing events, such as a webinar, along with the contacts who registered and attended the event. Below, learn more about working with the marketing event API to integrate marketing events into an app.\n\nUse cases for this API\n\nYou have an external system that handles registration for your webinars and you want to ensure that attendee data and behavior is synced with your HubSpot CRM.\n\nAdd event attendees\n\nRecord Participants by ContactId with Marketing Event External Ids\n\nRecords the participation of multiple HubSpot contacts in a Marketing Event using their HubSpot contact IDs.\n\nAdditional Functionality:\n\nAllowed Properties:\nFor the state \"attend\":\n\nRecord Participants by ContactId with Marketing Event Object Id\n\nRecords the participation of multiple HubSpot contacts in a Marketing Event using their HubSpot contact IDs.\n\nAdditional Functionality:\n\nAllowed Properties:\nFor the state \"attend\":\n\nRecord Participants by Email with Marketing Event External Ids\n\nRecords the participation of multiple HubSpot contacts in a Marketing Event using their email addresses.\n\nIf a contact does not exist, it will be automatically created. The contactProperties field is used exclusively for creating new contacts and will not update properties of existing contacts.\n\nAdditional Functionality:\n\nAllowed Properties:\nFor the state \"attend\":\n\nRecord Participants by Email with Marketing Event Object Id\n\nRecords the participation of multiple HubSpot contacts in a Marketing Event using their email addresses.\n\nIf a contact does not exist, it will be automatically created. The contactProperties field is used exclusively for creating new contacts and will not update properties of existing contacts.\n\nAdditional Functionality:\n\nAllowed Properties:\nFor the state \"attend\":\n\nRetrieve Participant State\n\nRead participations breakdown by Contact identifier\n\nRead Contact's participations by identifier - email or internal id.\n\nRead participations breakdown by Marketing Event external identifier\n\nRead Marketing event's participations breakdown with optional filters by externalAccountId and externalEventId pair.\n\nRead participations breakdown by Marketing Event internal identifier\n\nRead Marketing event's participations breakdown with optional filters by internal identifier marketingEventId.\n\nRead participations counters by Marketing Event external identifier\n\nRead Marketing event's participations counters by externalAccountId and externalEventId pair.\n\nRead participations counters by Marketing Event internal identifier\n\nRead Marketing event's participations counters by internal identifier marketingEventId.\n\nSubscriber State Changes\n\nRecord a subscriber state by contact email\n\nRecord a subscriber state between multiple HubSpot contacts and a marketing event, using contact email addresses. Note that the contact must already exist in HubSpot; a contact will not be created. The contactProperties field is used only when creating a new contact. These properties will not update existing contacts.\n\nRecord a subscriber state by contact ID\n\nRecord a subscriber state between multiple HubSpot contacts and a marketing event, using HubSpot contact IDs. Note that the contact must already exist in HubSpot; a contact will not be created.\n\nBasic\n\nGet all marketing event\n\nReturns all Marketing Events available on the portal, along with their properties, regardless of whether they were created manually or through the application.\n\nThe marketing events returned by this endpoint are sorted by objectId.\n\nGet Marketing Event by External IDs\n\nReturns the details of a Marketing Event with the specified externalAccountId, externalEventId, if it exists.\n\nOnly Marketing Events created by the same app making the request can be retrieved.\n\nGet Marketing Event by objectId\n\nReturns the details of a Marketing Event with the specified objectId, if it exists.\n\nCreate a marketing event\n\nCreates a new marketing event in HubSpot\n\nCreate or update a marketing event\n\nUpserts a marketing event If there is an existing marketing event with the specified ID, it will be updated; otherwise a new event will be created.\n\nUpdate Marketing Event by External IDs\n\nUpdates the details of an existing Marketing Event identified by its externalAccountId, externalEventId if it exists.\n\nOnly Marketing Events created by the same app can be updated.\n\nUpdate Marketing Event by objectId\n\nUpdates the details of an existing Marketing Event identified by its objectId, if it exists.\n\nDelete Marketing Event by External Ids\n\nDeletes the existing Marketing Event with the specified externalAccountId, externalEventId, if it exists.\n\nOnly Marketing Events created by the same app can be deleted.\n\nDelete Marketing Event by objectId\n\nDeletes the existing Marketing Event with the specified objectId, if it exists.\n\nBatch\n\nCreate or Update Multiple Marketing Events\n\nUpserts multiple Marketing Events. If a Marketing Event with the specified ID already exists, it will be updated; otherwise, a new event will be created.\n\nOnly Marketing Events originally created by the same app can be updated.\n\nDelete Multiple Marketing Events by External Ids\n\nDeletes multiple Marketing Events based on externalAccountId, externalEventId, and appId.\n\nOnly Marketing Events created by the same apps will be deleted; events from other apps cannot be removed by this endpoint.\n\nDelete Multiple Marketing Events by ObjectId\n\nDeletes multiple Marketing Events from the portal based on their objectId, if they exist.\n\nResponses:\n204: Returned if all specified Marketing Events were successfully deleted.\n207: Returned if some objectIds did not correspond to any existing Marketing Events.\n\nUpdate Multiple Marketing Events by ObjectId\n\nUpdates multiple Marketing Events on the portal based on their objectId, if they exist.\n\nList Associations\n\nGet lists associated with a marketing event\n\nGets lists associated with a marketing event by external account id and external event id\n\nGet lists associated with a marketing event\n\nGets lists associated with a marketing event by marketing event id\n\nAssociate a list with a marketing event\n\nAssociates a list with a marketing event by marketing event id and ILS list id\n\nAssociate a list with a marketing event\n\nAssociates a list with a marketing event by external account id, external event id, and ILS list id\n\nDisassociate a list from a marketing event\n\nDisassociates a list from a marketing event by marketing event id and ILS list id\n\nDisassociate a list from a marketing event\n\nDisassociates a list from a marketing event by external account id, external event id, and ILS list id\n\nIdentifiers\n\nFind App-Specific Marketing Events by External Event Id\n\nRetrieves Marketing Events where the externalEventId matches the value provided in the request, limited to events created by the app making the request.\n\nMarketing Events created by other apps will not be included in the results.\n\nFind Marketing Events by External Event Id\n\nThis endpoint searches the portal for all Marketing Events whose externalEventId matches the value provided in the request.\n\nIt retrieves the objectId and additional event details for each matching Marketing Event.\n\nSince multiple Marketing Events can have the same externalEventId, the endpoint returns all matching results.\n\nNote: Marketing Events become searchable by externalEventId a few minutes after creation.\n\nChange property\n\nMark a marketing event as cancelled\n\nMark a marketing event as cancelled.\n\nMark a marketing event as completed\n\nMark a marketing event as completed\n\nSettings\n\nRetrieve the application settings\n\nRetrieve the current settings for the application.\n\nUpdate the application settings\n\nCreate or update the current settings for the application.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/marketing/subscriptions",
    "content": "Subscriptions\n\nIntroduction\n\nUse the subscriptions API to programmatically subscribe or unsubscribe contacts from your email subscription types, or unsubscribe a contact from all email communication. These APIs also provide support for business units.\n\nUse cases for this API\n\nEnsure a contact's opt-in status is updated if they opted out of communications from your business via a service external to HubSpot.\n\nSubscription status\n\nGet subscription preferences for a specific contact\n\nRetrieve a contact's current email subscription preferences.\n\nRetrieve a contact's unsubscribed status\n\nCheck whether a contact has unsubscribed from all email subscriptions. If a contact has not opted out of all communications, the response results array will be empty.\n\nBatch retrieve contacts who have opted out of all communications\n\nChecks whether a set of contacts have opted out of all communications.\n\nBatch retrieve subscription statuses\n\nBatch retrieve subscription statuses for a set of contacts.\n\nBatch unsubscribe contacts from all subscriptions\n\nUnsubscribe a set of contacts from all email subscriptions.\n\nBatch update subscription status\n\nUpdate the subscription status for a set of contacts.\n\nUnsubscribe a contact from all subscriptions\n\nUnsubscribe a contact from all email subscriptions.\n\nUpdate a contact's subscription status\n\nSet the subscription status of a specific contact.\n\nSubscription definitions\n\nRetrieve all subscription status definitions\n\nGet a list of subscription status definitions from the account.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/marketing/subscriptions-preferences",
    "content": "Subscriptions preferences\n\nIntroduction\n\nUse the subscriptions API to programmatically subscribe or unsubscribe contacts from your email subscription types, or unsubscribe a contact from all email communication. These APIs also provide support for business units.\n\nUse cases for this API\n\nEnsure a contact's opt-in status is updated if they opted out of communications from your business via a service external to HubSpot.\n\nSubscription status\n\nGet subscription preferences for a specific contact\n\nRetrieve a contact's current email subscription preferences.\n\nRetrieve a contact's unsubscribed status\n\nCheck whether a contact has unsubscribed from all email subscriptions. If a contact has not opted out of all communications, the response results array will be empty.\n\nBatch retrieve contacts who have opted out of all communications\n\nChecks whether a set of contacts have opted out of all communications.\n\nBatch retrieve subscription statuses\n\nBatch retrieve subscription statuses for a set of contacts.\n\nBatch unsubscribe contacts from all subscriptions\n\nUnsubscribe a set of contacts from all email subscriptions.\n\nBatch update subscription status\n\nUpdate the subscription status for a set of contacts.\n\nUnsubscribe a contact from all subscriptions\n\nUnsubscribe a contact from all email subscriptions.\n\nUpdate a contact's subscription status\n\nSet the subscription status of a specific contact.\n\nSubscription definitions\n\nRetrieve all subscription status definitions\n\nGet a list of subscription status definitions from the account.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/settings/account-activity-api",
    "content": "Account activity\n\nIntroduction\n\nThe account activity API allows you to retrieve login history and security activity for your HubSpot account.\n\nUse cases for this API\n\nYou want to build an internal tool for your compliance team to regularly monitor the activity of employees in your company accessing data in your HubSpot account.\n\nActivity\n\nRetrieve audit logs\n\nRetrieve activity history for user actions related to approvals, content updates, CRM object updates, security activity, and more (Enterprise only). Learn more about activities included in audit log exports.\n\nRetrieve login activity\n\nRetrieve logs of user actions related to login activity.\n\nRetrieve security history\n\nRetrieve logs of user actions related to security activity.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/settings/account-information-api",
    "content": "Account information\n\nIntroduction\n\nUse the account information API to retrieve login and security history for your account, as well as usage data for a public app.\n\nUse cases for this API\n\nYour security team wants deeper insight into which internal users are accessing your HubSpot account data and you need to provide the associated activity data.\n\nUsage\n\nRetrieve private app daily API usage\n\nRetrieve the daily API usage for private apps in the account, along with information about usage limits.\n\nDetails\n\nRetrieve account details\n\nRetrieve account details such as the account type, time zone, currencies, and data hosting location.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/settings/business-units-api",
    "content": "Business units\n\nIntroduction\n\nUse the business units API to retrieve information about the business unit associated with a user in your HubSpot account.\n\nUse cases for this API\n\nYou have a third-party service to manage organizational data for your business, and you need to confirm the business unit that a specific HubSpot user is in.\n\nBusiness Unit\n\nGet Business Units for a user\n\nGet Business Units identified by userId. The userId refers to the user’s ID.\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/settings/currencies",
    "content": "Currencies\n\nIntroduction\n\nUse the currencies API to manage the currency settings in your HubSpot account, including your company's primary currency, any additional currencies, and updating exchange rates.\n\nUse cases for this API\n\nIf your company conducts business in different countries, use this API to adjust your account's currency settings based on requirements or data from a third-party provider.\n\nCurrency\n\n/settings/v3/currencies/codes\n\n/settings/v3/currencies/company-currency\n\n/settings/v3/currencies/exchange-rates\n\n/settings/v3/currencies/exchange-rates/{exchangeRateId}\n\n/settings/v3/currencies/exchange-rates/current\n\n/settings/v3/currencies/exchange-rates\n\n/settings/v3/currencies/exchange-rates/batch/create\n\n/settings/v3/currencies/exchange-rates/batch/read\n\n/settings/v3/currencies/exchange-rates/batch/update\n\n/settings/v3/currencies/exchange-rates/update-visibility\n\n/settings/v3/currencies/company-currency\n\n/settings/v3/currencies/exchange-rates/{exchangeRateId}\n\nRequirements\n\nParameters\n\nRequest\n\nResponse"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference/api/other-resources/error-handling",
    "content": "Handling errors\n\nUnless specified otherwise, most HubSpot endpoints will return a 200 OK response upon success. Any endpoints returning a different status code will specify the returned response in its documentation.\n\nIn addition, HubSpot has several error responses that are common to multiple APIs:\n\nAside from these general errors, HubSpot error responses are intended to be human-readable. Most endpoints don't return error codes, but return a JSON formatted response with details about the error.\n\nPlease note: the fields in the example response below should all be treated as optional in any error parsing. The specific fields included can vary between different APIs, so any error parsing should allow for specific fields to be missing from the response.\n\nMulti-status errors\n\nFor the object APIs' batch create endpoints, you can enable multi status responses that include partial failures. This means the response will show which records were created and which were not. To do so, include a unique objectWriteTraceId value for each input in your request. The objectWriteTraceId can be any unique string.\n\nFor example, a request to create tickets could look like:\n\nIn the response, statuses are grouped so you can see which creates were successful and which failed. For the above request, your response would look like:\n\nRetries\n\nIf your app or integration provides an endpoint that HubSpot will call, such as webhook subscriptions, any errors that your endpoint throws will cause HubSpot to retry the request.\n\nWebhooks\n\nIf your service has problems handling notifications at any time, HubSpot will attempt to resend failed notifications up to 10 times.\n\nHubSpot will retry in the following cases:\n\nWorkflows will not retry after receiving 4XX series response status codes. One exception to this rule is 429 rate limit errors; workflows will automatically retry after receiving a 429 response, and will respect the Retry-After header if present. Note that the Retry-After value is in miliseconds.\n\nNotifications will be retried up to 10 times. These retries will be spread out over the next 24 hours, with varying delays between requests. Individual notifications will have some randomization applied, to prevent a large number of concurrent failures from being retried at the exact same time.\n\nCustom code workflow actions\n\nIf you're creating a custom code action in a workflow, and an API call in your action fails due to a rate limiting error, or a 429 or 5XX error from axios or @hubspot/api-client, HubSpot will reattempt to execute your action for up to three days, starting one minute after failure. Subsequent failures will be retried at increasing intervals, with a maximum gap of eight hours between tries."
  },
  {
    "url": "https://developers.hubspot.com/docs/getting-started",
    "content": "Getting started overview\n\nWhether you’re a new HubSpot developer or looking to expand your skills, this section will guide you through the process of getting up and running. You’ll explore the different development routes available, as well as the specific tooling and accounts you’ll need to achieve your goals.\n\nThe advantages of a connected platform\n\nFirst, it’s helpful to consider what makes HubSpot a powerful platform for developers.\n\nThe foundation of every HubSpot account is the CRM (Customer Relationship Management) platform, a database of business relationships and processes. HubSpot offers different routes for external developers and partners to work with the CRM so they can create extra value for HubSpot end users. This includes:\n\nIn the next section, you’ll get an overview of the tooling that’s available for HubSpot developers. Then, you'll choose a route to continue on your HubSpot developer journey.\n\n1. Install tools to help you build\n\nThere are a wide range of tools available for HubSpot developers. The mix of tools you’ll need will depend on your specific goals.\n\nVisual studio code: installing Visual Studio Code means you can take advantage of the HubSpot Visual Studio Code extension, which allows you to centralize your development workflow.\n\nClient libraries: HubSpot provides client libraries for Node, PHP, Ruby, and Python.\n\nPostman: use Postman to access HubSpot's Postman Collections. Throughout HubSpot's API documentation, you'll find buttons for running calls using the collection.\n\nLearn more about HubSpot's developer tooling.\n\n2. Decide what to build\n\nThere’s no one-size-fits-all route to developing with HubSpot. It’s a flexible platform that can meet a wide range of needs.\n\nOne of the four broad categories listed below should cover most of these needs. You can choose the one that’s most relevant for you right now for a brief introduction, along with some immediate steps to get you started. You can also get a sense of the best tools for the job, and whether a specific type of HubSpot account is required.\n\n3. Join your peers\n\nConnect with your peers that are already building on HubSpot. Ask questions, share knowledge, build community, and maybe even make some friends along the way.\n\n4. Learn more, your way\n\nOnce you’re up and running, there are plenty of resources available to help you dig deeper. You can access in-depth guides, detailed reference docs or HubSpot academy courses, depending on your preferred learning style."
  },
  {
    "url": "https://developers.hubspot.com/docs/getting-started/overview",
    "content": "Getting started overview\n\nWhether you’re a new HubSpot developer or looking to expand your skills, this section will guide you through the process of getting up and running. You’ll explore the different development routes available, as well as the specific tooling and accounts you’ll need to achieve your goals.\n\nThe advantages of a connected platform\n\nFirst, it’s helpful to consider what makes HubSpot a powerful platform for developers.\n\nThe foundation of every HubSpot account is the CRM (Customer Relationship Management) platform, a database of business relationships and processes. HubSpot offers different routes for external developers and partners to work with the CRM so they can create extra value for HubSpot end users. This includes:\n\nIn the next section, you’ll get an overview of the tooling that’s available for HubSpot developers. Then, you'll choose a route to continue on your HubSpot developer journey.\n\n1. Install tools to help you build\n\nThere are a wide range of tools available for HubSpot developers. The mix of tools you’ll need will depend on your specific goals.\n\nVisual studio code: installing Visual Studio Code means you can take advantage of the HubSpot Visual Studio Code extension, which allows you to centralize your development workflow.\n\nClient libraries: HubSpot provides client libraries for Node, PHP, Ruby, and Python.\n\nPostman: use Postman to access HubSpot's Postman Collections. Throughout HubSpot's API documentation, you'll find buttons for running calls using the collection.\n\nLearn more about HubSpot's developer tooling.\n\n2. Decide what to build\n\nThere’s no one-size-fits-all route to developing with HubSpot. It’s a flexible platform that can meet a wide range of needs.\n\nOne of the four broad categories listed below should cover most of these needs. You can choose the one that’s most relevant for you right now for a brief introduction, along with some immediate steps to get you started. You can also get a sense of the best tools for the job, and whether a specific type of HubSpot account is required.\n\n3. Join your peers\n\nConnect with your peers that are already building on HubSpot. Ask questions, share knowledge, build community, and maybe even make some friends along the way.\n\n4. Learn more, your way\n\nOnce you’re up and running, there are plenty of resources available to help you dig deeper. You can access in-depth guides, detailed reference docs or HubSpot academy courses, depending on your preferred learning style."
  },
  {
    "url": "https://developers.hubspot.com/docs/getting-started/what-to-build",
    "content": "What to build\n\nThere are several different development routes possible with HubSpot, depending on your goals. You’ll find a high-level overview of each route on this page, along with the tooling and accounts you’ll need for each. You'll also find links to detailed docs to give you more context, as well as relevant quickstart guides.\n\nUse APIs and build integrations\n\nUse HubSpot's APIs to build custom solutions, such as sharing data between HubSpot and external systems, using webhooks to listen for changes in the account, and creating custom objects to store data specific to your business.\n\nExample use cases:\n\nTwo ways to build apps\n\nThere are two types of apps, depending on what you’re building. If you’re getting started with APIs and integrations, it's recommended to start with a private app, as they're faster to set up and use for authentication. Once you’re familiar with building apps, you may want to learn more about public apps, which can be installed in multiple accounts and enable you to build other types of extensions.\n\nExample use case for private apps: “I want to build an application for my company/team.”\n\nGet started authenticating calls with a private app\n\nMost API calls require authentication to interact with the data in your HubSpot account. To get started making calls to your account, create a private app and use its access token for authentication.\n\nPlease note: Super Admin permissions are required to build private apps in your HubSpot account.\n\nHow to get started:\n\nBuild for the app marketplace\n\nDevelop integrations for HubSpot's App Marketplace with a public app, to enable HubSpot users to install your integration into their account. Building public apps for the marketplace requires adherence to HubSpot's App Marketplace guidelines, and an app developer account.\n\nPublic apps authenticate with OAuth. Public apps can be installed on multiple accounts and can be distributed on the marketplace.\n\nExample use cases for public apps:\n\n“I’m a HubSpot partner who wants to build a reusable app that I can adapt for my clients.”\n\n“I’m a HubSpot partner who wants to make an app available on the marketplace to promote our capabilities to as many HubSpot customers as possible.”\n\nHow to get started:\n\nCreate an app developer account\n\nQuickstart: Create a public app\n\nFollow the OAuth quickstart guide\n\nReview the App Marketplace listing requirements\n\nSubmit your app to the App Marketplace\n\nCustomize the HubSpot UI\n\nBuild UI extensions to customize the CRM and help desk UI. UI extensions are built locally using the developer projects framework, which enables you to build and deploy to HubSpot using the CLI. The UI extensions SDK provides a toolbox of methods, functionalities, tools, and components to customize your extension. To see examples of what you can build, check out HubSpot's sample extensions.\n\nProjects enable you to locally build and deploy UI extensions for private apps and public apps using the HubSpot CLI.\n\nExample use cases for UI extensions:\n\n“I want to add a custom form to contact and company records that enables our customer support team to create Jira tickets while on customer calls.”\n\n“I need to surface detailed sales pipeline summaries across deal records so that our managing partners can find the information they need at a glance.”\n\nHow to get started:\n\nPlease note: there are a few ways to use HubSpot's UI customization tools, depending on your HubSpot subscription:\n\nFollow the quickstart guides:\n\nLearn more about creating UI extensions and using the UI extensions SDK\n\nBuild custom websites\n\nUsing HubSpot's CMS (Content Management System) software, you can create powerful websites and landing pages that adapt and tailor themselves to the individuals coming to your site. By building on the CMS, every website visitor interaction is directly connected to the account’s CRM, the same tool that the Sales, Marketing, Services, and RevOps teams are using to do their jobs more efficiently.\n\nBuild HubSpot websites locally in your preferred environment with the HubSpot CLI, using technologies such as:\n\nAnd if you prefer to use GitHub for version control, you can set up an integration using GitHub Actions.\n\nThe CMS enables you to build websites locally with the HubSpot CLI. You’ll have access to an array of versatile and adaptable tools, such as multi-language support, CTAs, forms, memberships, and more. HubSpot also handles security, server-side performance, CDN, hosting, and uptime assurance for you.\n\nExample use cases for the CMS:\n\n“I want to build out product listing pages that pull information directly from inventory maintained in the CRM.”\n\n“I need a website that features a public blog and a members-only blog.”"
  },
  {
    "url": "https://developers.hubspot.com/docs/getting-started/tools-to-help-you-build"
  },
  {
    "url": "https://developers.hubspot.com/docs/getting-started/account-types",
    "content": "HubSpot Account Types\n\nThere are several types of HubSpot accounts, each with a distinct purpose. Below, learn about each account type and what they're intended for.\n\nStandard HubSpot accounts\n\nA standard HubSpot account is the most common type of account. It’s where you’ll find all the tools, features, and settings included with your HubSpot plan. It can be free or paid, and is used as your production environment.\n\nA standard HubSpot account will have access to all the tools and features included with your plan.\n\nApp developer accounts\n\nApp developer accounts are free accounts intended for creating and managing apps, integrations, and developer test accounts. They're also where you can create and manage App Marketplace listings. However, app developer accounts and their associated test accounts aren’t connected to a standard HubSpot account. They can’t sync data or assets to or from another HubSpot account.\n\nApp developer accounts can be identified by a banner at the top of any page that says This is an app developer account.\n\nGet started by creating an app developer account.\n\nDeveloper test accounts\n\nWithin app developer accounts, you can create developer test accounts to test apps and integrations without affecting any real HubSpot data. Developer test accounts do not mirror production accounts, but are instead free HubSpot accounts with access to a 90-day trial of many enterprise features, with the following limitations:\n\nYou can create up to 10 test accounts per developer account. This type of account cannot sync data with other accounts, and they can't be connected to a standard HubSpot account. Test accounts can be identified by a banner at the top of the page, which includes how many days are left before it expires.\n\nBelow, learn more about creating and managing test accounts.\n\nCreate a developer test account\n\nTo create a developer test account:\n\nIn the left navigation sidebar of your app developer account, click Test accounts.\n\nIn the upper right, click Create an app test account.\n\nEnter an account name, then click Create.\n\nTo access and manage your developer test accounts:\n\nRenew a developer test account\n\nDeveloper test accounts will expire after 90 days if no API calls are made to the account. You can either manually renew the account from the Testing page in HubSpot, or by making an API call to the account. Keep the following in mind when attempting to renew the account via API call:\n\nSandbox accounts\n\nSandbox accounts allow you to test out changes without impacting your standard account. Learn more about the different types of sandbox accounts in the sections below.\n\nStandard sandbox accounts\n\nIf you have an Enterprise subscription, you can create a standard sandbox account that provides a safe and secure environment where you can test new workflows, integrations, website pages, and other important changes without impacting anything in your standard account. These sandboxes copy the structure of your standard account.\n\nThese accounts can be identified by a yellow banner at the top of the page that includes the label: You're in [name of sandbox], which is a standard sandbox account. The banner will also include a link back to your production account for easy switching.\n\nLearn more about standard sandbox accounts on HubSpot's Knowledge Base.\n\nCMS sandbox accounts\n\nCMS sandboxes are free accounts intended for building and testing website changes without impacting your standard account or live website. Similar to app developer accounts, CMS sandbox accounts are not connected to your standard HubSpot account.\n\nYou can create a CMS sandbox account for free.\n\nCMS sandboxes don’t have a banner, but they only have access to HubSpot’s free tools and CMS Hub Enterprise, minus the ability to connect a domain.\n\nDevelopment sandbox accounts (BETA)\n\nIf you have a Sales Hub or Service Hub Enterprise subscription, you can create a development sandbox account through the CLI for local development. You can gain access to development sandbox accounts by opting into the CRM developer tools beta in your standard HubSpot account.\n\nDevelopment sandboxes can be identified by a yellow banner at the top of the page that reads: You're in [name of sandbox], which is a development sandbox account. Learn more about creating and using development sandbox accounts.\n\nMarketplace provider accounts\n\nMarketplace Provider accounts are intended for creating and managing Template Marketplace listings and transactions. To get started selling on the Template Marketplace, create a Template Marketplace provider account. If you're a HubSpot Partner, you already have Marketplace Provider functionality in your Partner account.\n\nA Marketplace Provider account can be identified by a Template Marketplace item in the top navigation menu."
  },
  {
    "url": "https://developers.hubspot.com/docs/getting-started/slack/developer-slack",
    "content": "Join the HubSpot Developer Slack Community\n\nHubSpot's Developer Slack is a dedicated community for HubSpot's developers to gather for developer-to-developer support and collaboration around the HubSpot platform. Started in 2016, the developer Slack community has grown to hundreds of active developers from around the world gathered together to share their knowledge and expertise.\n\nWho is the Developer Slack Community for?\n\nWhether you are just starting out developing on the HubSpot Platform or you are a seasoned expert, the developer slack is for you. We have channels dedicated to multiple aspects of our platform from APIs, Email Development, Local Development using our CLI, Templates, Themes and more.\n\nWhat can I expect once I join the community?\n\nYou can expect to find an active community of developers who support and teach each other. This is first and foremost a community, the more you put into it the more you'll get out of it. This community is global, but the majority of folks in it are in the western hemisphere, that means if you live in the eastern hemisphere you may not see fast responses. It's not that anyone is ignoring or not seeing your posts, it's probably that folks are sleeping. The way to change that is to be one of the folks in your time zone that's active and helps others. Through that the community will grow and be more useful to you. We at HubSpot care deeply about this community and are a part of the community. Treat others with respect, treat HubSpotters with respect. Review our slack community code of conduct. Let's grow better together.\n\nJoin our Developer Slack by signing up below\n\nWe're committed to your privacy. HubSpot uses the information you provide to us to contact you about our relevant content, products, and services. You may unsubscribe from these communications at any time. For more information, check out our Privacy Policy. In order to provide you the content requested, we need to store and process your personal data. If you consent to us storing your personal data for this purpose, please tick the checkbox below."
  },
  {
    "url": "https://developers.hubspot.com/docs/guides/apps",
    "content": "Building apps overview\n\nApps enable you to authenticate API calls to your HubSpot account, subscribe to events with webhooks, and extend the HubSpot UI, such as with custom cards. HubSpot offers several types of apps and extensions depending on your integration's needs. Below, learn more about the types of apps and extensions you can build with HubSpot, how to get started building them, and how to manage them in HubSpot.\n\nTypes of apps\n\nDepending on the type of integration you want to build, you’ll need to choose the right type of app. Below, learn more about the types of apps that you can build and the functionalities that they support.\n\nFor building extensions, view the reference table below for a quick overview of which extensions can be built with which types of apps.\n\nPrivate apps\n\nPrivate apps can be created for a single HubSpot account, and are best suited for one-off scripts or single-purpose extensions. In general, private apps are simpler to implement than public apps. Private apps authenticate with access tokens and cannot be listed on the HubSpot App Marketplace.\n\nFor example, you might build a private app for your HubSpot account to:\n\nLearn more about when to build private apps. If this type of app fits your needs, get started creating a private app in your HubSpot account.\n\nPrivate apps in projects (BETA)\n\nPrivate apps built using the developer projects framework enable you to create UI extensions for CRM records and help desk preview panels. You'll need a Sales Hub or Service Hub Enterprise subscription to build a UI extension in for a private app in a standard HubSpot account. However, you can try these tools out for free in a developer test account.\n\nTo get started, enroll your account into the beta, then follow the quickstart guide.\n\nPublic apps\n\nPublic apps can be installed in multiple accounts. In addition to the types of extensions you can build with a private app, public apps support advanced functionality, such as:\n\nPublic apps authenticate with OAuth and can be listed on the HubSpot App Marketplace. Learn more about when to build public apps.\n\nIf this type of app fits your needs, get started creating a public app in your app developer account.\n\nPublic apps in projects (BETA)\n\nPublic apps built using the developer projects framework enable you to create UI extensions for CRM records and help desk preview panels. You can also include other extensions in a public app created this way, but you'll need to manage those extensions in HubSpot and through the API as before.\n\nIf you're enrolled in the beta, get started by following the quickstart guide, or learn how to migrate an existing public app to the projects framework.\n\nSupported extensions by app type\n\n* Classic CRM cards are different from the app cards you can create as UI extensions with projects (BETA). UI extensions offer more advanced functionality and customizable components.\n\nTypes of accounts for app development\n\nWhile app developer and test accounts work together, they each serve a distinct purpose.\n\nLearn more about HubSpot's account types.\n\nAuthentication\n\nIf you want to build a custom integration with a single HubSpot account, you can create a private app and use its access token to authenticate API calls, or you can use OAuth with a public app. Any app designed for installation by multiple HubSpot accounts or listing on the App Marketplace must use OAuth.\n\nPlease note: as of November 30, 2022, HubSpot API Keys have been deprecated and are no longer supported. Continued use of HubSpot API Keys is a security risk to your account and data.\n\nYou should instead authenticate using a private app access token or OAuth. Learn more about this change and how to migrate an API key integration to use a private app instead.\n\nIf you want to subscribe to webhooks or set up OAuth for your app, you should create a developer account. With developer accounts, you can also list your apps on the App Marketplace or create a test account.\n\nDeveloper API keys\n\nTo manage your app's settings through the API, you can use a developer API key. This API key is separate from standard API keys, which have been deprecated. Developer API keys can be used for managing subscriptions for the Webhooks API and creating or updating event types for the timeline events feature. All other API calls need to be made using a private app access token or OAuth.\n\nTo access your app developer account API key:\n\nIn your app developer account, navigate to Keys > Developer API Key in the left navigation bar.\n\nClick Create key.\n\nOnce the key is created, you can click Show key. The key will be revealed, and you can then click Copy below the key.\n\nTo review a list of recent security actions associated with the key, click View Audit Logs.\n\nYou can also rotate the current API key by clicking the Actions dropdown menu, hovering over Rotate key, then clicking Deactivate and rotate this key now.\n\nDelete a developer account\n\nYou can delete app developer accounts if they don’t contain apps with installations or active marketplace listings. If your account has apps with installations or active marketplace listings and you’d like to delete your account, please reach out to support for assistance.\n\nOnce you delete your account, you will no longer be able to access that account. If you can switch between multiple HubSpot accounts, the deleted account will no longer appear.\n\nIn your HubSpot API developer account, click your account name in the top right corner, then click on Account.\n\nClick Delete account. If your account has any apps with installations or active marketplace listings this button will be disabled.\n\nIn the dialog box, enter your account ID then click Delete developer account"
  },
  {
    "url": "https://developers.hubspot.com/docs/guides/cms",
    "content": "HubSpot CMS overview\n\nThis section is designed to help you understand key aspects of HubSpot's CMS and build great websites on it. To get the most out of this, a professional-level understanding of web development basics, including HTML, JavaScript, and CSS, is expected.\n\nGetting started\n\nIf you're just getting started with developing on HubSpot's CMS, it's recommended to begin with the following:\n\nBuilding for content creators\n\nHubSpot's CMS is designed to help businesses grow their web presence with an emphasis on enabling marketers to create and manage web content. The website's content, lead collection, and analytics are integrated with the HubSpot CRM, making it easy to create personalized experiences for visitors and integrate those experiences with the rest of the business.\n\nA well-crafted website should be developed in close collaboration with your content creators to understand their needs. To that end, it's recommended that you preview how the page building experience looks and feels for content creators while you build. This ensures they can work independently with the site as much as possible.\n\nHubSpot takes care of hosting and maintaining your pages, so you don’t have to worry about plugin management, updates, hosting, scaling, or security. The tradeoff is that the system puts a few more restrictions on what you can do compared to self-hosted CMS's. For example, you can’t alter or extend system fundamentals manually or via plugins, manipulate low-level rendering, or access and alter database content directly.\n\nDeveloper-built content (e.g., themes, templates, modules, JavaScript, and CSS) is created in a developer file system, while page content (pages, blog posts) is laid out and built in a powerful block-based what you see is what you get (WYSIWYG) editor, and media files (content creator-built images, PDFs, etc.) are stored in a web app-based file manager.\n\nWhen a page is rendered, HubSpot routes the request to one of many servers based on domain, renders the page on our servers, and caches it to a content delivery network (CDN) if possible.\n\nTypes of content\n\nThere are many types of content that you create using HubSpot's CMS. The user interface for content creators is slightly different depending on content type, which has implications that you as a developer need to be aware of.\n\nWebsite pages and landing pages\n\nWebsite and landing pages are built independent of one another, but all pages are based on templates. For content creators, the process of building a landing page or a website page is nearly identical. The distinction between them is that website pages are made to present information that’s part of your website and designed to be found organically, while a landing page is generally associated with a specific marketing offer or campaign (e.g., linked from a marketing email sent to a specific list of contacts).\n\nIn the UI for marketers, the analytics and organization of these page types are also organized separately since landing pages often have specific conversion goals.\n\nBlogs\n\nHubSpot blogs have two views—one for the listing page and one for the individual post page, then each blog post is populated into each of them. You can set a blog to share the same template for blog posts and listing pages, or have separate templates for the listing page and for blog posts. Blog posts must share the same template. Learn more about blog template markup and how to create and manage blogs in HubSpot.\n\nEmails\n\nEmails can be built in a few ways in HubSpot:\n\nWorking with data\n\nIn addition to creating page content through the in-app editors or hard-coding in templates, you can also use structured data sources to populate dynamic page content with HubL. You can use the following data sources to populate pages:\n\nBuilding dynamic pages using structured content means that you can create, edit, and remove website pages and page content by updating the data sources directly. Similar to a HubSpot blog, a set of dynamic pages will include a single listing page to display the instances of your data source, then a separate page for each individual instance. Using HubL, you can fully configure the data that the pages display.\n\nFor example, you can create a HubDB table that stores a row of information for each member of a sales team. Using that HubDB table, HubSpot can then generate a listing page to display key details from each table row (such as a name and image for each sales rep), along with a separate page per sales rep to display more information (such as their bio and phone number). Should a sales rep later be promoted to a different team, you can delete their row from the HubDB table, and HubSpot will automatically delete their detail page and remove them from the listing page.\n\nServerless functions\n\nIn addition to using CRM records and HubDB data to populate pages, you can use serverless functions to write server-side code that interacts with HubSpot and third-party services through APIs. Serverless Functions are a Content Hub Enterprise feature.\n\nDeveloper file system\n\nThe core assets—templates, themes, and modules, as well as the JavaScript, CSS files, and images that support them—are created in a developer file system. You can view this file system either in the left panel of the design manager or in folders synchronized locally using the local development tools. Within the file system, assets can refer to each other with absolute or relative paths.\n\nPlease note: React-based assets, such as some HubSpot default modules and custom CMS React assets, will not appear in the design manager file system. These assets are intended to only be worked on in your local environment using the HubSpot CLI to fetch and upload.\n\nBehind the scenes, these files are mapped to entries in a database. This is why access to the developer file system is through the HubSpot CLI tools rather than direct SSH or FTP access, and some file system features you may expect, like permissions and symlinks, are not offered in the developer filesystem.\n\nThis differs from the approach of traditional CMS's, but means that broken references between file or syntax errors are caught at publish time rather than at runtime, providing you with extra insulation against accidental failures when live traffic is hitting a website.\n\nTemplates in the file system will be automatically detected and will be presented to content creators as they’re making new pages, so the structure of the file system is up to you. There’s no requirement that modules live in a /modules/ folder or JavaScript lives in a /js/ folder. However, it's recommended to organize your assets in a similar way to the boilerplate example code for the CMS.\n\nPlease note: by default, HubSpot automatically minifies JavaScript and CSS included in the design manager to remove unnecessary spaces, line breaks, and comments. This also applies to JavaScript and CSS uploaded to the design manager through the CLI. This means that you should not add already minified code directly to the design manager.\n\nLearn more about JavaScript and CSS minification.\n\nThemes, templates, modules, and fields\n\nThemes, templates, modules, and fields are the objects you’ll work with most. Using these different objects effectively lets you give content creators the freedom to work and iterate on websites independently while staying inside style and layout guardrails you set.\n\nThemes and modules contain fields, which are settings of specific data types, such as numbers, strings, rich text, and images. You can control how these are used in rendering these objects, as well as how they should be organized and appear in the WYSIWYG editor. Content creators can set values for fields in the WYSIWYG editor, which are applied to the theme or module at render time.\n\nLearn more in the CMS building blocks overview.\n\nThe HubL Language\n\nThe main language that you'll use to build website assets on HubSpot's CMS is the HubSpot Markup Language or HubL (pronounced “Hubble”). HubL is HubSpot’s extension of Jinjava, a templating engine based on Jinja. HubL uses a fair amount of markup that is unique to HubSpot and does not support all features of Jinja. It’s executed completely on the server-side when a page is rendered.\n\nHubL has the features you’d expect of a simple templating language like variables, for loops, and if statements, but also supports more complex rendering macros, data fetching, and mapping with tags, functions, and filters.\n\nIf you reach the limits of what's possible with HubL, HubSpot provides APIs for creating more customized solutions. Content Hub Enterprise accounts can use serverless functions, enabling more sophisticated server side programming.\n\nYou can refer to the HubL language reference for more details on specific language features.\n\nLogged in pages\n\nUsing the Membership feature of Content Hub Enterprise, you can require your CRM contacts to be logged in to view specific content of your site. Content behind membership pages can be highly personalized to the logged-in contact, and can even render Contacts, Companies, Deals and Products data from the CRM.\n\nMulti-language support\n\nWith HubSpot’s CMS, users can create multi-language variations of their content. This will allow end-users to see content in the language with which they’re most comfortable. In addition, HubSpot provides tools to help developers ensure that the right language is available to the end-user."
  },
  {
    "url": "https://developers.hubspot.com/docs/guides/crm",
    "content": "Please note: previously, this page was titled \"CRM development tools overview.\" It has been updated to reflect the expanded toolset, as UI extensions can also be used to customize the help desk preview panel UI. All previous CRM development tools documentation has been expanded and moved to the guides section. This page has been updated for posterity.\n\nUI customization overview (BETA)\n\nCustomize HubSpot's UI by building UI extensions, powered by public and private apps. UI extensions are developed locally using the developer projects framework, and enable you to use features like development sandboxes, version control, and integration with GitHub to streamline your process.\n\nFor example, you can build an app card that retrieves data from an external source.\n\nBelow is an overview of the tools you'll use during the UI extension development process, along with links to in-depth documentation to guide you along the way.\n\nPlease note: there are a few ways to use HubSpot's UI customization tools, depending on your HubSpot subscription:\n\nProjects\n\nProjects are the highest level container of UI extension development, as they contain not only UI extensions, but also the app that powers them, along with all other supporting assets. Projects also enable a build and deploy process on HubSpot's platform with the hs project CLI commands, which you'll use for version control as you build. Once deployed to an account, you can view and manage the project, app, and any included UI extensions in HubSpot. This includes viewing build history and monitoring API calls.\n\nLearn more about creating projects, and get started by following the UI extension quickstart guides for private apps or public apps.\n\nApps\n\nApps are the powerhouse of UI extensions, enabling you to authenticate requests for data fetching and more. You can build UI extensions for both public apps and private apps, depending on your use case. The main differences between which type of app to use include:\n\nPlease note: the ability to build UI extensions for public apps is currently in Early Access beta, and enrollment is separate from the CRM development tools to build UI extensions with React as frontend beta for private apps.\n\nRequest access to the UI extensions for public apps beta\n\nLearn more about the differences between these types of apps, as well as how to create and configure both public apps and private apps locally using projects.\n\nUI extensions\n\nUI extensions are custom-built, React-based UI elements that enrich HubSpot's interface. At this time, possible UI extensions include app cards for CRM records and help desk. For example, you can create a card that enables users to submit form data to an external database from any contact record, or a card that customer support reps can use to take action on open tickets in the help desk UI.\n\nUI extensions are built using projects and consist of a front-end and back-end:\n\nLearn more about UI extensions.\n\nPlease note: the app cards you can build with projects are separate from classic CRM cards, and they cannot be built interchangeably. If you've previously built a public app that includes a classic CRM card, learn how to migrate it to the projects framework.\n\nDevelopment sandboxes\n\nFor private app development, you can use development sandboxes to develop projects in a lightweight testing environment to ensure your project's components work as expected before deploying to a standard sandbox or production account. Development sandboxes are created through the CLI and can be accessed within production HubSpot accounts. Development sandboxes sync some, but not all, account assets on creation, and have additional limits compared to standard sandboxes.\n\nWhen building UI extensions for a public app, you'll instead use test accounts within your developer account.\n\nLearn more about setting up a development sandbox.\n\nGitHub integration\n\nIf you prefer to use GitHub for version control, you can connect a GitHub repository to a project to automatically trigger project builds when you push a change to the connected repository. You can then use use GitHub tools and workflows to streamline development, whether you work alone or with a team.\n\nGet started\n\nGet started with private apps\n\nIf you're a Super Admin in an Enterprise account, you can join this beta from the Product Updates page in your HubSpot account:\n\nIn your HubSpot account, click your account name in the top right corner, then click Product updates.\n\nIn the left sidebar, select In beta.\n\nIn the list of betas, search for or scroll to the CRM development tools to build UI extensions with React as frontend beta, then click Join beta.\n\nAfter joining the beta, get started with any of the following options:\n\nGet started with public apps\n\nThe ability to create UI extensions for public apps is in Early Access beta, which you can request access to here. Once you're enrolled in the beta, start with the following resources:\n\nMore resources"
  },
  {
    "url": "https://developers.hubspot.com/docs/reference",
    "content": "\n\nAPI Reference Overview\n\nIntroduction\n\nNow with versioning:\n\nAdditional benefits for developers:\n\nIn-depth guides"
  }
]